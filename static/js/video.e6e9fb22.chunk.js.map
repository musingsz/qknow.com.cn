{"version":3,"sources":["webpack:///static/js/video.e6e9fb22.chunk.js","webpack:///./src/actions/courseActions.js?a576","webpack:///./src/actions/videoAction.js","webpack:///./src/components/PlyrMidea.js","webpack:///./src/containers/Video.js","webpack:///./~/plyr/dist/plyr.css","webpack:///./~/plyr/dist/plyr.css?4436","webpack:///./src/images/qknow.jpg","webpack:///./~/plyr/src/js/plyr.js"],"names":["webpackJsonp","58","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","fetchCourseListSuccess","data","type","fetchCourseSuccess","fetchCourseByCourseTypeId","id","dispatch","_axios2","get","_default2","API_URL","then","response","status","meta","code","Error","fetchCourseById","Object","defineProperty","value","_axios","_default","_constants","265","fetchVideoSuccess","fetchVideoById","token","issued","console","log","headers","x-token","x-token-issued","271","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_react","_react2","_reactDom","_reactDom2","_plyr","_plyr2","PlyrMidea","_React$Component","this","getPrototypeOf","apply","arguments","nextProps","nextState","player","source","setup","findDOMNode","refs","videoPlayer","options","destroy","createElement","className","ref","Component","propTypes","PropTypes","object","279","_radium","_radium2","_reactRedux","_RaisedButton","_RaisedButton2","_reactRouter","_videoAction","_courseActions","_PlyrMidea","_PlyrMidea2","_qknow","_qknow2","style","base","video","height","couseName","fontSize","des","marginTop","marginBottom","couseIntro","lineHeight","pre","marginRight","_ref2","disabled","label","primary","Video","_Component","_ref","_temp","_this","_ret","_len","args","Array","_key","concat","componentDidMount","user","onLoadVideo","params","onLoadCourse","courseId","preButton","containerElement","Link","to","nextButton","sources","src","poster","mapStateToProps","state","course","mapDispatchToProps","connect","304","push","312","content","locals","334","p","506","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","document","undefined","window","_browserSniff","nameOffset","verOffset","ix","ua","navigator","userAgent","name","appName","fullVersion","parseFloat","appVersion","majorVersion","parseInt","isIE","isFirefox","isChrome","isSafari","indexOf","substring","lastIndexOf","toLowerCase","toUpperCase","isNaN","version","isIos","test","platform","isIphone","isTouch","documentElement","_supportMime","plyr","mimeType","media","canPlayType","replace","_injectScript","querySelectorAll","tag","firstScriptTag","getElementsByTagName","parentNode","insertBefore","_inArray","haystack","needle","_replaceAll","string","find","RegExp","_wrap","elements","wrapper","child","cloneNode","element","parent","sibling","nextSibling","appendChild","_remove","removeChild","_prependChild","firstChild","_setAttributes","attributes","setAttribute","_is","boolean","_insertElement","_getClassname","selector","_toggleClass","classList","_hasClass","contains","_matches","Element","f","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","s","_proxyListener","eventName","userListener","defaultListener","useCapture","_on","event","_toggleListener","events","callback","toggle","eventList","split","NodeList","x","Node","_event","bubbles","properties","CustomEvent","detail","dispatchEvent","_toggleState","getAttribute","_getPercentage","current","max","toFixed","_extend","objects","destination","shift","property","_parseYouTubeId","url","regex","match","$2","_parseVimeoId","_fullscreen","fullscreen","supportsFullScreen","isFullScreen","requestFullScreen","cancelFullScreen","fullScreenEventName","prefix","browserPrefixes","il","msExitFullscreen","msFullscreenEnabled","body","fullscreenElement","mozFullScreenElement","Plyr","config","_triggerEvent","api","_console","debug","slice","logPrefix","unshift","_getIconUrl","iconUrl","absolute","browser","_buildControls","html","iconPath","iconPrefix","controls","i18n","play","restart","rewind","pause","forward","buffered","tooltips","seek","currentTime","duration","toggleMute","volume","volumeMin","volumeMax","toggleCaptions","toggleFullscreen","join","_setupFullscreen","supported","full","allowAudio","enabled","nativeSupport","fallback","_inFrame","_log","container","classes","buttons","_focusTrap","_setupCaptions","_getElement","selectors","captions","videoContainer","insertAdjacentHTML","usingTextTracks","textTracks","kind","captionSrc","children","childNodes","nodeName","captionExists","tracks","mode","_showCaptions","y","track","activeCues","_setCaption","getCueAsHTML","currentCaption","xhr","XMLHttpRequest","onreadystatechange","readyState","caption","req","responseText","lineSeparator","r","parts","index","_warn","open","send","innerHTML","trim","offsetHeight","_seekManualCaptions","time","_timecodeCommon","tc","pos","tcpair","_subTcSecs","_timecodeMin","_timecodeMax","seconds","tc1","tc2","Math","floor","subcount","number","active","storage","captionsEnabled","defaultActive","_getElements","top","e","_checkFocus","which","isFullscreen","last","shiftKey","first","preventDefault","focus","tabbables","_insertChildElements","_injectControls","loadSprite","seekTime","random","querySelector","htmlElement","labels","hidden","tooltip","_findElements","mute","progress","buffer","bar","text","played","input","display","_toggleNativeControls","_toggleStyleHook","types","html5","removeAttribute","_setTitle","iframe","title","frameTitle","_setupStorage","_storage","localStorage","removeItem","getItem","_updateStorage","JSON","parse","setItem","stringify","_setupMedia","embed","stopped","autoplay","ontainer","videoWrapper","_setupEmbed","mediaId","embedId","containers","embedWrapper","YT","_youTubeReady","urls","youtube","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","forEach","Vimeo","_vimeoReady","vimeo","vimeoTimer","setInterval","clearInterval","soundCloud","loaded","SC","soundcloud","soundCloudTimer","_soundcloudReady","_embedReady","_setupInterface","_ready","videoId","Player","playerVars","rel","showinfo","iv_load_policy","cc_load_policy","cc_lang_pref","wmode","modestbranding","disablekb","origin","onError","onReady","playVideo","paused","pauseVideo","stop","stopVideo","getDuration","muted","isMuted","getVideoData","timers","buffering","getVideoLoadedFraction","lastBuffered","onStateChange","playing","seeking","getCurrentTime","loop","byline","portrait","on","percent","Widget","bind","Events","READY","seekTo","getPosition","PLAY","PAUSE","PLAY_PROGRESS","currentPosition","LOAD_PROGRESS","loadProgress","FINISH","_play","_pause","_togglePlay","_rewind","_seek","_forward","targetTime","_getDuration","_updateSeekDisplay","setCurrentTime","mediaDuration","_checkPlaying","_toggleControls","_saveScrollPosition","scroll","pageXOffset","pageYOffset","_restoreScrollPosition","scrollTo","_toggleFullscreen","overflow","_toggleMute","_setVolume","setVolume","min","_increaseVolume","step","volumeStep","_decreaseVolume","_updateVolume","_toggleCaptions","show","_checkLoading","loading","clearTimeout","setTimeout","_updateProgress","pressed","end","_setProgress","_updateTimeDisplay","secs","mins","hours","displayHours","_displayDuration","displayDuration","_updateSeekTooltip","_timeUpdate","clientRect","getBoundingClientRect","visible","width","pageX","left","hideControls","delay","isEnterFullscreen","hover","_source","_updateSource","getVideoUrl","getCurrentSound","permalink_url","currentSrc","firstSource","crossorigin","load","ready","_cancelRequests","_destroy","_updatePoster","_controlListeners","togglePlay","trigger","hadTabFocus","tabFocus","getFocusElement","focused","activeElement","getKeyCode","keyCode","checkTabFocus","button","nodeList","handleKey","seekByKey","held","stopPropagation","inputEvent","keyboardShorcuts","global","allowed","count","editable","listeners","inverted","webkitDirectionInvertedFromDevice","deltaY","deltaX","_mediaListeners","showPosterOnEnd","clickToPlay","cursor","ended","disableContextMenu","restore","cleanUp","function","original","init","replaceChild","unload","_init","tagName","basic","controlsMissing","defaults","getOriginal","getContainer","getEmbed","getMedia","getType","getVolume","isReady","isLoading","isPaused","toggleControls","support","onload","isOldIE","audioSupport","videoSupport","targets","add","hook","players","instances","array","Number","String","HTMLElement","result","cancelable","evt","createEvent","initCustomEvent","Event"],"mappings":"AAAAA,cAAc,EAAE,EAAE,IAEZC,GACA,SAASC,EAAQC,EAASC,GAE/B,YAkBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GCnBxF,QAASG,GAAuBC,GAC9B,OACEC,iCACAD,QAIJ,QAASE,GAAmBF,GAC1B,OACEC,4BACAD,QAMG,QAASG,GAA0BC,GACxC,MAAO,UAACC,GACNC,EAAAR,QAAMS,IAAIC,EAAAV,QAAOW,SAAP,eAA8BL,EAA9B,YAA2CM,KAAK,SAASC,GACjE,GAAuB,MAApBA,EAASC,QAA8C,MAA5BD,EAASX,KAAKa,KAAKC,KAC/C,KAAM,IAAIC,OAAM,2BAElB,OAAOJ,GAASX,KAAKA,OACpBU,KAAK,SAASV,GACf,MAAOK,GAASN,EAAuBC,OAMtC,QAASgB,GAAgBZ,GAC9B,MAAO,UAACC,GACNC,EAAAR,QAAMS,IAAIC,EAAAV,QAAOW,SAAP,WAA0BL,IAAMM,KAAK,SAASC,GACtD,GAAuB,MAApBA,EAASC,QAA8C,MAA5BD,EAASX,KAAKa,KAAKC,KAC/C,KAAM,IAAIC,OAAM,2BAElB,OAAOJ,GAASX,KAAKA,OACpBU,KAAK,SAASV,GACf,MAAOK,GAASH,EAAmBF,ODnCxCiB,OAAOC,eAAezB,EAAS,cAC7B0B,OAAO,IAET1B,ECUeU,4BDTfV,ECuBeuB,iBAlChB,IAAAI,GAAA1B,EAAA,IDeKY,EAAUX,EAAuByB,GCdtCC,EAAA3B,EAAA,IDkBKc,EAAYb,EAAuB0B,GCjBxCC,EAAA5B,EAAA,KDmEM6B,IACA,SAAS/B,EAAQC,EAASC,GAE/B,YAiBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GEhFxF,QAAS4B,GAAkBxB,GACzB,OACEC,2BACAD,QAMG,QAASyB,GAAerB,EAAGsB,EAAMC,GAGtC,MAFAC,SAAQC,IAAI,QAAQH,GAEb,SAACrB,GACNC,EAAAR,QAAMS,IAAIC,EAAAV,QAAOW,SAAP,iBAAgCL,IACvC0B,SACEC,UAAA,GAAcL,EACdM,iBAAA,GAAqBL,KAEvBjB,KAAK,SAASC,GACf,GAAuB,MAApBA,EAASC,QAA8C,MAA5BD,EAASX,KAAKa,KAAKC,KAC/C,KAAM,IAAIC,OAAM,2BAElB,OAAOJ,GAASX,KAAKA,OACpBU,KAAK,SAASV,GACf,MAAOK,GAASmB,EAAkBxB,OFyCvCiB,OAAOC,eAAezB,EAAS,cAC7B0B,OAAO,IAET1B,EE3DegC,gBAlBhB,IAAAL,GAAA1B,EAAA,IFiFKY,EAAUX,EAAuByB,GEhFtCC,EAAA3B,EAAA,IFoFKc,EAAYb,EAAuB0B,GEnFxCC,EAAA5B,EAAA,KFuHMuC,IACA,SAASzC,EAAQC,EAASC,GAE/B,YAsBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAEvF,QAASsC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMC,GAAQ,IAAKD,EAAQ,KAAM,IAAIE,gBAAe,4DAAgE,QAAOD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BD,EAAPC,EAElO,QAASE,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIP,WAAU,iEAAoEO,GAAeD,GAASE,UAAY5B,OAAO6B,OAAOF,GAAcA,EAAWC,WAAaE,aAAe5B,MAAOwB,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAY3B,OAAOkC,eAAiBlC,OAAOkC,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GA1Bje3B,OAAOC,eAAezB,EAAS,cAC7B0B,OAAO,GAGT,IAAIkC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWX,WAAaW,EAAWX,aAAc,EAAOW,EAAWT,cAAe,EAAU,SAAWS,KAAYA,EAAWV,UAAW,GAAMhC,OAAOC,eAAeqC,EAAQI,EAAWC,IAAKD,IAAiB,MAAO,UAAUvB,EAAayB,EAAYC,GAAiJ,MAA9HD,IAAYP,EAAiBlB,EAAYS,UAAWgB,GAAiBC,GAAaR,EAAiBlB,EAAa0B,GAAqB1B,MGlIjiB2B,EAAArE,EAAA,GHsIKsE,EAAUrE,EAAuBoE,GGrItCE,EAAAvE,EAAA,GHyIKwE,EAAavE,EAAuBsE,GGxIzCE,EAAAzE,EAAA,KH4IK0E,EAASzE,EAAuBwE,EG3IrCzE,GAAA,IHuJC,IGpJK2E,GHoJW,SAAUC,GAGxB,QAASD,KAGP,MAFAnC,GAAgBqC,KAAMF,GAEf/B,EAA2BiC,MAAOF,EAAUjB,WAAanC,OAAOuD,eAAeH,IAAYI,MAAMF,KAAMG,YAyBhH,MA9BAhC,GAAU2B,EAAWC,GAQrBjB,EAAagB,IACXT,IAAK,4BACLzC,MAAO,SGzJgBwD,EAAWC,GACnCL,KAAKM,OAAOC,OAAOH,EAAUG,WH4J5BlB,IAAK,oBACLzC,MAAO,WGzJRoD,KAAKM,OAAST,EAAAtE,QAAKiF,MAAMb,EAAApE,QAASkF,YAAYT,KAAKU,KAAKC,aAAcX,KAAKf,MAAM2B,SAAS,MH6JzFvB,IAAK,uBACLzC,MAAO,WG1JRoD,KAAKM,OAAOO,aH8JXxB,IAAK,SACLzC,MAAO,WG3JR,MACE6C,GAAAlE,QAAAuF,cAAA,SAAOC,UAAU,eAAeC,IAAI,oBH+JhClB,GGnLcL,EAAAlE,QAAM0F,UAAxBnB,GACGoB,WACLN,QAAWpB,EAAA2B,UAAUC,OACrBb,OAAUf,EAAA2B,UAAUC,QHuLvBlG,EAAQK,QGhKMuE,GHoKTuB,IACA,SAASpG,EAAQC,EAASC,GAE/B,YAoCA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAEvF,QAASsC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMC,GAAQ,IAAKD,EAAQ,KAAM,IAAIE,gBAAe,4DAAgE,QAAOD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BD,EAAPC,EAElO,QAASE,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIP,WAAU,iEAAoEO,GAAeD,GAASE,UAAY5B,OAAO6B,OAAOF,GAAcA,EAAWC,WAAaE,aAAe5B,MAAOwB,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAY3B,OAAOkC,eAAiBlC,OAAOkC,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GAxCje3B,OAAOC,eAAezB,EAAS,cAC7B0B,OAAO,GAGT,IAAIkC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWX,WAAaW,EAAWX,aAAc,EAAOW,EAAWT,cAAe,EAAU,SAAWS,KAAYA,EAAWV,UAAW,GAAMhC,OAAOC,eAAeqC,EAAQI,EAAWC,IAAKD,IAAiB,MAAO,UAAUvB,EAAayB,EAAYC,GAAiJ,MAA9HD,IAAYP,EAAiBlB,EAAYS,UAAWgB,GAAiBC,GAAaR,EAAiBlB,EAAa0B,GAAqB1B,MI7MjiB2B,EAAArE,EAAA,GJiNKsE,EAAUrE,EAAuBoE,GIhNtC8B,EAAAnG,EAAA,IJoNKoG,EAAWnG,EAAuBkG,GInNvCE,EAAArG,EAAA,IACAsG,EAAAtG,EAAA,IJwNKuG,EAAiBtG,EAAuBqG,GIvN7CE,EAAAxG,EAAA,IAEAyG,EAAAzG,EAAA,KACA0G,EAAA1G,EAAA,IAEA2G,EAAA3G,EAAA,KJ4NK4G,EAAc3G,EAAuB0G,GI3N1CE,EAAA7G,EAAA,KJ+NK8G,EAAU7G,EAAuB4G,GI3NhCE,GACJC,QAGAC,OACEC,OAAO,KAETC,WACEC,SAAS,IAEXC,KACEC,UAAU,GACVC,aAAa,IAEfC,YACEJ,SAAS,GACTK,WAAW,KAEbC,KACEC,YAAY,KJyOXC,EIzMCtD,EAAAlE,QAAAuF,cAAAY,EAAAnG,SAAcyH,UAAA,EAAUC,MAAM,MAAMC,SAAS,IA3B7CC,EJsOO,SAAUC,GAGpB,QAASD,KACP,GAAIE,GAEAC,EAAOC,EAAOC,CAElB7F,GAAgBqC,KAAMmD,EAEtB,KAAK,GAAIM,GAAOtD,UAAUhB,OAAQuE,EAAOC,MAAMF,GAAOG,EAAO,EAAGA,EAAOH,EAAMG,IAC3EF,EAAKE,GAAQzD,UAAUyD,EAGzB,OAAeN,GAASC,EAAQxF,EAA2BiC,MAAOqD,EAAOF,EAAMtE,WAAanC,OAAOuD,eAAekD,IAAQlF,KAAKiC,MAAMmD,GAAOrD,MAAM6D,OAAOH,KAAiBH,EInP7KO,kBAAoB,WAClB,GAAI3G,GAAQoG,EAAKtE,MAAM8E,KAAK/H,IAAI,SAC5BoB,EAASmG,EAAKtE,MAAM8E,KAAK/H,IAAI,SACjCuH,GAAKtE,MAAM+E,YAAYT,EAAKtE,MAAMgF,OAAOpI,GAAGsB,EAAMC,GAClDmG,EAAKtE,MAAMiF,aAAaX,EAAKtE,MAAMgF,OAAOE,WJ+OlCX,EAKJF,EAAQvF,EAA2BwF,EAAOC,GAiF/C,MAnGArF,GAAUgF,EAAOC,GAqBjBtE,EAAaqE,IACX9D,IAAK,SACLzC,MAAO,WInPF,GACEwF,GAAUpC,KAAKf,MAAfmD,MAGFgC,EAAYhC,EAAMpG,IAAI,aAC1ByD,EAAAlE,QAAAuF,cAAAY,EAAAnG,SAAe8I,iBAAkB5E,EAAAlE,QAAAuF,cAAAa,EAAA2C,MAAMC,GAAA,WAAevE,KAAKf,MAAMgF,OAAOE,SAAjC,UAAmD/B,EAAMpG,IAAI,eACnGiH,MAAM,MAAOjE,OAAO,SAASkE,SAAS,EAAMhB,MAAOA,EAAMW,MAE1DpD,EAAAlE,QAAAuF,cAAAY,EAAAnG,SAAcyH,UAAA,EAASC,MAAM,MAAMC,SAAS,EAAMhB,MAAOA,EAAMW,MAI3D2B,EAAapC,EAAMpG,IAAI,cAC3ByD,EAAAlE,QAAAuF,cAAAY,EAAAnG,SAAc8I,iBAAkB5E,EAAAlE,QAAAuF,cAAAa,EAAA2C,MAAMC,GAAA,WAAevE,KAAKf,MAAMgF,OAAOE,SAAjC,UAAmD/B,EAAMpG,IAAI,gBAClGiH,MAAM,MAAOjE,OAAO,SAASkE,SAAS,IAFtBH,CAQnB,OACEtD,GAAAlE,QAAAuF,cAAA,OAAKC,UAAU,aACbtB,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,OACbtB,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,0CAA0CmB,OAAQA,EAAME,QACrE3C,EAAAlE,QAAAuF,cAAAiB,EAAAxG,SAAWgF,QAAS7E,KAAK,QACd+I,UAEIC,IAAItC,EAAMpG,IAAI,OACdN,KAAK,cAGTiJ,kBAEV/D,eAILnB,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,iBAAiBmB,OAAQA,EAAMM,MAC5C/C,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,uCACbtB,EAAAlE,QAAAuF,cAAA,QAAMoB,OAAQA,EAAMI,YAAaF,EAAMpG,IAAI,WAE7CyD,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,uCACbtB,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,cACbtB,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,2CACZqD,EACAI,MAKT/E,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,OACbtB,EAAAlE,QAAAuF,cAAA,OAAKC,UAAU,uCACXtB,EAAAlE,QAAAuF,cAAA,QAAMoB,OAAQA,EAAMS,aACnBP,EAAMpG,IAAI,qBJ0QfmH,GACP3D,EAAOyB,WIjQJ2D,EAAkB,SAACC,GACvB,OACIzC,MAAMyC,EAAMzC,MACZ0C,OAAOD,EAAMC,OACbf,KAAKc,EAAMd,OAIXgB,EAAqB,SAACjJ,GAC1B,OACEkI,YAAY,SAACnI,EAAGsB,EAAMC,GACpBtB,GAAS,EAAA8F,EAAA1E,gBAAerB,EAAGsB,EAAMC,KAEnC8G,aAAa,SAACrI,GACZC,GAAS,EAAA+F,EAAApF,iBAAgBZ,MJ2Q9BX,GAAQK,SIrQM,EAAAiG,EAAAwD,SACbJ,EACAG,IACA,EAAAxD,EAAAhG,SAAO4H,KJsQH8B,IACA,SAAShK,EAAQC,EAASC,GK9YhCD,EAAAD,EAAAC,QAAAC,EAAA,MAKAD,EAAAgK,MAAAjK,EAAAY,GAAA,wleAAmne,MLuZ7mesJ,IACA,SAASlK,EAAQC,EAASC,GM1ZhC,GAAAiK,GAAAjK,EAAA,IACA,iBAAAiK,SAAAnK,EAAAY,GAAAuJ,EAAA,KAEAjK,GAAA,KAAAiK,KACAA,GAAAC,SAAApK,EAAAC,QAAAkK,EAAAC,SNgbMC,IACA,SAASrK,EAAQC,EAASC,GOxbhCF,EAAAC,QAAAC,EAAAoK,EAAA,mCP8bMC,IACA,SAASvK,EAAQC,EAASC,GQ/bhC,GAAAsK,GAAAC,GASC,SAAAC,EAAAC,GACD,YAGA,iBAAA3K,IAAA,gBAAAA,GAAAC,QAEAD,EAAAC,QAAA0K,EAAAD,EAAAE,WAGAJ,KAAAC,EAAA,WAAgC,MAAAE,GAAAD,EAAAE,WAAkC3F,MAAAhF,EAAAuK,KAAAK,SAAAJ,IAAAzK,EAAAC,QAAAwK,MAKjE,mBAAAK,eAAA/F,KAAA,SAAA+F,EAAAF,GACD,YAgKA,SAAAG,KACA,GAIAC,GACAC,EACAC,EANAC,EAAAC,UAAAC,UACAC,EAAAF,UAAAG,QACAC,EAAA,GAAAC,WAAAL,UAAAM,YACAC,EAAAC,SAAAR,UAAAM,WAAA,IAIAG,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,CAwDA,OAtDAZ,WAAAM,WAAAO,QAAA,oBAAAb,UAAAM,WAAAO,QAAA,eAEAJ,GAAA,EACAP,EAAA,KACAE,EAAA,OACSP,EAAAE,EAAAc,QAAA,eAETJ,GAAA,EACAP,EAAA,KACAE,EAAAL,EAAAe,UAAAjB,EAAA,KACSA,EAAAE,EAAAc,QAAA,iBAETF,GAAA,EACAT,EAAA,SACAE,EAAAL,EAAAe,UAAAjB,EAAA,KACSA,EAAAE,EAAAc,QAAA,iBAETD,GAAA,EACAV,EAAA,SACAE,EAAAL,EAAAe,UAAAjB,EAAA,IACAA,EAAAE,EAAAc,QAAA,mBACAT,EAAAL,EAAAe,UAAAjB,EAAA,MAESA,EAAAE,EAAAc,QAAA,kBAETH,GAAA,EACAR,EAAA,UACAE,EAAAL,EAAAe,UAAAjB,EAAA,KACSD,EAAAG,EAAAgB,YAAA,SAAAlB,EAAAE,EAAAgB,YAAA,QAETb,EAAAH,EAAAe,UAAAlB,EAAAC,GACAO,EAAAL,EAAAe,UAAAjB,EAAA,GAEAK,EAAAc,gBAAAd,EAAAe,gBACAf,EAAAF,UAAAG,WAKAL,EAAAM,EAAAS,QAAA,aACAT,IAAAU,UAAA,EAAAhB,KAEAA,EAAAM,EAAAS,QAAA,aACAT,IAAAU,UAAA,EAAAhB,IAIAS,EAAAC,SAAA,GAAAJ,EAAA,IACAc,MAAAX,KACAH,EAAA,GAAAC,WAAAL,UAAAM,YACAC,EAAAC,SAAAR,UAAAM,WAAA,MAKAJ,OACAiB,QAAAZ,EACAE,OACAC,YACAC,WACAC,WACAQ,MAAA,sBAAAC,KAAArB,UAAAsB,UACAC,SAAA,iBAAAF,KAAArB,UAAAC,WACAuB,QAAA,gBAAAhC,GAAAiC,iBAOA,QAAAC,GAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAAE,KAEA,cAAAF,EAAAtM,KAEA,OAAAuM,GACA,0BAAAC,EAAAC,cAAAD,EAAAC,YAAA,oCAAkGC,QAAA,SAClG,0BAAAF,EAAAC,cAAAD,EAAAC,YAAA,8CAAiGC,QAAA,SACjG,0BAAAF,EAAAC,cAAAD,EAAAC,YAAA,8BAAiGC,QAAA,cAExF,cAAAJ,EAAAtM,KAET,OAAAuM,GACA,0BAAAC,EAAAC,cAAAD,EAAAC,YAAA,eAAkGC,QAAA,SAClG,0BAAAF,EAAAC,cAAAD,EAAAC,YAAA,8BAAiGC,QAAA,SACjG,0BAAAF,EAAAC,cAAAD,EAAAC,YAAA,yBAAiGC,QAAA,UAKjG,SAIA,QAAAC,GAAA9H,GACA,IAAAsF,EAAAyC,iBAAA,eAAA/H,EAAA,MAAApB,OAAA,CAIA,GAAAoJ,GAAA1C,EAAA/E,cAAA,SACAyH,GAAA7D,IAAAnE,CACA,IAAAiI,GAAA3C,EAAA4C,qBAAA,YACAD,GAAAE,WAAAC,aAAAJ,EAAAC,IAIA,QAAAI,GAAAC,EAAAC,GACA,MAAAnF,OAAArF,UAAA4I,SAAA2B,EAAA3B,QAAA4B,QAIA,QAAAC,GAAAC,EAAAC,EAAAb,GACA,MAAAY,GAAAZ,QAAA,GAAAc,QAAAD,EAAAb,QAAA,+BAAqE,aAAAA,GAIrE,QAAAe,GAAAC,EAAAC,GAEAD,EAAAjK,SACAiK,MAKA,QAAAlK,GAAAkK,EAAAjK,OAAA,EAAyCD,GAAA,EAAQA,IAAA,CACjD,GAAAoK,GAAApK,EAAA,EAAAmK,EAAAE,WAAA,GAAAF,EACAG,EAAAJ,EAAAlK,GAGAuK,EAAAD,EAAAd,WACAgB,EAAAF,EAAAG,WAeA,OAXAL,GAAAM,YAAAJ,GAKAE,EACAD,EAAAd,aAAAW,EAAAI,GAEAD,EAAAG,YAAAN,GAGAA,GAoBA,QAAAO,GAAAL,GACAA,GAGAA,EAAAd,WAAAoB,YAAAN,GAIA,QAAAO,GAAAN,EAAAD,GACAC,EAAAd,aAAAa,EAAAC,EAAAO,YAIA,QAAAC,GAAAT,EAAAU,GACA,OAAA7K,KAAA6K,GACAV,EAAAW,aAAA9K,EAAA+K,EAAAC,QAAAH,EAAA7K,KAAA6K,EAAA7K,GAAA,GAAA6K,EAAA7K,IAKA,QAAAiL,GAAA5O,EAAA+N,EAAAS,GAEA,GAAAV,GAAA3D,EAAA/E,cAAApF,EAGAuO,GAAAT,EAAAU,GAGAH,EAAAN,EAAAD,GAIA,QAAAe,GAAAC,GACA,MAAAA,GAAApC,QAAA,QAIA,QAAAqC,GAAAjB,EAAAzI,EAAA8D,GACA,GAAA2E,EACA,GAAAA,EAAAkB,UACAlB,EAAAkB,UAAA7F,EAAA,gBAAA9D,OACa,CACb,GAAAwF,IAAA,IAAAiD,EAAAzI,UAAA,KAAAqH,QAAA,YAAAA,QAAA,IAAArH,EAAA,OACAyI,GAAAzI,UAAAwF,GAAA1B,EAAA,IAAA9D,EAAA,KAMA,QAAA4J,GAAAnB,EAAAzI,GACA,QAAAyI,IACAA,EAAAkB,UACAlB,EAAAkB,UAAAE,SAAA7J,GAEA,GAAAmI,QAAA,UAAAnI,EAAA,WAAA2G,KAAA8B,EAAAzI,YAOA,QAAA8J,GAAArB,EAAAgB,GACA,GAAAjF,GAAAuF,QAAAxM,UAEAyM,EAAAxF,EAAAyF,SAAAzF,EAAA0F,uBAAA1F,EAAA2F,oBAAA3F,EAAA4F,mBAAA,SAAAC,GACA,SAAAlE,QAAAjJ,KAAA4H,EAAAyC,iBAAA8C,GAAApL,WAGA,OAAA+K,GAAA9M,KAAAuL,EAAAgB,GAIA,QAAAa,GAAA7B,EAAA8B,EAAAC,EAAAC,EAAAC,GACAC,EAAAlC,EAAA8B,EAAA,SAAAK,GACAJ,GACAA,EAAArL,MAAAsJ,GAAAmC,IAEAH,EAAAtL,MAAAsJ,GAAAmC,KACSF,GAIT,QAAAG,GAAApC,EAAAqC,EAAAC,EAAAC,EAAAN,GACA,GAAAO,GAAAH,EAAAI,MAAA,IASA,IALA7B,EAAAC,QAAAoB,KACAA,GAAA,GAIAjC,YAAA0C,UACA,OAAAC,GAAA,EAA2BA,EAAA3C,EAAArK,OAAoBgN,IAC/C3C,EAAA2C,YAAAC,OACAR,EAAApC,EAAA2C,GAAAhM,UAAA,GAAAA,UAAA,GAAAA,UAAA,QAOA,QAAAjB,GAAA,EAAuBA,EAAA8M,EAAA7M,OAAsBD,IAC7CsK,EAAAuC,EAAA,0CAAAC,EAAA9M,GAAA4M,EAAAL,GAKA,QAAAC,GAAAlC,EAAAqC,EAAAC,EAAAL,GACAjC,GACAoC,EAAApC,EAAAqC,EAAAC,GAAA,EAAAL,GAYA,QAAAY,GAAA7C,EAAA9N,EAAA4Q,EAAAC,GAEA,GAAA/C,GAAA9N,EAAA,CAKA0O,EAAAC,QAAAiC,KACAA,GAAA,EAIA,IAAAX,GAAA,GAAAa,aAAA9Q,GACA4Q,UACAG,OAAAF,GAIA/C,GAAAkD,cAAAf,IAKA,QAAAgB,GAAA3N,EAAA6F,GAEA,GAAA7F,EAUA,MALA6F,GAAAuF,EAAAC,QAAAxF,MAAA7F,EAAA4N,aAAA,gBAGA5N,EAAAmL,aAAA,eAAAtF,GAEAA,EAIA,QAAAgI,GAAAC,EAAAC,GACA,WAAAD,GAAA,IAAAC,GAAAxF,MAAAuF,IAAAvF,MAAAwF,GACA,GAEAD,EAAAC,EAAA,KAAAC,QAAA,GAMA,QAAAC,KAEA,GAAAC,GAAA/M,SAGA,IAAA+M,EAAA/N,OAAA,CAKA,OAAA+N,EAAA/N,OACA,MAAA+N,GAAA,EAQA,QAJAC,GAAAxJ,MAAArF,UAAA8O,MAAAnP,KAAAiP,GACA/N,EAAA+N,EAAA/N,OAGAD,EAAA,EAAuBA,EAAAC,EAAYD,IAAA,CACnC,GAAAqB,GAAA2M,EAAAhO,EAEA,QAAAmO,KAAA9M,GACAA,EAAA8M,IAAA9M,EAAA8M,GAAA7O,aAAA+B,EAAA8M,GAAA7O,cAAA9B,QACAyQ,EAAAE,GAAAF,EAAAE,OACAJ,EAAAE,EAAAE,GAAA9M,EAAA8M,KAEAF,EAAAE,GAAA9M,EAAA8M,GAKA,MAAAF,IAmCA,QAAAG,GAAAC,GACA,GAAAC,GAAA,iEACA,OAAAD,GAAAE,MAAAD,GAAAtE,OAAAwE,GAAAH,EAIA,QAAAI,GAAAJ,GACA,GAAAC,GAAA,iCACA,OAAAD,GAAAE,MAAAD,GAAAtE,OAAAwE,GAAAH,EAIA,QAAAK,KACA,GAAAC,IACAC,oBAAA,EACAC,aAAA,WAA0C,UAC1CC,kBAAA,aACAC,iBAAA,aACAC,oBAAA,GACA1E,QAAA,KACA2E,OAAA,IAEAC,EAAA,wBAAAnC,MAAA,IAGA,IAAA7B,EAAAtE,UAAAD,EAAAoI,kBAIA,OAAA/O,GAAA,EAAAmP,EAAAD,EAAAjP,OAAwDD,EAAAmP,EAAQnP,IAAA,CAGhE,GAFA2O,EAAAM,OAAAC,EAAAlP,IAEAkL,EAAAtE,UAAAD,EAAAgI,EAAAM,OAAA,sBACAN,EAAAC,oBAAA,CACA,OACiB,IAAA1D,EAAAtE,UAAAD,EAAAyI,mBAAAzI,EAAA0I,oBAAA,CAEjBV,EAAAM,OAAA,KACAN,EAAAC,oBAAA,CACA,YAbAD,GAAAC,oBAAA,CAmDA,OAhCAD,GAAAC,qBAGAD,EAAAK,oBAAA,OAAAL,EAAAM,OAAA,qBAAAN,EAAAM,OAAA,mBAEAN,EAAAE,aAAA,SAAAvE,GAIA,OAHAY,EAAAtE,UAAA0D,KACAA,EAAA3D,EAAA2I,MAEAxO,KAAAmO,QACA,OACA,MAAAtI,GAAA4I,oBAAAjF,CACA,WACA,MAAA3D,GAAA6I,uBAAAlF,CACA,SACA,MAAA3D,GAAA7F,KAAAmO,OAAA,uBAAA3E,IAGAqE,EAAAG,kBAAA,SAAAxE,GAIA,MAHAY,GAAAtE,UAAA0D,KACAA,EAAA3D,EAAA2I,MAEA,KAAAxO,KAAAmO,OAAA3E,EAAAwE,oBAAAxE,EAAAxJ,KAAAmO,QAAA,OAAAnO,KAAAmO,OAAA,6CAEAN,EAAAI,iBAAA,WACA,WAAAjO,KAAAmO,OAAAtI,EAAAoI,mBAAApI,EAAA7F,KAAAmO,QAAA,OAAAnO,KAAAmO,OAAA,yCAEAN,EAAArE,QAAA,WACA,WAAAxJ,KAAAmO,OAAAtI,EAAA4I,kBAAA5I,EAAA7F,KAAAmO,OAAA,uBAIAN,EAkCA,QAAAc,GAAAzG,EAAA0G,GAUA,QAAAC,GAAArF,EAAA9N,EAAA4Q,EAAAC,GACAF,EAAA7C,EAAA9N,EAAA4Q,EAAAW,KAAqDV,GACrDvE,KAAA8G,MAKA,QAAAC,GAAArT,EAAAgI,GACAkL,EAAAI,OAAAjJ,EAAA1I,UACAqG,EAAAC,MAAArF,UAAA2Q,MAAAhR,KAAAyF,GAEA0G,EAAApB,OAAA4F,EAAAM,YAAAN,EAAAM,UAAA/P,QACAuE,EAAAyL,QAAAP,EAAAM,WAGA7R,QAAA3B,GAAAwE,MAAA7C,QAAAqG,IAUA,QAAA0L,KACA,OACA7B,IAAAqB,EAAAS,QACAC,SAAA,IAAAV,EAAAS,QAAAnI,QAAA,SAAAc,GAAAuH,QAAAzI,MAKA,QAAA0I,KAEA,GAAAC,MACAJ,EAAAD,IACAM,GAAAL,EAAAC,SAAA,GAAAD,EAAA9B,KAAA,IAAAqB,EAAAe,UAkJA,OA/IA/G,GAAAgG,EAAAgB,SAAA,eACAH,EAAAvK,KACA,mEACA,yBAAAwK,EAAA,kBACA,+BAAAd,EAAAiB,KAAAC,KAAA,UACA,aAIAL,EAAAvK,KAAA,gCAGA0D,EAAAgG,EAAAgB,SAAA,YACAH,EAAAvK,KACA,6CACA,yBAAAwK,EAAA,qBACA,+BAAAd,EAAAiB,KAAAE,QAAA,UACA,aAKAnH,EAAAgG,EAAAgB,SAAA,WACAH,EAAAvK,KACA,4CACA,yBAAAwK,EAAA,oBACA,+BAAAd,EAAAiB,KAAAG,OAAA,UACA,aAMApH,EAAAgG,EAAAgB,SAAA,SACAH,EAAAvK,KACA,0CACA,yBAAAwK,EAAA,kBACA,+BAAAd,EAAAiB,KAAAC,KAAA,UACA,YACA,2CACA,yBAAAJ,EAAA,mBACA,+BAAAd,EAAAiB,KAAAI,MAAA,UACA,aAKArH,EAAAgG,EAAAgB,SAAA,iBACAH,EAAAvK,KACA,kDACA,yBAAAwK,EAAA,0BACA,+BAAAd,EAAAiB,KAAAK,QAAA,UACA,aAKAtH,EAAAgG,EAAAgB,SAAA,cAEAH,EAAAvK,KAAA,gCACA,2DACA,0HACA,+FACA,gEACA,mBAAA0J,EAAAiB,KAAAM,SACA,eAGAvB,EAAAwB,SAAAC,MACAZ,EAAAvK,KAAA,4CAIAuK,EAAAvK,KAAA,YAIA0D,EAAAgG,EAAAgB,SAAA,iBACAH,EAAAvK,KACA,4BACA,+BAAA0J,EAAAiB,KAAAS,YAAA,UACA,iDACA,WAKA1H,EAAAgG,EAAAgB,SAAA,aACAH,EAAAvK,KACA,4BACA,+BAAA0J,EAAAiB,KAAAU,SAAA,UACA,kDACA,WAKA3H,EAAAgG,EAAAgB,SAAA,SACAH,EAAAvK,KACA,0CACA,6CAAAwK,EAAA,mBACA,yBAAAA,EAAA,oBACA,+BAAAd,EAAAiB,KAAAW,WAAA,UACA,aAKA5H,EAAAgG,EAAAgB,SAAA,WACAH,EAAAvK,KACA,8BACA,iDAA+C0J,EAAAiB,KAAAY,OAAA,WAC/C,wEAA8C7B,EAAA8B,UAAA,UAAA9B,EAAA+B,UAAA,YAAA/B,EAAA6B,OAAA,wBAC9C,gDAAA7B,EAAA+B,UAAA,YAAA/B,EAAA8B,UAAA,oCACA,WAKA9H,EAAAgG,EAAAgB,SAAA,aACAH,EAAAvK,KACA,8CACA,mDAAAwK,EAAA,yBACA,yBAAAA,EAAA,0BACA,+BAAAd,EAAAiB,KAAAe,eAAA,UACA,aAKAhI,EAAAgG,EAAAgB,SAAA,eACAH,EAAAvK,KACA,gDACA,uDAAAwK,EAAA,6BACA,yBAAAA,EAAA,8BACA,+BAAAd,EAAAiB,KAAAgB,iBAAA,UACA,aAKApB,EAAAvK,KAAA;AAEAuK,EAAAqB,KAAA,IAIA,QAAAC,KACA,GAAA/I,GAAAgJ,UAAAC,OAIA,UAAAjJ,GAAAtM,MAAAkT,EAAAf,WAAAqD,aAAAtC,EAAAf,WAAAsD,QAAA,CAEA,GAAAC,GAAAvD,EAAAC,kBAEAsD,IAAAxC,EAAAf,WAAAwD,WAAAC,KACAC,IAAAH,EAAA,4CAGA3G,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA5D,WAAAsD,SAAA,IAEAI,GAAA,kDAIAvJ,GAAA0J,SAAA1J,GAAA0J,QAAA7D,YACAlB,EAAA3E,GAAA0J,QAAA7D,YAAA,GAIA8D,KAKA,QAAAC,KAEA,aAAA5J,GAAAtM,KAAA,CAKAmW,EAAAjD,EAAAkD,UAAAC,WACA/J,GAAAgK,eAAAC,mBAAA,4BAAA1H,EAAAqE,EAAAkD,UAAAC,UAAA,YAIA/J,GAAAkK,iBAAA,EACAlK,GAAAE,MAAAiK,aACAnK,GAAAkK,iBAAA,EAQA,QAHAE,GADAC,EAAA,GAEAC,EAAAtK,GAAAE,MAAAqK,WAEArT,EAAA,EAA2BA,EAAAoT,EAAAnT,OAAqBD,IAChD,UAAAoT,EAAApT,GAAAsT,SAAAnL,gBACA+K,EAAAE,EAAApT,GAAAkT,KACA,aAAAA,GAAA,cAAAA,IACAC,EAAAC,EAAApT,GAAA0N,aAAA,QAeA,IATA5E,GAAAyK,eAAA,EACA,KAAAJ,GACArK,GAAAyK,eAAA,EACAlB,GAAA,2BAEAA,GAAA,6BAA0Cc,GAI1CrK,GAAAyK,cAEa,CAIb,OADAC,GAAA1K,GAAAE,MAAAiK,WACAhG,EAAA,EAA+BA,EAAAuG,EAAAvT,OAAmBgN,IAClDuG,EAAAvG,GAAAwG,KAAA,QAoBA,IAhBAC,EAAA5K,KAIAA,GAAAuH,QAAAzI,MAAAkB,GAAAuH,QAAA/H,SAAA,IACAQ,GAAAuH,QAAAxI,WAAAiB,GAAAuH,QAAA/H,SAAA,MAGA+J,GAAA,wEAGAvJ,GAAAkK,iBAAA,GAKAlK,GAAAkK,gBAAA,CACAX,GAAA,uBAEA,QAAAsB,GAAA,EAAmCA,EAAAH,EAAAvT,OAAmB0T,IAAA,CACtD,GAAAC,GAAAJ,EAAAG,EAEA,cAAAC,EAAAV,MAAA,cAAAU,EAAAV,MACA1G,EAAAoH,EAAA,uBAEA9S,KAAA+S,WAAA,YAAA/S,MAAA+S,WAAA,GACAC,EAAAhT,KAAA+S,WAAA,GAAAE,gBAEAD,WAaA,IANAzB,GAAA,2DAGAvJ,GAAAkL,eAAA,GACAlL,GAAA+J,YAEA,KAAAM,EAAA,CAEA,GAAAc,GAAA,GAAAC,eAEAD,GAAAE,mBAAA,WACA,OAAAF,EAAAG,WACA,SAAAH,EAAA9W,OAAA,CACA,GACAkX,GADAxB,KAEAyB,EAAAL,EAAAM,aAIAC,EAAA,MACAF,GAAAtM,QAAAwM,YAEAA,EADAF,EAAAtM,QAAA,aACA,KAEA,MAIA6K,EAAAyB,EAAAvH,MAAAyH,IAEA,QAAAC,GAAA,EAAmDA,EAAA5B,EAAA5S,OAAqBwU,IAAA,CACxEJ,EAAAxB,EAAA4B,GACA3L,GAAA+J,SAAA4B,KAGA,IAAAC,GAAAL,EAAAtH,MAAAyH,GACAG,EAAA,CAGAD,GAAAC,GAAA3M,QAAA,YACA2M,EAAA,GAGA7L,GAAA+J,SAAA4B,IAAAC,EAAAC,GAAAD,EAAAC,EAAA,IAIA7L,GAAA+J,SAAA3E,QAEAmE,GAAA,qDAEAuC,IAAAlF,EAAAM,UAAA,0DAKAiE,EAAAY,KAAA,MAAA1B,GAAA,GAEAc,EAAAa,YAvGAvJ,GAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAM,SAAAZ,UA8GA,QAAA6B,GAAAO,GAEA,GAAA/B,GAAAK,EAAAjD,EAAAkD,UAAAC,UACA3M,EAAAS,EAAA/E,cAAA,OAGA0Q,GAAAyC,UAAA,GAGA7J,EAAAtE,UAAAyN,KACAA,EAAA,IAIAnJ,EAAApB,OAAAuK,GACAnO,EAAA6O,UAAAV,EAAAW,OAEA9O,EAAAwE,YAAA2J,GAIA/B,EAAA5H,YAAAxE,EAGAoM,GAAA2C,aAKA,QAAAC,GAAAC,GAEA,QAAAC,GAAAC,EAAAC,GACA,GAAAC,KACAA,GAAAF,EAAAtI,MAAA,QACA,QAAA/M,GAAA,EAA8BA,EAAAuV,EAAAtV,OAAmBD,IAGjDuV,EAAAvV,GAAAuV,EAAAvV,GAAAkJ,QAAA,4BAEA,OAAAsM,GAAAD,EAAAD,IAEA,QAAAG,GAAAJ,GACA,MAAAD,GAAAC,EAAA,GAEA,QAAAK,GAAAL,GACA,MAAAD,GAAAC,EAAA,GAEA,QAAAG,GAAAH,GACA,UAAAA,GAAAzO,SAAAyO,EACA,QAEA,IAEAM,GAFAC,KACAC,IAKA,OAHAD,GAAAP,EAAAtI,MAAA,KACA8I,EAAAD,EAAA,GAAA7I,MAAA,KACA4I,EAAAG,KAAAC,MAAA,GAAAF,EAAA,OAAAC,KAAAC,MAAA,GAAAF,EAAA,IAAAC,KAAAC,MAAAF,EAAA,IAMA,IAAA/M,GAAAkK,iBAAA,UAAAlK,GAAAtM,MAAAsM,GAAAgJ,UAAAC,OAKAjJ,GAAAkN,SAAA,EAKAb,EAAAjK,EAAA+K,OAAAd,KAAArM,GAAAE,MAAAoI,YAGAtI,GAAA+J,SAAA/J,GAAAkN,WAAA,CAIA,KAAAN,EAAA5M,GAAA+J,SAAA/J,GAAAkN,UAAA,IAAAb,EAAArH,QAAA,IAEA,GADAhF,GAAAkN,WACAlN,GAAAkN,SAAAlN,GAAA+J,SAAA5S,OAAA,GACA6I,GAAAkN,SAAAlN,GAAA+J,SAAA5S,OAAA,CACA,OAKA6I,GAAAE,MAAAoI,YAAAtD,QAAA,IAAA2H,EAAA3M,GAAA+J,SAAA/J,GAAAkN,UAAA,KACAlN,GAAAE,MAAAoI,YAAAtD,QAAA,IAAA4H,EAAA5M,GAAA+J,SAAA/J,GAAAkN,UAAA,KACAlN,GAAAkL,eAAAlL,GAAA+J,SAAA/J,GAAAkN,UAAA,GAGAlC,EAAAhL,GAAAkL,iBAEAF,KAKA,QAAAJ,KAEA,GAAA5K,GAAA0J,QAAAK,SAAA,CAIAtH,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAM,SAAAZ,SAAA,EAGA,IAAAiE,GAAApN,GAAAqN,QAAAC,eAGAlL,GAAAC,QAAA+K,KACAA,EAAAxG,EAAAmD,SAAAwD,eAGAH,IACA3K,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAM,SAAAqD,QAAA,GACAzI,EAAA3E,GAAA0J,QAAAK,UAAA,KAKA,QAAAyD,GAAAhL,GACA,MAAAxC,IAAAwJ,UAAAlJ,iBAAAkC,GAIA,QAAAqH,GAAArH,GACA,MAAAgL,GAAAhL,GAAA,GAIA,QAAA8G,KACA,IACA,MAAAvL,GAAA/H,OAAA+H,EAAA0P,IAEA,MAAAC,GACA,UAKA,QAAA/D,KAKA,QAAAgE,GAAAhK,GAEA,IAAAA,EAAAiK,OAAA5N,GAAA6N,eACAlK,EAAA3M,SAAA8W,GAAAnK,EAAAoK,SAIqBpK,EAAA3M,SAAAgX,GAAArK,EAAAoK,WAErBpK,EAAAsK,iBACAH,EAAAI,UALAvK,EAAAsK,iBACAD,EAAAE,UAVA,GAAAC,GAAAX,EAAA,iDACAQ,EAAAG,EAAA,GACAL,EAAAK,IAAAhX,OAAA,EAkBAuM,GAAA1D,GAAAwJ,UAAA,UAAAmE,GAIA,QAAAS,GAAA1a,EAAAwO,GACA,GAAAE,EAAApB,OAAAkB,GACAI,EAAA5O,EAAAsM,GAAAE,OAAiDxD,IAAAwF,QACpC,IAAAA,EAAA1L,cAAAmF,MACb,OAAAzE,GAAAgL,EAAA/K,OAAA,EAAmDD,GAAA,EAAQA,IAC3DoL,EAAA5O,EAAAsM,GAAAE,MAAAgC,EAAAhL,IAMA,QAAAmX,KAEA,GAAAzH,EAAA0H,WAAA,CACA,GAAAjH,GAAAD,GAGAC,GAAAC,UACAiC,GAAA,oCAAAvJ,GAAAuH,QAAAzI,KAAA,oBACAwP,EAAAjH,EAAA9B,IAAA,gBAEAgE,GAAA,qDAKA,GAAA9B,GAAAb,EAAAa,IAGA8B,IAAA,6BAGA9B,IACAA,EAAAD,KAIAC,EAAA1G,EAAA0G,EAAA,aAAgDb,EAAA2H,UAGhD9G,EAAA1G,EAAA0G,EAAA,OAA0CuF,KAAAC,MAAA,IAAAD,KAAAwB,UAG1C,IAAAxX,EAgBA,IAbAoL,EAAApB,OAAA4F,EAAAkD,UAAAlC,SAAA4B,aACAxS,EAAA6G,EAAA4Q,cAAA7H,EAAAkD,UAAAlC,SAAA4B,YAIApH,EAAAsM,YAAA1X,KACAA,EAAAgJ,GAAAwJ,WAIAxS,EAAAiT,mBAAA,YAAAxC,GAGAb,EAAAwB,SAAAR,SAGA,OAFA+G,GAAAnB,GAAA5G,EAAAkD,UAAAlC,SAAAvG,QAAA,IAAAuF,EAAAkD,UAAA6E,OAAA,KAAA/H,EAAA6C,QAAAmF,QAAA9F,KAAA,KAEA5R,EAAAyX,EAAAxX,OAAA,EAA+CD,GAAA,EAAQA,IAAA,CACvD,GAAA+D,GAAA0T,EAAAzX,EAEAuL,GAAAxH,EAAA2L,EAAA6C,QAAAmF,QAAA,GACAnM,EAAAxH,EAAA2L,EAAA6C,QAAAoF,SAAA,IAMA,QAAAC,KACA,IA0CA,MAzCA9O,IAAA4H,SAAAiC,EAAAjD,EAAAkD,UAAAlC,SAAAvG,SAGArB,GAAA0J,WACA1J,GAAA0J,QAAArB,KAAAwB,EAAAjD,EAAAkD,UAAAJ,QAAArB,MACArI,GAAA0J,QAAA5B,KAAA0F,EAAA5G,EAAAkD,UAAAJ,QAAA5B,MACA9H,GAAA0J,QAAAzB,MAAA4B,EAAAjD,EAAAkD,UAAAJ,QAAAzB,OACAjI,GAAA0J,QAAA3B,QAAA8B,EAAAjD,EAAAkD,UAAAJ,QAAA3B,SACA/H,GAAA0J,QAAA1B,OAAA6B,EAAAjD,EAAAkD,UAAAJ,QAAA1B,QACAhI,GAAA0J,QAAAxB,QAAA2B,EAAAjD,EAAAkD,UAAAJ,QAAAxB,SACAlI,GAAA0J,QAAA7D,WAAAgE,EAAAjD,EAAAkD,UAAAJ,QAAA7D,YAGA7F,GAAA0J,QAAAqF,KAAAlF,EAAAjD,EAAAkD,UAAAJ,QAAAqF,MACA/O,GAAA0J,QAAAK,SAAAF,EAAAjD,EAAAkD,UAAAJ,QAAAK,UAGA/J,GAAAgP,YACAhP,GAAAgP,SAAAxF,UAAAK,EAAAjD,EAAAkD,UAAAkF,SAAAxF,WAGAxJ,GAAAgP,SAAAC,UACAjP,GAAAgP,SAAAC,OAAAC,IAAArF,EAAAjD,EAAAkD,UAAAkF,SAAAC,QACAjP,GAAAgP,SAAAC,OAAAE,KAAAnP,GAAAgP,SAAAC,OAAAC,KAAAlP,GAAAgP,SAAAC,OAAAC,IAAAzO,qBAAA,WAGAT,GAAAgP,SAAAI,OAAAvF,EAAAjD,EAAAkD,UAAAkF,SAAAI,QAGApP,GAAAgP,SAAAH,QAAA7O,GAAAgP,SAAAxF,WAAAxJ,GAAAgP,SAAAxF,UAAAiF,cAAA,IAAA7H,EAAA6C,QAAAoF,SAGA7O,GAAAyI,UACAzI,GAAAyI,OAAA4G,MAAAxF,EAAAjD,EAAAkD,UAAArB,OAAA4G,OACArP,GAAAyI,OAAA6G,QAAAzF,EAAAjD,EAAAkD,UAAArB,OAAA6G,SAGAtP,GAAAuI,SAAAsB,EAAAjD,EAAAkD,UAAAvB,UACAvI,GAAAsI,YAAAuB,EAAAjD,EAAAkD,UAAAxB,aACAtI,GAAAuO,SAAAf,EAAA5G,EAAAkD,UAAAyE,WAEA,EAEA,MAAAb,GAMA,MALA5B,IAAA,4DAGAyD,GAAA,IAEA,GAKA,QAAAC,KACA/M,EAAAzC,GAAAwJ,UAAA5C,EAAAkD,UAAAN,UAAApJ,QAAA,QAAAJ,GAAAgJ,UAAAC,MAIA,QAAAsG,GAAAxL,GACAA,GAAAnD,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,MACAsM,GAAAE,MAAAiC,aAAA,eAEAnC,GAAAE,MAAAyP,gBAAA,YAKA,QAAAC,GAAAC,GAEA,GAAA5U,GAAA2L,EAAAiB,KAAAC,IAWA,IARA1F,EAAApB,OAAA4F,EAAAkJ,QAAAlJ,EAAAkJ,MAAA3Y,SACA8D,GAAA,KAAA2L,EAAAkJ,MAGA9P,GAAAwJ,UAAArH,aAAA,aAAAyE,EAAAkJ,QAIA9P,GAAAgJ,UAAAC,MAAAjJ,GAAA0J,QAAA5B,KACA,OAAA5Q,GAAA8I,GAAA0J,QAAA5B,KAAA3Q,OAAA,EAA0DD,GAAA,EAAQA,IAClE8I,GAAA0J,QAAA5B,KAAA5Q,GAAAiL,aAAA,aAAAlH,EAMAmH,GAAAsM,YAAAmB,IACAA,EAAA1N,aAAA,QAAAyE,EAAAiB,KAAAkI,WAAA3P,QAAA,UAAoFwG,EAAAkJ,QAKpF,QAAAE,MACA,GAAApb,GAAA,IACAoL,IAAAqN,WAGA4C,EAAAjH,WAAApC,EAAAyG,QAAAlE,UAMApL,EAAAmS,aAAAC,WAAA,eAGAvb,EAAAmJ,EAAAmS,aAAAE,QAAAxJ,EAAAyG,QAAAhW,KAEAzC,IAGa,gBAAA8K,KAAA9K,GAIbyb,IAAgC5H,OAAA/J,WAAA9J,KAGhCoL,GAAAqN,QAAAiD,KAAAC,MAAA3b,KAKA,QAAAyb,IAAAzb,GAEAqb,EAAAjH,WAAApC,EAAAyG,QAAAlE,UAKAlE,EAAAjF,GAAAqN,QAAAzY,GAGAmJ,EAAAmS,aAAAM,QAAA5J,EAAAyG,QAAAhW,IAAAiZ,KAAAG,UAAAzQ,GAAAqN,WAIA,QAAAqD,MAEA,IAAA1Q,GAAAE,MAEA,WADA4L,IAAA,0BAIA,IAAA9L,GAAAgJ,UAAAC,OAEAxG,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA/V,KAAA0M,QAAA,MAA6EJ,GAAAtM,OAAA,GAI7EkN,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,OACA+O,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA/V,KAAA0M,QAAA,MAAiF,aAIjFqC,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAmH,QAAAhK,EAAAiK,UAGApO,EAAAzC,GAAA8Q,SAAAlK,EAAA6C,QAAAhK,MAAAO,GAAAuH,QAAA9H,OAGAgD,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA5J,QAAAG,GAAAuH,QAAA1H,SAGA,UAAAG,GAAAtM,MAAA,CAEA,GAAA2N,GAAAxD,EAAA/E,cAAA,MACAuI,GAAAc,aAAA,QAAAyE,EAAA6C,QAAAsH,cAGA5P,EAAAnB,GAAAE,MAAAmB,GAGArB,GAAAgK,eAAA3I,EAKAT,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,OACAsd,KAKA,QAAAA,MACA,GACAC,GADAzH,EAAA3L,EAAA/E,cAAA,OAEAjF,EAAAmM,GAAAtM,KAAA,IAAAsZ,KAAAC,MAAA,IAAAD,KAAAwB,SAGA,QAAAxO,GAAAtM,MACA,cACAud,EAAA3L,EAAAtF,GAAAkR,QACA,MAEA,aACAD,EAAAtL,EAAA3F,GAAAkR,QACA,MAEA,SACAD,EAAAjR,GAAAkR,QAKA,OADAC,GAAA3D,EAAA,SAAAxN,GAAAtM,KAAA,OACAwD,EAAAia,EAAAha,OAAA,EAA+CD,GAAA,EAAQA,IACvD2K,EAAAsP,EAAAja,GAOA,IAHAuL,EAAAzC,GAAAE,MAAA0G,EAAA6C,QAAAsH,cAAA,GACAtO,EAAAzC,GAAAE,MAAA0G,EAAA6C,QAAA2H,cAAA,GAEA,YAAApR,GAAAtM,KAEAsM,GAAAE,MAAA0B,YAAA4H,GAGAA,EAAArH,aAAA,KAAAtO,GAGAuO,EAAAhJ,OAAA2E,EAAAsT,IACAC,GAAAL,EAAAzH,IAGAnJ,EAAAuG,EAAA2K,KAAAC,QAAA1K,KAGA/I,EAAA0T,wBAAA1T,EAAA0T,4BAGA1T,EAAA0T,wBAAAvU,KAAA,WAAoEoU,GAAAL,EAAAzH,KAGpEzL,EAAA2T,wBAAA,WACA3T,EAAA0T,wBAAAE,QAAA,SAAA7N,GAAmFA,YAGtE,cAAA9D,GAAAtM,KAYb,GAVAsM,GAAAgJ,UAAAC,KACAjJ,GAAAE,MAAA0B,YAAA4H,GAEAA,EAAAxJ,GAAAE,MAIAsJ,EAAArH,aAAA,KAAAtO,GAGAuO,EAAAhJ,OAAA2E,EAAA6T,OAWAC,GAAAZ,EAAAzH,OAXA,CACAnJ,EAAAuG,EAAA2K,KAAAO,MAAAhL,IAGA,IAAAiL,GAAAhU,EAAAiU,YAAA,WACA5P,EAAAhJ,OAAA2E,EAAA6T,SACA7T,EAAAkU,cAAAF,GACAF,GAAAZ,EAAAzH,KAEqB,QAIR,mBAAAxJ,GAAAtM,KAAA,CAGb,GAAAwe,GAAArU,EAAA/E,cAAA,SAGAoZ,GAAAC,QAAA,EACAzO,EAAAwO,EAAA,kBAAoDA,EAAAC,QAAA,IAEpDlQ,EAAAiQ,GACAxV,IAAA,0EAAAuU,EACApd,OAGA2V,EAAA5H,YAAAsQ,GACAlS,GAAAE,MAAA0B,YAAA4H,GAGAzL,EAAAqU,IACA/R,EAAAuG,EAAA2K,KAAAc,WAAAvL,IAIA,IAAAwL,GAAAvU,EAAAiU,YAAA,WACAjU,EAAAqU,IAAAF,EAAAC,SACApU,EAAAkU,cAAAK,GACAC,GAAAtc,KAAAic,KAEiB,KAKjB,QAAAM,MAEAxS,GAAAgJ,UAAAC,OACAwJ,KACAC,MAIA9C,EAAA/F,EAAA,WAIA,QAAAyH,IAAAqB,EAAAnJ,GAGAxJ,GAAA2Q,MAAA,GAAA5S,GAAAsT,GAAAuB,OAAApJ,EAAA3V,IACA8e,UACAE,YACAhC,SAAAjK,EAAAiK,SAAA,IACAjJ,SAAA5H,GAAAgJ,UAAAC,KAAA,IACA6J,IAAA,EACAC,SAAA,EACAC,eAAA,EACAC,eAAArM,EAAAmD,SAAAwD,cAAA,IACA2F,aAAA,KACAC,MAAA,cACAC,eAAA,EACAC,UAAA,EACAC,OAAA,KAEAzP,QACA0P,QAAA,SAAA5P,GACAkD,EAAA7G,GAAAwJ,UAAA,YACAjV,KAAAoP,EAAAlQ,KACAkd,MAAAhN,EAAA3M,UAGAwc,QAAA,SAAA7P,GAEA,GAAA/N,GAAA+N,EAAA3M,MAGAgJ,IAAAE,MAAA4H,KAAA,WACAlS,EAAA6d,YACAzT,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAA+H,MAAA,WACArS,EAAA+d,aACA3T,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAA0T,KAAA,WACAhe,EAAAie,YACA7T,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAAqI,SAAA3S,EAAAke,cACA9T,GAAAE,MAAAwT,QAAA,EACA1T,GAAAE,MAAAoI,YAAA,EACAtI,GAAAE,MAAA6T,MAAAne,EAAAoe,UAGApN,EAAAkJ,MAAAla,EAAAqe,eAAAnE,MAGA9P,GAAAgJ,UAAAC,MACAjJ,GAAAE,MAAAuO,cAAA,UAAAtM,aAAA,iBAIAqQ,KAGA3L,EAAA7G,GAAAE,MAAA,cAGA2G,EAAA7G,GAAAE,MAAA,kBAGAnC,EAAAkU,cAAAiC,GAAAC,WAGAD,GAAAC,UAAApW,EAAAiU,YAAA,WAEAhS,GAAAE,MAAAiI,SAAAvS,EAAAwe,0BAGA,OAAApU,GAAAE,MAAAmU,cAAArU,GAAAE,MAAAmU,aAAArU,GAAAE,MAAAiI,WACAtB,EAAA7G,GAAAE,MAAA,YAIAF,GAAAE,MAAAmU,aAAArU,GAAAE,MAAAiI,SAGA,IAAAnI,GAAAE,MAAAiI,WACApK,EAAAkU,cAAAiC,GAAAC,WAGAtN,EAAA7G,GAAAE,MAAA,oBAEyB,MAEzBoU,cAAA,SAAA3Q,GAEA,GAAA/N,GAAA+N,EAAA3M,MAYA,QATA+G,EAAAkU,cAAAiC,GAAAK,SASA5Q,EAAAlQ,MACA,OACAuM,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,QACA,MAEA,QACAF,GAAAE,MAAAwT,QAAA,EAGA1T,GAAAE,MAAAsU,SACA3N,EAAA7G,GAAAE,MAAA,UAGAF,GAAAE,MAAAsU,SAAA,EACA3N,EAAA7G,GAAAE,MAAA,QACA2G,EAAA7G,GAAAE,MAAA,WAGAgU,GAAAK,QAAAxW,EAAAiU,YAAA,WAEAhS,GAAAE,MAAAoI,YAAA1S,EAAA6e,iBAGA5N,EAAA7G,GAAAE,MAAA,eACiC,KAKjCF,GAAAE,MAAAqI,WAAA3S,EAAAke,gBACA9T,GAAAE,MAAAqI,SAAA3S,EAAAke,cACAjN,EAAA7G,GAAAE,MAAA,kBAGA,MAEA,QACAF,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,SAIA2G,EAAA7G,GAAAwJ,UAAA,kBACAjV,KAAAoP,EAAAlQ,WAQA,QAAAoe,IAAAZ,EAAAzH,GAGAxJ,GAAA2Q,MAAA,GAAA5S,GAAA6T,MAAAgB,OAAApJ,GACA3V,GAAAgL,SAAAoS,GACAyD,KAAA9N,EAAA8N,KACA7D,SAAAjK,EAAAiK,SACA8D,QAAA,EACAC,UAAA,EACA9E,OAAA,IAIA9P,GAAAE,MAAA4H,KAAA,WACA9H,GAAA2Q,MAAA7I,OACA9H,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAA+H,MAAA,WACAjI,GAAA2Q,MAAA1I,QACAjI,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAA0T,KAAA,WACA5T,GAAA2Q,MAAAiD,OACA5T,GAAAE,MAAAwT,QAAA,GAGA1T,GAAAE,MAAAwT,QAAA,EACA1T,GAAAE,MAAAoI,YAAA,EAGAkK,KAEAxS,GAAA2Q,MAAA8D,iBAAAtgB,KAAA,SAAAS,GACAoL,GAAAE,MAAAoI,YAAA1T,EAGAiS,EAAA7G,GAAAE,MAAA,gBAGAF,GAAA2Q,MAAAmD,cAAA3f,KAAA,SAAAS,GACAoL,GAAAE,MAAAqI,SAAA3T,EAGAiS,EAAA7G,GAAAE,MAAA,oBAQAF,GAAA2Q,MAAAkE,GAAA,oBAGAzS,EAAAsM,YAAA1O,GAAA2Q,MAAAnP,UAAAxB,GAAAgJ,UAAAC,MACAjJ,GAAA2Q,MAAAnP,QAAAW,aAAA,mBAIAnC,GAAA2Q,MAAAkE,GAAA,kBACA7U,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,QACA2G,EAAA7G,GAAAE,MAAA,aAGAF,GAAA2Q,MAAAkE,GAAA,mBACA7U,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,WAGAF,GAAA2Q,MAAAkE,GAAA,sBAAAphB,GACAuM,GAAAE,MAAAsU,SAAA,EACAxU,GAAAE,MAAAoI,YAAA7U,EAAAoZ,QACAhG,EAAA7G,GAAAE,MAAA,gBAGAF,GAAA2Q,MAAAkE,GAAA,oBAAAphB,GACAuM,GAAAE,MAAAiI,SAAA1U,EAAAqhB,QACAjO,EAAA7G,GAAAE,MAAA,YAEA,IAAArB,SAAApL,EAAAqhB,UAEAjO,EAAA7G,GAAAE,MAAA,oBAIAF,GAAA2Q,MAAAkE,GAAA,oBACA7U,GAAAE,MAAAsU,SAAA,EACA3N,EAAA7G,GAAAE,MAAA,UACA2G,EAAA7G,GAAAE,MAAA,UAGAF,GAAA2Q,MAAAkE,GAAA,mBACA7U,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,WAKA,QAAAqS,MAEAvS,GAAA2Q,MAAA5S,EAAAqU,GAAA2C,OAAA/c,MAGAgI,GAAA2Q,MAAAqE,KAAAjX,EAAAqU,GAAA2C,OAAAE,OAAAC,MAAA,WAEAlV,GAAAE,MAAA4H,KAAA,WACA9H,GAAA2Q,MAAA7I,OACA9H,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAA+H,MAAA,WACAjI,GAAA2Q,MAAA1I,QACAjI,GAAAE,MAAAwT,QAAA,GAEA1T,GAAAE,MAAA0T,KAAA,WACA5T,GAAA2Q,MAAAwE,OAAA,GACAnV,GAAA2Q,MAAA1I,QACAjI,GAAAE,MAAAwT,QAAA,GAGA1T,GAAAE,MAAAwT,QAAA,EACA1T,GAAAE,MAAAoI,YAAA,EAEAtI,GAAA2Q,MAAAmD,YAAA,SAAAlf,GACAoL,GAAAE,MAAAqI,SAAA3T,EAAA,IAGA4d,OAGAxS,GAAA2Q,MAAAyE,YAAA,SAAAxgB,GACAoL,GAAAE,MAAAoI,YAAA1T,EAGAiS,EAAA7G,GAAAE,MAAA,gBAGAF,GAAA2Q,MAAAqE,KAAAjX,EAAAqU,GAAA2C,OAAAE,OAAAI,KAAA,WACArV,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,QACA2G,EAAA7G,GAAAE,MAAA,aAGAF,GAAA2Q,MAAAqE,KAAAjX,EAAAqU,GAAA2C,OAAAE,OAAAK,MAAA,WACAtV,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,WAGAF,GAAA2Q,MAAAqE,KAAAjX,EAAAqU,GAAA2C,OAAAE,OAAAM,cAAA,SAAA9hB,GACAuM,GAAAE,MAAAsU,SAAA,EACAxU,GAAAE,MAAAoI,YAAA7U,EAAA+hB,gBAAA,IACA3O,EAAA7G,GAAAE,MAAA,gBAGAF,GAAA2Q,MAAAqE,KAAAjX,EAAAqU,GAAA2C,OAAAE,OAAAQ,cAAA,SAAAhiB,GACAuM,GAAAE,MAAAiI,SAAA1U,EAAAiiB,aACA7O,EAAA7G,GAAAE,MAAA,YAEA,IAAArB,SAAApL,EAAAiiB,eAEA7O,EAAA7G,GAAAE,MAAA,oBAIAF,GAAA2Q,MAAAqE,KAAAjX,EAAAqU,GAAA2C,OAAAE,OAAAU,OAAA,WACA3V,GAAAE,MAAAwT,QAAA,EACA7M,EAAA7G,GAAAE,MAAA,aAMA,QAAA0V,MACA,QAAA5V,IAAAE,OACAF,GAAAE,MAAA4H,OAKA,QAAA+N,MACA,SAAA7V,IAAAE,OACAF,GAAAE,MAAA+H,QAKA,QAAA6N,IAAA/R,GAYA,MAVA3B,GAAAC,QAAA0B,KACAA,EAAA/D,GAAAE,MAAAwT,QAGA3P,EACA6R,KAEAC,KAGA9R,EAIA,QAAAgS,IAAAxH,GAEAnM,EAAA+K,OAAAoB,KACAA,EAAA3H,EAAA2H,UAEAyH,GAAAhW,GAAAE,MAAAoI,YAAAiG,GAIA,QAAA0H,IAAA1H,GAEAnM,EAAA+K,OAAAoB,KACAA,EAAA3H,EAAA2H,UAEAyH,GAAAhW,GAAAE,MAAAoI,YAAAiG,GAKA,QAAAyH,IAAA3G,GACA,GAAA6G,GAAA,EACAxC,EAAA1T,GAAAE,MAAAwT,OACAnL,EAAA4N,IAEA/T,GAAA+K,OAAAkC,GACA6G,EAAA7G,EACajN,EAAAhJ,OAAAiW,IAAAzO,GAAA,kBAAAyO,EAAA3b,QAGbwiB,EAAA7G,EAAArY,OAAApC,MAAAya,EAAArY,OAAA+N,IAAAwD,GAIA2N,EAAA,EACAA,EAAA,EACaA,EAAA3N,IACb2N,EAAA3N,GAIA6N,GAAAF,EAIA,KACAlW,GAAAE,MAAAoI,YAAA4N,EAAAlR,QAAA,GAEA,MAAA0I,IAGA,GAAA9M,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,MAAA,CACA,OAAAsM,GAAAtM,MACA,cACAsM,GAAA2Q,MAAAwE,OAAAe,EACA,MAEA,aAEAlW,GAAA2Q,MAAA0F,eAAAH,EAAAlR,QAAA,GACA,MAEA,kBACAhF,GAAA2Q,MAAAwE,OAAA,IAAAe,GAIAxC,GACAmC,KAIAhP,EAAA7G,GAAAE,MAAA,cAGAF,GAAAE,MAAAsU,SAAA,EAGA3N,EAAA7G,GAAAE,MAAA,WAIAqJ,GAAA,cAAAvJ,GAAAE,MAAAoI,YAAA,YAGA8D,EAAA8J,GAIA,QAAAC,MAEA,GAAA5N,GAAA1J,SAAA+H,EAAA2B,UAGA+N,EAAA,CAQA,OALA,QAAAtW,GAAAE,MAAAqI,UAAAhJ,MAAAS,GAAAE,MAAAqI,YACA+N,EAAAtW,GAAAE,MAAAqI,UAIAhJ,MAAAgJ,GAAA+N,EAAA/N,EAIA,QAAAgO,MACA9T,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA8K,SAAAvU,GAAAE,MAAAwT,QAEAjR,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAmH,QAAA5Q,GAAAE,MAAAwT,QAEA8C,GAAAxW,GAAAE,MAAAwT,QAIA,QAAA+C,MACAC,GACAvS,EAAApG,EAAA4Y,aAAA,EACA9L,EAAA9M,EAAA6Y,aAAA,GAKA,QAAAC,MACA9Y,EAAA+Y,SAAAJ,EAAAvS,EAAAuS,EAAA7L,GAIA,QAAAkM,IAAApT,GAEA,GAAAyF,GAAAvD,EAAAC,kBAEA,IAAAsD,EAAA,CAEA,IAAAzF,KAAAjQ,OAAAmS,EAAAK,oBAkBA,MAdAL,GAAAE,aAAA/F,GAAAwJ,WAQA3D,EAAAI,oBANAwQ,KAGA5Q,EAAAG,kBAAAhG,GAAAwJ,iBAOAxJ,GAAA6N,aAAAhI,EAAAE,aAAA/F,GAAAwJ,WAfAxJ,IAAA6N,aAAAhI,EAAAE,aAAA/F,GAAAwJ,eAqBAxJ,IAAA6N,cAAA7N,GAAA6N,aAGAhQ,EAAA2I,KAAAtM,MAAA8c,SAAAhX,GAAA6N,aAAA,WAIApL,GAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA5D,WAAAuH,OAAApN,GAAA6N,cAGAlE,EAAA3J,GAAA6N,cAGA7N,GAAA0J,SAAA1J,GAAA0J,QAAA7D,YACAlB,EAAA3E,GAAA0J,QAAA7D,WAAA7F,GAAA6N,cAIAhH,EAAA7G,GAAAwJ,UAAAxJ,GAAA6N,aAAA,wCAGA7N,GAAA6N,cAAAzE,GACAyN,KAKA,QAAAI,IAAAlD,GAkBA,GAhBA3R,EAAAC,QAAA0R,KACAA,GAAA/T,GAAAE,MAAA6T,OAIApP,EAAA3E,GAAA0J,QAAAqF,KAAAgF,GAGA/T,GAAAE,MAAA6T,QAGA,IAAA/T,GAAAE,MAAAuI,QACAyO,GAAAtQ,EAAA6B,QAIA7H,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,MAAA,CAEA,OAAAsM,GAAAtM,MACA,cACAsM,GAAA2Q,MAAA3Q,GAAAE,MAAA6T,MAAA,kBACA,MAEA,aACA,iBACA/T,GAAA2Q,MAAAwG,UAAAnX,GAAAE,MAAA6T,MAAA,EAAArV,WAAAkI,EAAA6B,OAAA7B,EAAA+B,YAKA9B,EAAA7G,GAAAE,MAAA,iBAKA,QAAAgX,IAAAzO,GACA,GAAA1D,GAAA6B,EAAA+B,UACAyO,EAAAxQ,EAAA8B,SA8BA,IA3BAtG,EAAAtE,UAAA2K,KACAA,EAAAzI,GAAAqN,QAAA5E,SAIA,OAAAA,GAAAlJ,MAAAkJ,MACAA,EAAA7B,EAAA6B,QAIAA,EAAA1D,IACA0D,EAAA1D,GAGA0D,EAAA2O,IACA3O,EAAA2O,GAIApX,GAAAE,MAAAuI,OAAA/J,WAAA+J,EAAA1D,GAGA/E,GAAAyI,OAAA6G,UACAtP,GAAAyI,OAAA6G,QAAA1a,MAAA6T,GAIA7H,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,MAAA,CACA,OAAAsM,GAAAtM,MACA,cACAsM,GAAA2Q,MAAAwG,UAAA,IAAAnX,GAAAE,MAAAuI,OACA,MAEA,aACA,iBACAzI,GAAA2Q,MAAAwG,UAAAnX,GAAAE,MAAAuI,QAKA5B,EAAA7G,GAAAE,MAAA,gBAIA,IAAAuI,EACAzI,GAAAE,MAAA6T,OAAA,EACa/T,GAAAE,MAAA6T,OAAAtL,EAAA,GACbwO,KAKA,QAAAI,IAAAC,GACA,GAAA7O,GAAAzI,GAAAE,MAAA6T,MAAA,EAAA/T,GAAAE,MAAAuI,OAAA7B,EAAA+B,SAEAvG,GAAA+K,OAAAmK,KACAA,EAAA1Q,EAAA2Q,YAGAL,GAAAzO,EAAA6O,GAIA,QAAAE,IAAAF,GACA,GAAA7O,GAAAzI,GAAAE,MAAA6T,MAAA,EAAA/T,GAAAE,MAAAuI,OAAA7B,EAAA+B,SAEAvG,GAAA+K,OAAAmK,KACAA,EAAA1Q,EAAA2Q,YAGAL,GAAAzO,EAAA6O,GAIA,QAAAG,MAEA,GAAAhP,GAAAzI,GAAAE,MAAA6T,MAAA,EAAA/T,GAAAE,MAAAuI,OAAA7B,EAAA+B,SAGA3I,IAAAgJ,UAAAC,OACAjJ,GAAAyI,OAAA4G,QACArP,GAAAyI,OAAA4G,MAAAza,MAAA6T,GAEAzI,GAAAyI,OAAA6G,UACAtP,GAAAyI,OAAA6G,QAAA1a,MAAA6T,IAKA4H,IAA4B5H,WAG5BhG,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAsK,MAAA,IAAAtL,GAGAzI,GAAAgJ,UAAAC,MAAAjJ,GAAA0J,QAAAqF,MACApK,EAAA3E,GAAA0J,QAAAqF,KAAA,IAAAtG,GAKA,QAAAiP,IAAAC,GAEA3X,GAAAgJ,UAAAC,MAAAjJ,GAAA0J,QAAAK,WAKA3H,EAAAC,QAAAsV,KACAA,EAAA3X,GAAAwJ,UAAAzQ,UAAAmG,QAAA0H,EAAA6C,QAAAM,SAAAqD,cAIApN,GAAAsN,gBAAAqK,EAGAhT,EAAA3E,GAAA0J,QAAAK,SAAA/J,GAAAsN,iBAGA7K,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAM,SAAAqD,OAAApN,GAAAsN,iBAGAzG,EAAA7G,GAAAwJ,UAAAxJ,GAAAsN,gBAAA,yCAGA+C,IAA4B/C,gBAAAtN,GAAAsN,mBAI5B,QAAAsK,IAAAjU,GACA,GAAAkU,GAAA,YAAAlU,EAAAjQ,IAGAokB,cAAA5D,GAAA2D,SAGA3D,GAAA2D,QAAAE,WAAA,WAEAtV,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAoO,WAGArB,GAAAqB,IACaA,EAAA,OAIb,QAAAG,IAAArU,GACA,GAAA3D,GAAAgJ,UAAAC,KAAA,CAIA,GAAA+F,GAAAhP,GAAAgP,SAAAI,OACAxa,EAAA,EACA2T,EAAA4N,IAEA,IAAAxS,EACA,OAAAA,EAAAjQ,MAEA,iBACA,cACA,GAAAsM,GAAA4H,SAAAqQ,QACA,MAGArjB,GAAAiQ,EAAA7E,GAAAE,MAAAoI,YAAAC,GAGA,eAAA5E,EAAAjQ,MAAAsM,GAAA0J,QAAArB,OACArI,GAAA0J,QAAArB,KAAAzT,QAGA,MAGA,eACA,eACAoa,EAAAhP,GAAAgP,SAAAC,OACAra,EAAA,WACA,GAAAuT,GAAAnI,GAAAE,MAAAiI,QAEA,OAAAA,MAAAhR,OAEA0N,EAAAsD,EAAA+P,IAAA,GAAA3P,GAC6BnG,EAAA+K,OAAAhF,GAE7B,IAAAA,EAGA,KAQAgQ,GAAAnJ,EAAApa,IAIA,QAAAujB,IAAAnJ,EAAApa,GACA,GAAAoL,GAAAgJ,UAAAC,KAAA,CASA,GAJA7G,EAAAtE,UAAAlJ,KACAA,EAAA,GAGAwN,EAAAtE,UAAAkR,GAAA,CACA,IAAAhP,GAAAgP,WAAAhP,GAAAgP,SAAAC,OAGA,MAFAD,GAAAhP,GAAAgP,SAAAC,OAOA7M,EAAAsM,YAAAM,GACAA,EAAApa,QACaoa,IAEbA,EAAAE,MACAF,EAAAE,IAAAta,SAEAoa,EAAAG,OACAH,EAAAG,KAAAlD,UAAArX,KAMA,QAAAwjB,IAAA/L,EAAA7K,GAEA,GAAAA,EAAA,CAKAjC,MAAA8M,KACAA,EAAA,GAGArM,GAAAqY,KAAAxZ,SAAAwN,EAAA,IACArM,GAAAsY,KAAAzZ,SAAAwN,EAAA,OACArM,GAAAuY,MAAA1Z,SAAAwN,EAAA,SAGA,IAAAmM,GAAA3Z,SAAAsX,KAAA,WAGAnW,IAAAqY,MAAA,IAAArY,GAAAqY,MAAApR,UACAjH,GAAAsY,MAAA,IAAAtY,GAAAsY,MAAArR,UAGAzF,EAAAyK,WAAAuM,EAAAxY,GAAAuY,MAAA,QAAAvY,GAAAsY,KAAA,IAAAtY,GAAAqY,MAIA,QAAAI,MACA,GAAAzY,GAAAgJ,UAAAC,KAAA,CAKA,GAAAV,GAAA4N,MAAA,GAGAnW,GAAAuI,UAAA3B,EAAA8R,iBAAA1Y,GAAAE,MAAAwT,QACA0E,GAAA7P,EAAAvI,GAAAsI,aAIAtI,GAAAuI,UACA6P,GAAA7P,EAAAvI,GAAAuI,UAIAoQ,MAIA,QAAAC,IAAAjV,GAEAyU,GAAApY,GAAAE,MAAAoI,YAAAtI,GAAAsI,aAGA3E,GAAA,eAAAA,EAAAjQ,MAAAsM,GAAAE,MAAAsU,SAKAwD,GAAArU,GAIA,QAAAyS,IAAA/J,GAEAjK,EAAA+K,OAAAd,KACAA,EAAA,EAGA,IAAA9D,GAAA4N,KACAvhB,EAAAiQ,EAAAwH,EAAA9D,EAGAvI,IAAAgP,UAAAhP,GAAAgP,SAAAI,SACApP,GAAAgP,SAAAI,OAAAxa,SAIAoL,GAAA0J,SAAA1J,GAAA0J,QAAArB,OACArI,GAAA0J,QAAArB,KAAAzT,SAKA,QAAA+jB,IAAAhV,GACA,GAAA4E,GAAA4N,IAGA,IAAAvP,EAAAwB,SAAAC,MAAArI,GAAAgP,SAAAxF,WAAA,IAAAjB,EAAA,CAKA,GAAAsQ,GAAA7Y,GAAAgP,SAAAxF,UAAAsP,wBACAhE,EAAA,EACAiE,EAAAnS,EAAA6C,QAAAoF,QAAA,WAGA,IAAAlL,EAOAmR,EAAA,IAAA+D,EAAAG,OAAArV,EAAAsV,MAAAJ,EAAAK,UAPA,CACA,IAAAvW,EAAA3C,GAAAgP,SAAAH,QAAAkK,GAGA,MAFAjE,GAAA9U,GAAAgP,SAAAH,QAAA3U,MAAAgf,KAAA9Y,QAAA,QASA0U,EAAA,EACAA,EAAA,EACaA,EAAA,MACbA,EAAA,KAIAsD,GAAA7P,EAAA,IAAAuM,EAAA9U,GAAAgP,SAAAH,SAGA7O,GAAAgP,SAAAH,QAAA3U,MAAAgf,KAAApE,EAAA,IAIAnR,GAAA/C,GAAA,2BAAA+C,EAAAjQ,OACA+O,EAAAzC,GAAAgP,SAAAH,QAAAkK,EAAA,eAAApV,EAAAjQ,OAKA,QAAA8iB,IAAAzS,GAEA,GAAA6C,EAAAuS,cAAA,UAAAnZ,GAAAtM,KAAA,CAIA,GAAA0lB,GAAA,EACAC,GAAA,EACA1B,EAAA5T,EACA8T,EAAAlV,EAAA3C,GAAAwJ,UAAA5C,EAAA6C,QAAAoO,QA6BA,IA1BAzV,EAAAC,QAAA0B,KACAA,KAAArQ,MAEA2lB,EAAA,oBAAAtV,EAAArQ,KAGAikB,EAAA/W,GAAA,+CAAAmD,EAAArQ,MAGAkN,GAAA,yBAAAmD,EAAArQ,QACA0lB,EAAA,KAIA,UAAArV,EAAArQ,OACA0lB,EAAA,MAGAzB,EAAAhV,EAAA3C,GAAAwJ,UAAA5C,EAAA6C,QAAA0P,eAKApb,EAAA+Z,aAAA5D,GAAAoF,OAGA3B,GAAA3X,GAAAE,MAAAwT,QAAAmE,EAAA,CAIA,GAHApV,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA0P,cAAA,GAGAnZ,GAAAE,MAAAwT,QAAAmE,EACA,MAIA7X,IAAAuH,QAAA1H,UACAuZ,EAAA,KAMAzB,GAAA3X,GAAAE,MAAAwT,SACAQ,GAAAoF,MAAAvb,EAAAga,WAAA,aAEA/X,GAAA4H,SAAAqQ,UAAAjY,GAAA4H,SAAA0R,OAAAD,IAIA5W,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA0P,cAAA,IACiBC,KAKjB,QAAAG,IAAAhhB,GAEA,IAAA6J,EAAAtE,UAAAvF,GAEA,WADAihB,IAAAjhB,EAKA,IAAAgN,EACA,QAAAvF,GAAAtM,MACA,cACA6R,EAAAvF,GAAA2Q,MAAA8I,aACA,MAEA,aACAzZ,GAAA2Q,MAAA8I,YAAAtlB,KAAA,SAAAS,GACA2Q,EAAA3Q,GAEA,MAEA,kBACAoL,GAAA2Q,MAAA+I,gBAAA,SAAAtgB,GACAmM,EAAAnM,EAAAugB,eAEA,MAEA,SACApU,EAAAvF,GAAAE,MAAA0Z,WAIA,MAAArU,IAAA,GAKA,QAAAiU,IAAAjhB,GAsBA,QAAAC,KAkBA,GAhBAwH,GAAA2Q,MAAA,KAGA9O,EAAA7B,GAAAE,OAGA,UAAAF,GAAAtM,MAAAsM,GAAAgK,gBACAnI,EAAA7B,GAAAgK,gBAIAhK,GAAAwJ,WACAxJ,GAAAwJ,UAAAmG,gBAAA,SAIA,QAAApX,KACAyH,GAAAtM,KAAA6E,EAAA7E,KAGA,UAAAsM,GAAAtM,MAAA,CACA,GAAAmmB,GAAAthB,EAAAkE,QAAA,EAEA,SAAAod,IAAAjZ,EAAAgG,EAAA6I,MAAAkB,MAAAkJ,EAAAnmB,QACAsM,GAAAtM,KAAAmmB,EAAAnmB,MASA,OAHAsM,GAAAgJ,YAAAhJ,GAAAtM,MAGAsM,GAAAtM,MACA,YACAsM,GAAAE,MAAArC,EAAA/E,cAAA,QACA,MAEA,aACAkH,GAAAE,MAAArC,EAAA/E,cAAA,QACA,MAEA,eACA,YACA,iBACAkH,GAAAE,MAAArC,EAAA/E,cAAA,OACAkH,GAAAkR,QAAA3Y,EAAAkE,QAAA,GAAAC,IAKAqF,EAAA/B,GAAAwJ,UAAAxJ,GAAAE,OAGAkC,EAAAC,QAAA9J,EAAAsY,YACAjK,EAAAiK,SAAAtY,EAAAsY,UAIAjQ,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,QACAkT,EAAAkT,aACA9Z,GAAAE,MAAAiC,aAAA,kBAEAyE,EAAAiK,UACA7Q,GAAAE,MAAAiC,aAAA,eAEA,UAAA5J,IACAyH,GAAAE,MAAAiC,aAAA,SAAA5J,EAAAoE,QAEAiK,EAAA8N,MACA1U,GAAAE,MAAAiC,aAAA,YAKAM,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAA5D,WAAAuH,OAAApN,GAAA6N,cACApL,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAM,SAAAqD,OAAApN,GAAAsN,iBACAkC,IAGA5O,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,OACA0a,EAAA,SAAA7V,EAAAkE,SAIAiU,KAGA9P,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,QAEA,UAAA6E,IACA6V,EAAA,QAAA7V,EAAAmS,QAIA1K,GAAAE,MAAA6Z,SAIAnZ,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,OAAAkN,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,QAAAsM,GAAAgJ,UAAAC,QAEAwJ,KAGAC,MAIA9L,EAAAkJ,MAAAvX,EAAAuX,MACAF,IApIA,MAAAxN,GAAAhJ,OAAAb,IAAA,WAAAA,MAAAkE,QAAAtF,QAMAsL,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAuQ,OAAA,GAGAnE,KAGAO,KAGA+B,KAGA8B,SAuHAC,IAAA1hB,GAAA,QAxIAsT,IAAA,yBA4IA,QAAAqO,IAAA5hB,GACA,UAAAyH,GAAAtM,MACAsM,GAAAE,MAAAiC,aAAA,SAAA5J,GAKA,QAAA6hB,MAKA,QAAAC,KACA,GAAAvS,GAAAgO,KAGAwE,EAAAta,GAAA0J,QAAA5B,EAAA,gBACA9Q,EAAAgJ,GAAA0J,QAAA5B,EAAA,eAUA,IANA9Q,EADAA,KAAAG,OAAA,EACAH,IAAAG,OAAA,GAEAH,EAAA,GAIA,CACA,GAAAujB,GAAA5X,EAAA2X,EAAA1T,EAAA6C,QAAA+Q,SAEAzC,YAAA,WACA/gB,EAAAkX,QAEAqM,IACA9X,EAAA6X,EAAA1T,EAAA6C,QAAA+Q,UAAA,GACA/X,EAAAzL,EAAA4P,EAAA6C,QAAA+Q,UAAA,KAEqB,MAKrB,QAAAC,KACA,GAAAC,GAAA7c,EAAA8c,aAQA,OAHAD,GAHAA,OAAA7c,EAAA2I,KAGA3I,EAAA4Q,cAAA,UAFA,KASA,QAAAmM,GAAAjX,GACA,MAAAA,GAAAkX,QAAAlX,EAAAkX,QAAAlX,EAAAiK,MAIA,QAAAkN,GAAAJ,GACA,OAAAK,KAAA/a,IAAA0J,QAAA,CACA,GAAAlI,GAAAxB,GAAA0J,QAAAqR,EAEA,IAAA3Y,EAAA4Y,SAAAxZ,GACA,OAAAtK,GAAA,EAAuCA,EAAAsK,EAAArK,OAAoBD,IAC3DuL,EAAAjB,EAAAtK,GAAA0P,EAAA6C,QAAA+Q,SAAAhZ,EAAAtK,KAAAwjB,OAGAjY,GAAAjB,EAAAoF,EAAA6C,QAAA+Q,SAAAhZ,IAAAkZ,IA+BA,QAAAO,GAAAtX,GAYA,QAAAuX,KAEA,GAAA3S,GAAAvI,GAAAE,MAAAqI,QAGAnG,GAAA+K,OAAA5E,IAKAyN,GAAAzN,EAAA,IAAAhU,EAAA,KArBA,GAAAA,GAAAqmB,EAAAjX,GACAsU,EAAA,YAAAtU,EAAAjQ,KACAynB,EAAAlD,GAAA1jB,IAAAuZ,CAIA,IAAA1L,EAAA+K,OAAA5Y,GAoBA,GAAA0jB,EAAA,CAEA,GAAAhK,IAAA,sDAQA,QALArN,EAAAqN,EAAA1Z,KACAoP,EAAAsK,iBACAtK,EAAAyX,mBAGA7mB,GAEA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QAAA4mB,GAA6CD,GAAe,MAE5D,SACA,QAAAC,GAA6CrF,IAAiB,MAE9D,SAAAuB,IAAmD,MAEnD,SAAAG,IAAmD,MAEnD,SAAA2D,GAA6ClE,IAAgB,MAE7D,SAAAhB,IAA4C,MAE5C,SAAAF,IAA2C,MAE3C,SAAAgB,IAAqD,MAErD,SAAAoE,GAA6CzD,MAK7C7R,EAAAC,oBAAA9F,GAAA6N,cAAA,KAAAtZ,GACAwiB,KAIAjJ,EAAAvZ,MAEAuZ,GAAA,KAxKA,GAAAuN,GAAArb,GAAAuH,QAAAzI,KAAA,gBAkEA,IAAA8H,EAAA0U,iBAAAZ,QAAA,CACA,GAAA5M,GAAA,IAGAlH,GAAA0U,iBAAAC,QACA7X,EAAA3F,EAAA,yBAAA4F,GACA,GAAApP,GAAAqmB,EAAAjX,GACA+W,EAAAD,IACAe,GAAA,wCACAC,EAAAznB,IAAAmD,MAMA,KAAAskB,IAAA7a,EAAA4a,EAAAjnB,IAAA6N,EAAAsM,YAAAgM,IAAA7X,EAAA6X,EAAA9T,EAAAkD,UAAA4R,WACAT,EAAAtX,KAMAD,EAAA1D,GAAAwJ,UAAA,gBAAAyR,GAqFAvX,EAAA3F,EAAA,iBAAA4F,GACA,GAAApP,GAAAqmB,EAAAjX,GACA+W,EAAAD,GAEA,KAAAlmB,GACAumB,EAAAJ,KAGAhX,EAAA7F,EAAA2I,KAAA,mBACA/D,EAAAoH,EAAA,IAAAjD,EAAA6C,QAAA+Q,UAAA5T,EAAA6C,QAAA+Q,UAAA,IAEA,QAAAO,KAAA/a,IAAA0J,QAAA,CACA,GAAAlI,GAAAxB,GAAA0J,QAAAqR,EAEArX,GAAAlC,EAAA,kBACAiB,EAAAjB,EAAA,kBAKA6B,EAAArD,GAAA0J,QAAA5B,KAAA,QAAAlB,EAAA+U,UAAA7T,KAAAuS,GAGAhX,EAAArD,GAAA0J,QAAAzB,MAAA,QAAArB,EAAA+U,UAAA1T,MAAAoS,GAGAhX,EAAArD,GAAA0J,QAAA3B,QAAA,QAAAnB,EAAA+U,UAAA5T,QAAAiO,IAGA3S,EAAArD,GAAA0J,QAAA1B,OAAA,QAAApB,EAAA+U,UAAA3T,OAAA+N,IAGA1S,EAAArD,GAAA0J,QAAAxB,QAAA,QAAAtB,EAAA+U,UAAAzT,QAAA+N,IAGA5S,EAAArD,GAAA0J,QAAArB,KAAAgT,EAAAzU,EAAA+U,UAAAtT,KAAA2N,IAGA3S,EAAArD,GAAAyI,OAAA4G,MAAAgM,EAAAzU,EAAA+U,UAAAlT,OAAA,WACAyO,GAAAlX,GAAAyI,OAAA4G,MAAAza,SAIAyO,EAAArD,GAAA0J,QAAAqF,KAAA,QAAAnI,EAAA+U,UAAA5M,KAAAkI,IAGA5T,EAAArD,GAAA0J,QAAA7D,WAAA,QAAAe,EAAA+U,UAAA9V,WAAAkR,IAGAlR,EAAAC,oBACApC,EAAA7F,EAAAgI,EAAAK,oBAAA6Q,IAIArT,EAAA1D,GAAA0J,QAAAK,SAAA,QAAA2N,IAGAhU,EAAA1D,GAAAgP,SAAAxF,UAAA,kCAAAmP,IAGA/R,EAAAuS,eAEAzV,EAAA1D,GAAAwJ,UAAA,4FAAAgN,IAGA9S,EAAA1D,GAAA4H,SAAA,iCAAAjE,GACA3D,GAAA4H,SAAA0R,MAAA,eAAA3V,EAAAjQ,OAIAgQ,EAAA1D,GAAA4H,SAAA,6DAAAjE,GACA3D,GAAA4H,SAAAqQ,QAAArX,GAAA,0BAAA+C,EAAAjQ,QAIAgQ,EAAA1D,GAAA4H,SAAA,aAAA4O,IAAA,IAIA9S,EAAA1D,GAAAyI,OAAA4G,MAAA,iBAAA1L,GACAA,EAAAsK,gBAIA,IAAA2N,GAAAjY,EAAAkY,kCACAvE,EAAA1Q,EAAA2Q,WAAA,GAGA5T,EAAAmY,OAAA,GAAAnY,EAAAoY,OAAA,KACAH,EACApE,GAAAF,GAEAD,GAAAC,KAKA3T,EAAAmY,OAAA,GAAAnY,EAAAoY,OAAA,KACAH,EACAvE,GAAAC,GAEAE,GAAAF,MAOA,QAAA0E,MAwCA,GAtCAtY,EAAA1D,GAAAE,MAAA,qBAAA0Y,IAGAlV,EAAA1D,GAAAE,MAAA,aAAAkM,GAGA1I,EAAA1D,GAAAE,MAAA,gCAAAuY,IAGA/U,EAAA1D,GAAAE,MAAA,mBAEA,UAAAF,GAAAtM,MAAAkT,EAAAqV,kBAEA,UAAAjc,GAAAtM,MACAsX,IAIAgL,KAGAhW,GAAAE,MAAA6Z,UAKArW,EAAA1D,GAAAE,MAAA,mBAAA8X,IAGAtU,EAAA1D,GAAAE,MAAA,eAAAuX,IAGA/T,EAAA1D,GAAAE,MAAA,mBAAAqW,IAGA7S,EAAA1D,GAAAE,MAAA,yBAAA0X,IAGAhR,EAAAsV,aAAA,UAAAlc,GAAAtM,KAAA,CAEA,GAAA2N,GAAAwI,EAAA,IAAAjD,EAAA6C,QAAAsH,aAGA,KAAA1P,EACA,MAIAA,GAAAnH,MAAAiiB,OAAA,UAGAzY,EAAArC,EAAA,mBAEAuF,EAAAuS,cAAAnZ,GAAAuH,QAAA1H,UAAAG,GAAAE,MAAAwT,SAIA1T,GAAAE,MAAAwT,OACAkC,KACqB5V,GAAAE,MAAAkc,OACrBpG,KACAJ,MAEAC,QAMAjP,EAAAyV,oBACA3Y,EAAA1D,GAAAE,MAAA,uBAAAyD,GAAgEA,EAAAsK,mBAKhEvK,EAAA1D,GAAAE,MAAA0G,EAAA/C,OAAAhI,QAAA,oBAAAiN,KAAA,cAAAnF,GACAkD,EAAA7G,GAAAwJ,UAAA7F,EAAAjQ,MAAA,KAMA,QAAAumB,MACA,GAAArZ,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,MAAA,CAMA,OADA+I,GAAAuD,GAAAE,MAAAI,iBAAA,UACApJ,EAAA,EAA2BA,EAAAuF,EAAAtF,OAAoBD,IAC/C2K,EAAApF,EAAAvF,GAMA8I,IAAAE,MAAAiC,aAAA,6CAKAnC,GAAAE,MAAA6Z,OAGAxQ,GAAA,+BAMA,QAAA2Q,IAAApW,EAAAwY,GA0CA,QAAAC,KACAzE,aAAA5D,GAAAqI,SAGAna,EAAAC,QAAAia,KACAA,GAAA,GAIAla,EAAAoa,SAAA1Y,IACAA,EAAA7N,KAAAwmB,IAIAH,IAKAtc,GAAA0c,MAAA,EAGA1c,GAAAwJ,UAAA9I,WAAAic,aAAAF,GAAAzc,GAAAwJ,WAGA3L,EAAA2I,KAAAtM,MAAA8c,SAAA,GAGAnQ,EAAA4V,GAAA,iBApEA,IAAAzc,GAAA0c,KACA,WAIA,QAAA1c,GAAAtM,MACA,cAEAqK,EAAAkU,cAAAiC,GAAAC,WACApW,EAAAkU,cAAAiC,GAAAK,SAGAvU,GAAA2Q,MAAA9X,UAGA0jB,GAEA,MAEA,aAGAvc,GAAA2Q,MAAAiM,SAAAzoB,KAAAooB,GAGArI,GAAAqI,QAAAxe,EAAAga,WAAAwE,EAAA,IAEA,MAEA,aACA,YAEAhN,GAAA,GAGAgN,KAsCA,QAAAM,MAEA,GAAA7c,GAAA0c,KACA,WAUA,IANA7W,EAAAD,IAGA5F,GAAAuH,QAAAvJ,IAGAoE,EAAAsM,YAAA1O,GAAAE,OAAA,CAKA8P,IAIA,IAAA8M,GAAA5c,EAAA4c,QAAAzd,aACA,SAAAyd,GACA9c,GAAAtM,KAAAwM,EAAA0E,aAAA,aACA5E,GAAAkR,QAAAhR,EAAA0E,aAAA,iBAGA1E,EAAAyP,gBAAA,aACAzP,EAAAyP,gBAAA,mBAEA3P,GAAAtM,KAAAopB,EACAlW,EAAAkT,YAAA,OAAA5Z,EAAA0E,aAAA,eACAgC,EAAAiK,SAAAjK,EAAAiK,UAAA,OAAA3Q,EAAA0E,aAAA,YACAgC,EAAA8N,KAAA9N,EAAA8N,MAAA,OAAAxU,EAAA0E,aAAA,SAIA5E,GAAAgJ,YAAAhJ,GAAAtM,MAGAsM,GAAAgJ,UAAA+T,QAKA/c,GAAAwJ,UAAArI,EAAAjB,EAAArC,EAAA/E,cAAA,QAGAkH,GAAAwJ,UAAArH,aAAA,cAGAqN,IAGAjG,GAAA,GAAAvJ,GAAAuH,QAAAhJ,KAAA,IAAAyB,GAAAuH,QAAA/H,SAGAkR,MAIA9P,EAAAgG,EAAA6I,MAAAC,MAAA1P,GAAAtM,OAAAkN,EAAAgG,EAAA6I,MAAAkB,MAAA3Q,GAAAtM,QAAAsM,GAAAgJ,UAAAC,QAEAwJ,KAGAC,KAGA9C,KAIA5P,GAAA0c,MAAA,IAIA,QAAAjK,MAEA,IAAAzS,GAAAgJ,UAAAC,KAaA,MAZA6C,IAAA,qBAAA9L,GAAAtM,MAGAmO,EAAAgI,EAAAjD,EAAAkD,UAAAlC,SAAAvG,UAGAQ,EAAAgI,EAAAjD,EAAAkD,UAAAJ,QAAA5B,WAGAyH,IAAA,EAOA,IAAAyN,IAAAxP,EAAA5G,EAAAkD,UAAAlC,SAAAvG,SAAAlK,MACA6lB,IAEA3O,IAIAS,MAKAkO,GACA5C,KAIA4B,KAGAzM,IAGAxG,IAGAa,IAGAsN,KACAO,KAGAmB,KAGArC,MAsCA,QAAA7D,MAEA3U,EAAAga,WAAA,WACAlR,EAAA7G,GAAAE,MAAA,UACa,GAGbuC,EAAAzC,GAAAE,MAAA+c,EAAAxT,QAAAjR,OAAA,GAGAiK,EAAAzC,GAAAwJ,UAAA5C,EAAA6C,QAAAuQ,OAAA,GAGAha,GAAAE,MAAAF,KAAA8G,GAGAF,EAAAiK,UACA+E,KAhuFA,GAEA9O,IAFA9G,GAAAhI,KACAkc,KAIAlU,IAAAE,OACA,IAAAuc,IAAAvc,EAAAqB,WAAA,GAqBAgI,GAAA,WAA+BxC,EAAA,MAAA5O,YAC/B2T,GAAA,WAAgC/E,EAAA,OAAA5O,WA4sFhC,OAzsFAoR,IAAA,SAAA3C,GA6oFAE,IACAoW,YAAA,WAA4C,MAAAT,KAC5CU,aAAA,WAA4C,MAAAnd,IAAAwJ,WAC5C4T,SAAA,WAA4C,MAAApd,IAAA2Q,OAC5C0M,SAAA,WAA4C,MAAArd,IAAAE,OAC5Cod,QAAA,WAA4C,MAAAtd,IAAAtM,MAC5CogB,YAAAqC,GACA1B,eAAA,WAA4C,MAAAzU,IAAAE,MAAAoI,aAC5CiV,UAAA,WAA4C,MAAAvd,IAAAE,MAAAuI,QAC5CuL,QAAA,WAA4C,MAAAhU,IAAAE,MAAA6T,OAC5CyJ,QAAA,WAA4C,MAAA7a,GAAA3C,GAAAwJ,UAAA5C,EAAA6C,QAAAuQ,QAC5CyD,UAAA,WAA4C,MAAA9a,GAAA3C,GAAAwJ,UAAA5C,EAAA6C,QAAAoO,UAC5C6F,SAAA,WAA4C,MAAA1d,IAAAE,MAAAwT,QAC5CmB,GAAA,SAAAlR,EAAAG,GAAiG,MAAtCJ,GAAA1D,GAAAwJ,UAAA7F,EAAAG,GAAsC9L,MACjG8P,KAAA8N,GACA3N,MAAA4N,GACAjC,KAAA,WAA4CiC,KAAUG,MACtDjO,QAAAiO,GACAhO,OAAA+N,GACA7N,QAAA+N,GACA5N,KAAA2N,GACAzd,OAAAghB,GACA5c,OAAAwd,GACAhD,UAAAD,GACAmD,WAAAvE,GACAtN,WAAAyO,GACArO,eAAA8O,GACA7O,iBAAAkO,GACA4G,eAAAnH,GACA3I,aAAA,WAA4C,MAAA7N,IAAA6N,eAAA,GAC5C+P,QAAA,SAAA3d,GAAoD,MAAAF,GAAAC,GAAAC,IACpDpH,QAAAqhB,IA0BA2C,KAGA7c,GAAA0c,KAIA5V,GAHA,KAOA,QAAAwH,GAAA/I,EAAA1R,GACA,GAAAsQ,GAAA,GAAAiH,eAGA,KAAAhJ,EAAApB,OAAAnN,KAAAuO,EAAAsM,YAAA7Q,EAAA4Q,cAAA,IAAA5a,IAAA,CAKA,GAAA2V,GAAA3L,EAAA/E,cAAA,MACA0Q,GAAArH,aAAA,aACAC,EAAApB,OAAAnN,IACA2V,EAAArH,aAAA,KAAAtO,GAEAgK,EAAA2I,KAAA7F,aAAA6I,EAAA3L,EAAA2I,KAAA+D,WAAA,IAGA,mBAAApG,KACAA,EAAA4H,KAAA,MAAAxG,GAAA,GAMApB,EAAA0Z,OAAA,WACArU,EAAAyC,UAAA9H,EAAAsH,cAGAtH,EAAA6H,SAIA,QAAAhD,GAAAtV,GACA,GAAA6T,GAAAvJ,IACA8f,EAAAvW,EAAAzI,MAAAyI,EAAA/H,SAAA,EACAC,EAAA8H,EAAA9H,MACAG,EAAA2H,EAAA3H,SACAme,IAAAlgB,EAAA/E,cAAA,SAAAqH,YACA6d,IAAAngB,EAAA/E,cAAA,SAAAqH,YACA4c,GAAA,EACA9T,GAAA,CAEA,QAAAvV,GACA,YACAqpB,EAAAiB,EACA/U,EAAA8T,IAAAe,IAAAle,CACA,MAEA,aACAmd,EAAAgB,EACA9U,EAAA8T,IAAAe,CACA,MAIA,aACAf,GAAA,EACA9T,GAAA6U,IAAAre,CACA,MAEA,eACAsd,GAAA,EACA9T,GAAA6U,IAAAre,EAGAA,IAAAG,GAAA2H,EAAA/H,SAAA,KACAyJ,GAAA,EAGA,MAEA,kBACA8T,GAAA,EACA9T,GAAA6U,IAAAle,CACA,MAEA,SACAmd,EAAAgB,GAAAC,EACA/U,EAAA8T,IAAAe,EAGA,OACAf,QACA9T,QAKA,QAAAzQ,GAAAylB,EAAArlB,GAoCA,QAAAslB,GAAAlnB,EAAAkJ,GACAyC,EAAAzC,EAAA+c,EAAAxT,QAAA0U,OACAC,EAAAlhB,MAIAlG,SAEAkJ,UA1CA,GAAAke,MACAC,KACA7b,GAAAya,EAAAnT,UAAA4F,MAAAuN,EAAAnT,UAAA6G,OAAA7H,KAAA,IA2BA,IAxBA1G,EAAApB,OAAAid,GAEAA,EAAApgB,EAAAyC,iBAAA2d,GACS7b,EAAAsM,YAAAuP,GAETA,MACS7b,EAAA4Y,SAAAiD,IAAA7b,EAAAkc,MAAAL,IAAA7b,EAAApB,OAAAid,KAGT7b,EAAAtE,UAAAlF,IAAAwJ,EAAAhJ,OAAA6kB,KACArlB,EAAAqlB,GAIAA,EAAApgB,EAAAyC,iBAAAkC,IAIAJ,EAAA4Y,SAAAiD,KACAA,EAAAtiB,MAAArF,UAAA2Q,MAAAhR,KAAAgoB,KAKAjV,IAAA+T,QAAAkB,EAAA9mB,OACA,QAkBA,QAAAD,GAAA,EAAuBA,EAAA+mB,EAAA9mB,OAAoBD,IAAA,CAC3C,GAAAF,GAAAinB,EAAA/mB,GAGAoT,EAAAtT,EAAAsJ,iBAAAkC,EAGA,IAAA8H,EAAAnT,OACA,OAAAgN,GAAA,EAA+BA,EAAAmG,EAAAnT,OAAqBgN,IACpD+Z,EAAAlnB,EAAAsT,EAAAnG,QAEatB,GAAA7L,EAAAwL,IAEb0b,EAAAlnB,KAwDA,MAnDAonB,GAAAzM,QAAA,SAAArZ,GACA,GAAAkJ,GAAAlJ,EAAAtB,OACAkJ,EAAA5H,EAAA4H,MACAuF,GAAA,CAGAvF,KAAAsB,IACAiE,GAAA,EAKA,IAAAhS,KAGA,KAAiBA,EAAA6c,KAAAC,MAAA/O,EAAAoD,aAAA,cACjB,MAAA8I,IAEA,GAAA9G,GAAA3B,KAAmCgY,EAAArkB,EAAAnF,EAGnC,KAAAmT,EAAAuC,QACA,WAIA,IAAAvT,GAAA,GAAA+Q,GAAAzG,EAAA0G,EAGA,IAAAxE,EAAAhJ,OAAAxD,GAAA,CAKA,GAAAgR,EAAAI,MAAA,CACA,GAAAnD,GAAA+C,EAAA/C,OAAAhI,QAAA,+FAEA6H,GAAA9N,EAAAunB,eAAAtZ,EAAAiF,KAAA,cAAAnF,GACAtO,QAAAC,KAAAsR,EAAAM,UAAA,SAAAvD,EAAAjQ,MAAAoV,KAAA,KAAAnF,EAAAc,OAAAzE,QAKAqE,EAAAzO,EAAAunB,eAAA,YACAnd,KAAApK,IAIAyoB,EAAAnhB,KAAAtH,MAGAyoB,EAIA,QAAArqB,GAAAwV,GAUA,GATApH,EAAApB,OAAAwI,GAEAA,EAAA3L,EAAA4Q,cAAAjF,GACSpH,EAAAtE,UAAA0L,KAETA,EAAA3L,EAAA2I,MAIApE,EAAAsM,YAAAlF,GAAA,CACA,GAAApI,GAAAoI,EAAAlJ,iBAAA,IAAA2c,EAAAxT,QAAAjR,OACA6lB,IAQA,OANA1iB,OAAArF,UAAA2Q,MAAAhR,KAAAmL,GAAAuQ,QAAA,SAAAnQ,GACAY,EAAAhJ,OAAAoI,EAAAxB,OACAqe,EAAAnhB,KAAAsE,EAAAxB,QAIAqe,EAGA,SAvoHA,GAAAxY,GACA6Q,GAAcvS,EAAA,EAAA0G,EAAA,GAGdoS,GACA9T,SAAA,EACAnC,OAAA,EACA6J,UAAA,EACA6D,MAAA,EACAnG,SAAA,GACA9F,OAAA,GACAC,UAAA,EACAC,UAAA,GACA4O,WAAA,EACAhP,SAAA,KACAmQ,iBAAA,EACApK,YAAA,EACA3G,WAAA,OACAN,QAAA,sCACA6U,aAAA,EACA/C,cAAA,EACA8C,iBAAA,EACAI,oBAAA,EACAf,kBACAZ,SAAA,EACAa,QAAA,GAEAnT,UACAR,UAAA,EACAS,MAAA,GAEAyB,WACA4F,MAAA,eACAiB,MAAA,cACA+K,SAAA,6CACAlS,UAAA,QACA5B,UACA4B,UAAA,KACAnI,QAAA,mBAEAsN,OAAA,cACAjF,SACArB,KAAA,qBACAP,KAAA,qBACAG,MAAA,sBACAF,QAAA,wBACAC,OAAA,uBACAE,QAAA,6BACA6G,KAAA,qBACAhF,SAAA,yBACAlE,WAAA,4BAEA4C,QACA4G,MAAA,uBACAC,QAAA,0BAEAN,UACAxF,UAAA,kBACAyF,OAAA,0BACAG,OAAA,2BAEArF,SAAA,kBACAzB,YAAA,uBACAC,SAAA,yBAEAkB,SACAjR,MAAA,cACAwhB,MAAA,cACAjJ,aAAA,sBACAK,aAAA,oBACA1d,KAAA,YACAkd,QAAA,gBACA2D,QAAA,gBACAR,MAAA,cACA8D,QAAA,gBACAyB,MAAA,cACAzK,QAAA,gBACAD,OAAA,gBACAuK,aAAA,sBACA1Z,MAAA,eACAI,QAAA,iBACAkK,UACAZ,QAAA,yBACAiE,OAAA,yBAEAvH,YACAsD,QAAA,2BACAiE,OAAA,2BAEAoN,SAAA,aAEAzQ,UACAwD,eAAA,GAEA1H,YACAsD,SAAA,EACAE,UAAA,EACAH,YAAA,GAEAmE,SACAlE,SAAA,EACA9R,IAAA,QAEAuQ,UAAA,uFACAC,MACAE,QAAA,UACAC,OAAA,yBACAF,KAAA,OACAG,MAAA,QACAC,QAAA,0BACAkH,OAAA,SACAjH,SAAA,WACAG,YAAA,eACAC,SAAA,WACAE,OAAA,SACAD,WAAA,cACAI,eAAA,kBACAC,iBAAA,oBACAkH,WAAA,sBAEAN,OACAkB,OAAA,gCACAjB,OAAA,kBAGA6B,MACAO,OACAhL,IAAA,0CAEA0K,SACA1K,IAAA,sCAEAuL,YACAvL,IAAA,2CAIA6U,WACAtT,KAAA,KACAP,KAAA,KACAG,MAAA,KACAF,QAAA,KACAC,OAAA,KACAE,QAAA,KACA6G,KAAA,KACAtG,OAAA,KACAsB,SAAA,KACAlE,WAAA,MAGAhC,QAAA;AAEAqD,UAAA,UAsYA9E,GACAhJ,OAAA,SAAAiW,GACA,cAAAA,GAAA,oBAEAiP,MAAA,SAAAjP,GACA,cAAAA,GAAA,oBAAAA,EAAA7Y,cAAAmF,OAEAwR,OAAA,SAAAkC,GACA,cAAAA,IAAA,qBAAA9P,MAAA8P,EAAA,oBAAAA,MAAA7Y,cAAA+nB,SAEAvd,OAAA,SAAAqO,GACA,cAAAA,IAAA,gBAAAA,IAAA,gBAAAA,MAAA7Y,cAAAgoB,SAEAnc,QAAA,SAAAgN,GACA,cAAAA,GAAA,iBAAAA,IAEA2L,SAAA,SAAA3L,GACA,cAAAA,eAAAnL,WAEAwK,YAAA,SAAAW,GACA,cAAAA,eAAAoP,cAEAjC,SAAA,SAAAnN,GACA,cAAAA,GAAA,kBAAAA,IAEAvR,UAAA,SAAAuR,GACA,cAAAA,GAAA,mBAAAA,KAsFAY,GACAjH,UAAA,WACA,qBAAAjL,IACA,QAKA,KAEAA,EAAAmS,aAAAM,QAAA,eAGA,IAAAkO,GAAA3gB,EAAAmS,aAAAE,QAAA,UAMA,OAHArS,GAAAmS,aAAAC,WAAA,WAGA,OAAAuO,EAEA,MAAAhR,GACA,SAGA,YAm+FA,QACAlV,QACAwQ,YACAsF,aACAta,SAMA,WAKA,QAAAwQ,GAAAb,EAAA1H,GACAA,MAA4BqI,SAAA,EAAAqa,YAAA,EAAAla,OAAA3G,OAC5B,IAAA8gB,GAAA/gB,SAAAghB,YAAA,cAEA,OADAD,GAAAE,gBAAAnb,EAAA1H,EAAAqI,QAAArI,EAAA0iB,WAAA1iB,EAAAwI,QACAma,EARA,kBAAA7gB,QAAAyG,cAWAA,EAAAlO,UAAAyH,OAAAghB,MAAAzoB,UAEAyH,OAAAyG","file":"static/js/video.e6e9fb22.chunk.js","sourcesContent":["webpackJsonp([4,6,8],{\n\n/***/ 58:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.fetchCourseByCourseTypeId = fetchCourseByCourseTypeId;\n\texports.fetchCourseById = fetchCourseById;\n\t\n\tvar _axios = __webpack_require__(36);\n\t\n\tvar _axios2 = _interopRequireDefault(_axios);\n\t\n\tvar _default = __webpack_require__(25);\n\t\n\tvar _default2 = _interopRequireDefault(_default);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction fetchCourseListSuccess(data) {\n\t  return {\n\t    type: _constants.FETCH_COURSE_LIST_SUCCESS,\n\t    data: data\n\t  };\n\t}\n\t\n\tfunction fetchCourseSuccess(data) {\n\t  return {\n\t    type: _constants.FETCH_COURSE_SUCCESS,\n\t    data: data\n\t  };\n\t}\n\t\n\t//根据课程分类id获取所有id\n\tfunction fetchCourseByCourseTypeId(id) {\n\t  return function (dispatch) {\n\t    _axios2.default.get(_default2.default.API_URL + ('/courseType/' + id + '/course')).then(function (response) {\n\t      if (response.status !== 200 && response.data.meta.code !== 200) {\n\t        throw new Error(\"Bad response from server\");\n\t      }\n\t      return response.data.data;\n\t    }).then(function (data) {\n\t      return dispatch(fetchCourseListSuccess(data));\n\t    });\n\t  };\n\t}\n\t\n\t//根据课程id获取详情\n\tfunction fetchCourseById(id) {\n\t  return function (dispatch) {\n\t    _axios2.default.get(_default2.default.API_URL + ('/course/' + id)).then(function (response) {\n\t      if (response.status !== 200 && response.data.meta.code !== 200) {\n\t        throw new Error(\"Bad response from server\");\n\t      }\n\t      return response.data.data;\n\t    }).then(function (data) {\n\t      return dispatch(fetchCourseSuccess(data));\n\t    });\n\t  };\n\t}\n\n/***/ },\n\n/***/ 265:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.fetchVideoById = fetchVideoById;\n\t\n\tvar _axios = __webpack_require__(36);\n\t\n\tvar _axios2 = _interopRequireDefault(_axios);\n\t\n\tvar _default = __webpack_require__(25);\n\t\n\tvar _default2 = _interopRequireDefault(_default);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction fetchVideoSuccess(data) {\n\t  return {\n\t    type: _constants.FETCH_VIDEO_SUCCESS,\n\t    data: data\n\t  };\n\t}\n\t\n\t//根据课程id获取详情\n\tfunction fetchVideoById(id, token, issued) {\n\t  console.log(\"token\", token);\n\t\n\t  return function (dispatch) {\n\t    _axios2.default.get(_default2.default.API_URL + ('/course/video/' + id), {\n\t      headers: {\n\t        'x-token': '' + token,\n\t        'x-token-issued': '' + issued\n\t      }\n\t    }).then(function (response) {\n\t      if (response.status !== 200 && response.data.meta.code !== 200) {\n\t        throw new Error(\"Bad response from server\");\n\t      }\n\t      return response.data.data;\n\t    }).then(function (data) {\n\t      return dispatch(fetchVideoSuccess(data));\n\t    });\n\t  };\n\t}\n\n/***/ },\n\n/***/ 271:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactDom = __webpack_require__(9);\n\t\n\tvar _reactDom2 = _interopRequireDefault(_reactDom);\n\t\n\tvar _plyr = __webpack_require__(506);\n\t\n\tvar _plyr2 = _interopRequireDefault(_plyr);\n\t\n\t__webpack_require__(312);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar PlyrMidea = function (_React$Component) {\n\t  _inherits(PlyrMidea, _React$Component);\n\t\n\t  function PlyrMidea() {\n\t    _classCallCheck(this, PlyrMidea);\n\t\n\t    return _possibleConstructorReturn(this, (PlyrMidea.__proto__ || Object.getPrototypeOf(PlyrMidea)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PlyrMidea, [{\n\t    key: 'componentWillReceiveProps',\n\t    value: function componentWillReceiveProps(nextProps, nextState) {\n\t      this.player.source(nextProps.source);\n\t    }\n\t  }, {\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.player = _plyr2.default.setup(_reactDom2.default.findDOMNode(this.refs.videoPlayer), this.props.options)[0];\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      this.player.destroy();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement('video', { className: 'js-plyr plyr', ref: 'videoPlayer' });\n\t    }\n\t  }]);\n\t\n\t  return PlyrMidea;\n\t}(_react2.default.Component);\n\t\n\tPlyrMidea.propTypes = {\n\t  'options': _react.PropTypes.object, // this is an options object from the docs\n\t  'source': _react.PropTypes.object // this is a source object from the docs\n\t};\n\texports.default = PlyrMidea;\n\n/***/ },\n\n/***/ 279:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _radium = __webpack_require__(16);\n\t\n\tvar _radium2 = _interopRequireDefault(_radium);\n\t\n\tvar _reactRedux = __webpack_require__(22);\n\t\n\tvar _RaisedButton = __webpack_require__(40);\n\t\n\tvar _RaisedButton2 = _interopRequireDefault(_RaisedButton);\n\t\n\tvar _reactRouter = __webpack_require__(23);\n\t\n\tvar _videoAction = __webpack_require__(265);\n\t\n\tvar _courseActions = __webpack_require__(58);\n\t\n\tvar _PlyrMidea = __webpack_require__(271);\n\t\n\tvar _PlyrMidea2 = _interopRequireDefault(_PlyrMidea);\n\t\n\tvar _qknow = __webpack_require__(334);\n\t\n\tvar _qknow2 = _interopRequireDefault(_qknow);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t//import Madia from '../components/Media';\n\t\n\t\n\tvar style = {\n\t  base: {},\n\t  video: {\n\t    height: 700\n\t  },\n\t  couseName: {\n\t    fontSize: 30\n\t  },\n\t  des: {\n\t    marginTop: 20,\n\t    marginBottom: 10\n\t  },\n\t  couseIntro: {\n\t    fontSize: 18,\n\t    lineHeight: 1.3\n\t  },\n\t  pre: {\n\t    marginRight: 20\n\t  }\n\t};\n\t\n\tvar _ref2 = _react2.default.createElement(_RaisedButton2.default, { disabled: true, label: '\\u4E0B\\u4E00\\u8282', primary: true });\n\t\n\tvar Video = function (_Component) {\n\t  _inherits(Video, _Component);\n\t\n\t  function Video() {\n\t    var _ref;\n\t\n\t    var _temp, _this, _ret;\n\t\n\t    _classCallCheck(this, Video);\n\t\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Video.__proto__ || Object.getPrototypeOf(Video)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {\n\t      var token = _this.props.user.get(\"token\");\n\t      var issued = _this.props.user.get(\"issued\");\n\t      _this.props.onLoadVideo(_this.props.params.id, token, issued);\n\t      _this.props.onLoadCourse(_this.props.params.courseId);\n\t    }, _temp), _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  _createClass(Video, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var video = this.props.video;\n\t\n\t      //上一节\n\t\n\t      var preButton = video.get('pre_video') ? _react2.default.createElement(_RaisedButton2.default, { containerElement: _react2.default.createElement(_reactRouter.Link, { to: '/course/' + this.props.params.courseId + '/video/' + video.get('pre_video') }),\n\t        label: '\\u4E0A\\u4E00\\u8282', target: '_blank', primary: true, style: style.pre }) : _react2.default.createElement(_RaisedButton2.default, { disabled: true, label: '\\u4E0A\\u4E00\\u8282', primary: true, style: style.pre });\n\t\n\t      //下一节\n\t      var nextButton = video.get('next_video') ? _react2.default.createElement(_RaisedButton2.default, { containerElement: _react2.default.createElement(_reactRouter.Link, { to: '/course/' + this.props.params.courseId + '/video/' + video.get('next_video') }),\n\t        label: '\\u4E0B\\u4E00\\u8282', target: '_blank', primary: true }) : _ref2;\n\t\n\t      //http://qknow1.oss-cn-shanghai.aliyuncs.com/chrome_01_2016-08-29_222508.mp4\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { className: 'container' },\n\t        _react2.default.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          _react2.default.createElement(\n\t            'div',\n\t            { className: 'col-xs-12 col-sm-12 col-md-12 col-lg-12', style: [style.video] },\n\t            _react2.default.createElement(_PlyrMidea2.default, { source: { type: 'video',\n\t                sources: [{\n\t                  src: video.get(\"URL\"),\n\t                  type: 'video/mp4'\n\t                }],\n\t                poster: _qknow2.default\n\t              },\n\t              options: {} })\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          'div',\n\t          { className: 'row between-lg', style: [style.des] },\n\t          _react2.default.createElement(\n\t            'div',\n\t            { className: 'col-xs-6 col-sm-6 col-md-6 col-lg-6' },\n\t            _react2.default.createElement(\n\t              'span',\n\t              { style: [style.couseName] },\n\t              video.get('title')\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            'div',\n\t            { className: 'col-xs-6 col-sm-6 col-md-6 col-lg-6' },\n\t            _react2.default.createElement(\n\t              'div',\n\t              { className: 'row end-xs' },\n\t              _react2.default.createElement(\n\t                'div',\n\t                { className: 'col-xs-12 col-sm-12 col-md-12 col-lg-12' },\n\t                preButton,\n\t                nextButton\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          _react2.default.createElement(\n\t            'div',\n\t            { className: 'col-xs-8 col-sm-8 col-md-8 col-lg-8' },\n\t            _react2.default.createElement(\n\t              'span',\n\t              { style: [style.couseIntro] },\n\t              video.get('sub_title')\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Video;\n\t}(_react.Component);\n\t\n\t;\n\t\n\tvar mapStateToProps = function mapStateToProps(state) {\n\t  return {\n\t    video: state.video,\n\t    course: state.course,\n\t    user: state.user\n\t  };\n\t};\n\t\n\tvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n\t  return {\n\t    onLoadVideo: function onLoadVideo(id, token, issued) {\n\t      dispatch((0, _videoAction.fetchVideoById)(id, token, issued));\n\t    },\n\t    onLoadCourse: function onLoadCourse(id) {\n\t      dispatch((0, _courseActions.fetchCourseById)(id));\n\t    }\n\t\n\t  };\n\t};\n\t\n\texports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _radium2.default)(Video));\n\n/***/ },\n\n/***/ 304:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(92)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".plyr:focus,.plyr input[type=range]:focus{outline:0}.plyr .plyr__video-embed iframe,.plyr__tooltip{pointer-events:none}@-webkit-keyframes plyr-progress{to{background-position:25px 0}}@keyframes plyr-progress{to{background-position:25px 0}}.plyr{position:relative;max-width:100%;min-width:200px;font-family:Avenir,Avenir Next,Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif;direction:ltr}.plyr,.plyr *,.plyr :after,.plyr :before{box-sizing:border-box}.plyr a,.plyr button,.plyr input,.plyr label{-ms-touch-action:manipulation;touch-action:manipulation}.plyr audio,.plyr video{width:100%;height:auto;vertical-align:middle;border-radius:inherit}.plyr input[type=range]{display:block;height:20px;width:100%;margin:0;padding:0;vertical-align:middle;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;background:0 0}.plyr input[type=range]::-webkit-slider-runnable-track{height:8px;background:0 0;border:0;border-radius:4px;-webkit-user-select:none;user-select:none}.plyr input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;margin-top:-4px;position:relative;height:16px;width:16px;background:#fff;border:2px solid transparent;border-radius:100%;-webkit-transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease,-webkit-transform .2s ease;box-shadow:0 1px 1px rgba(0,0,0,.15),0 0 0 1px rgba(0,0,0,.15);box-sizing:border-box}.plyr input[type=range]::-moz-range-track{height:8px;background:0 0;border:0;border-radius:4px;-moz-user-select:none;user-select:none}.plyr input[type=range]::-moz-range-thumb{position:relative;height:16px;width:16px;background:#fff;border:2px solid transparent;border-radius:100%;-webkit-transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease,-webkit-transform .2s ease;box-shadow:0 1px 1px rgba(0,0,0,.15),0 0 0 1px rgba(0,0,0,.15);box-sizing:border-box}.plyr input[type=range]::-ms-track{height:8px;background:0 0;border:0;color:transparent}.plyr input[type=range]::-ms-fill-upper{height:8px;background:0 0;border:0;border-radius:4px;-ms-user-select:none;user-select:none}.plyr input[type=range]::-ms-fill-lower{height:8px;border:0;border-radius:4px;-ms-user-select:none;user-select:none;background:#3498db}.plyr input[type=range]::-ms-thumb{position:relative;height:16px;width:16px;background:#fff;border:2px solid transparent;border-radius:100%;-webkit-transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease,-webkit-transform .2s ease;box-shadow:0 1px 1px rgba(0,0,0,.15),0 0 0 1px rgba(0,0,0,.15);box-sizing:border-box;margin-top:0}.plyr input[type=range]::-ms-tooltip{display:none}.plyr input[type=range]::-moz-focus-outer{border:0}.plyr input[type=range].tab-focus:focus{outline-offset:3px}.plyr input[type=range]:active::-webkit-slider-thumb{background:#3498db;border-color:#fff;-webkit-transform:scale(1.25);transform:scale(1.25)}.plyr input[type=range]:active::-moz-range-thumb{background:#3498db;border-color:#fff;transform:scale(1.25)}.plyr input[type=range]:active::-ms-thumb{background:#3498db;border-color:#fff;transform:scale(1.25)}.plyr--video input[type=range].tab-focus:focus{outline:1px dotted hsla(0,0%,100%,.5)}.plyr--audio input[type=range].tab-focus:focus{outline:1px dotted rgba(86,93,100,.5)}.plyr__sr-only{clip:rect(1px,1px,1px,1px);overflow:hidden;position:absolute!important;padding:0!important;border:0!important;height:1px!important;width:1px!important}.plyr__video-wrapper{position:relative;background:#000;border-radius:inherit}.plyr__video-embed{padding-bottom:56.25%;height:0;border-radius:inherit;overflow:hidden;z-index:0}.plyr__video-embed iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.plyr__video-embed>div{position:relative;padding-bottom:200%;-webkit-transform:translateY(-35.95%);transform:translateY(-35.95%)}.plyr video::-webkit-media-text-track-container{display:none}.plyr__captions{display:none;position:absolute;bottom:0;left:0;width:100%;padding:20px;-webkit-transform:translateY(-40px);transform:translateY(-40px);-webkit-transition:-webkit-transform .3s ease;transition:-webkit-transform .3s ease;transition:transform .3s ease;transition:transform .3s ease,-webkit-transform .3s ease;color:#fff;font-size:16px;text-align:center;font-weight:400}.plyr__captions span{border-radius:2px;padding:3px 10px;background:rgba(0,0,0,.7);-webkit-box-decoration-break:clone;box-decoration-break:clone;line-height:150%}.plyr__captions span:empty{display:none}@media (min-width:768px){.plyr__captions{font-size:24px}}.plyr--captions-active .plyr__captions{display:block}.plyr--hide-controls .plyr__captions{-webkit-transform:translateY(-15px);transform:translateY(-15px)}@media (min-width:1024px){.plyr--fullscreen-active .plyr__captions{font-size:32px}}.plyr ::-webkit-media-controls{display:none}.plyr__controls{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;line-height:1;text-align:center}.plyr__controls .plyr__progress,.plyr__controls .plyr__time,.plyr__controls>button{margin-left:5px}.plyr__controls .plyr__progress:first-child,.plyr__controls .plyr__time:first-child,.plyr__controls>button:first-child{margin-left:0}.plyr__controls .plyr__volume{margin-left:5px}.plyr__controls [data-plyr=pause]{margin-left:0}.plyr__controls button{position:relative;display:inline-block;-ms-flex-negative:0;flex-shrink:0;overflow:visible;vertical-align:middle;padding:7px;border:0;background:0 0;border-radius:3px;cursor:pointer;-webkit-transition:background .3s ease,color .3s ease,opacity .3s ease;transition:background .3s ease,color .3s ease,opacity .3s ease;color:inherit}.plyr__controls button svg{width:18px;height:18px;display:block;fill:currentColor}.plyr__controls button:focus{outline:0}.plyr__controls .icon--captions-on,.plyr__controls .icon--exit-fullscreen,.plyr__controls .icon--muted{display:none}@media (min-width:480px){.plyr__controls .plyr__progress,.plyr__controls .plyr__time,.plyr__controls>button{margin-left:10px}}.plyr--hide-controls .plyr__controls{opacity:0;pointer-events:none}.plyr--video .plyr__controls{position:absolute;left:0;right:0;bottom:0;z-index:2;padding:50px 10px 10px;background:-webkit-linear-gradient(transparent,rgba(0,0,0,.5));background:linear-gradient(transparent,rgba(0,0,0,.5));border-bottom-left-radius:inherit;border-bottom-right-radius:inherit;color:#fff;-webkit-transition:opacity .3s ease;transition:opacity .3s ease}.plyr--video .plyr__controls button.tab-focus:focus,.plyr--video .plyr__controls button:hover{background:#3498db;color:#fff}.plyr--audio .plyr__controls{padding:10px;border-radius:inherit;background:#fff;border:1px solid #dbe3e8;color:#565d64}.plyr--audio .plyr__controls button.tab-focus:focus,.plyr--audio .plyr__controls button:hover,.plyr__play-large{background:#3498db;color:#fff}.plyr__play-large{display:none;position:absolute;z-index:1;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);padding:10px;border:4px solid currentColor;border-radius:100%;box-shadow:0 1px 1px rgba(0,0,0,.15);-webkit-transition:all .3s ease;transition:all .3s ease}.plyr__play-large svg{position:relative;left:2px;width:20px;height:20px;display:block;fill:currentColor}.plyr__play-large:focus{outline:1px dotted hsla(0,0%,100%,.5)}.plyr .plyr__play-large{display:inline-block}.plyr--audio .plyr__play-large,.plyr--playing .plyr__controls [data-plyr=play],.plyr__controls [data-plyr=pause]{display:none}.plyr--playing .plyr__play-large{opacity:0;visibility:hidden}.plyr--playing .plyr__controls [data-plyr=pause]{display:inline-block}.plyr--captions-active .plyr__controls .icon--captions-on,.plyr--fullscreen-active .icon--exit-fullscreen,.plyr--muted .plyr__controls .icon--muted{display:block}.plyr--captions-active .plyr__controls .icon--captions-on+svg,.plyr--fullscreen-active .icon--exit-fullscreen+svg,.plyr--muted .plyr__controls .icon--muted+svg,.plyr [data-plyr=captions],.plyr [data-plyr=fullscreen]{display:none}.plyr--captions-enabled [data-plyr=captions],.plyr--fullscreen-enabled [data-plyr=fullscreen]{display:inline-block}.plyr__tooltip{position:absolute;z-index:2;bottom:100%;margin-bottom:10px;padding:5px 7.5px;opacity:0;background:rgba(0,0,0,.7);border-radius:3px;color:#fff;font-size:14px;line-height:1.3;-webkit-transform:translate(-50%,10px) scale(.8);transform:translate(-50%,10px) scale(.8);-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transition:opacity .2s ease .1s,-webkit-transform .2s ease .1s;transition:opacity .2s ease .1s,-webkit-transform .2s ease .1s;transition:transform .2s ease .1s,opacity .2s ease .1s;transition:transform .2s ease .1s,opacity .2s ease .1s,-webkit-transform .2s ease .1s}.plyr__tooltip:before{content:\\\"\\\";position:absolute;width:0;height:0;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);bottom:-4px;border-right:4px solid transparent;border-top:4px solid rgba(0,0,0,.7);border-left:4px solid transparent;z-index:2}.plyr__tooltip--visible,.plyr button.tab-focus:focus .plyr__tooltip,.plyr button:hover .plyr__tooltip{opacity:1;-webkit-transform:translate(-50%) scale(1);transform:translate(-50%) scale(1)}.plyr button:hover .plyr__tooltip{z-index:3}.plyr__controls button:first-child .plyr__tooltip{left:0;-webkit-transform:translateY(10px) scale(.8);transform:translateY(10px) scale(.8);-webkit-transform-origin:0 100%;transform-origin:0 100%}.plyr__controls button:first-child .plyr__tooltip:before{left:16px}.plyr__controls button:last-child .plyr__tooltip{right:0;-webkit-transform:translateY(10px) scale(.8);transform:translateY(10px) scale(.8);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}.plyr__controls button:last-child .plyr__tooltip:before{left:auto;right:16px;-webkit-transform:translateX(50%);transform:translateX(50%)}.plyr__controls button:first-child .plyr__tooltip--visible,.plyr__controls button:first-child.tab-focus:focus .plyr__tooltip,.plyr__controls button:first-child:hover .plyr__tooltip,.plyr__controls button:last-child .plyr__tooltip--visible,.plyr__controls button:last-child.tab-focus:focus .plyr__tooltip,.plyr__controls button:last-child:hover .plyr__tooltip{-webkit-transform:translate(0) scale(1);transform:translate(0) scale(1)}.plyr__progress{position:relative;display:none;-ms-flex:1;-webkit-box-flex:1;flex:1}.plyr__progress input[type=range]{position:relative;z-index:2}.plyr__progress input[type=range]::-webkit-slider-runnable-track{background:0 0}.plyr__progress input[type=range]::-moz-range-track{background:0 0}.plyr__progress input[type=range]::-ms-fill-upper{background:0 0}.plyr__progress .plyr__tooltip{left:0}.plyr .plyr__progress{display:inline-block}.plyr__progress--buffer,.plyr__progress--played,.plyr__volume--display{position:absolute;left:0;top:50%;width:100%;height:8px;margin:-4px 0 0;padding:0;vertical-align:top;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;border-radius:100px}.plyr__progress--buffer::-webkit-progress-bar,.plyr__progress--played::-webkit-progress-bar,.plyr__volume--display::-webkit-progress-bar{background:0 0}.plyr__progress--buffer::-webkit-progress-value,.plyr__progress--played::-webkit-progress-value,.plyr__volume--display::-webkit-progress-value{background:currentColor;border-radius:100px;min-width:8px}.plyr__progress--buffer::-moz-progress-bar,.plyr__progress--played::-moz-progress-bar,.plyr__volume--display::-moz-progress-bar{background:currentColor;border-radius:100px;min-width:8px}.plyr__progress--buffer::-ms-fill,.plyr__progress--played::-ms-fill,.plyr__volume--display::-ms-fill{border-radius:100px}.plyr__progress--played,.plyr__volume--display{z-index:1;color:#3498db;background:0 0;-webkit-transition:none;transition:none}.plyr__progress--played::-webkit-progress-value,.plyr__volume--display::-webkit-progress-value{min-width:8px;max-width:99%;border-top-right-radius:0;border-bottom-right-radius:0;-webkit-transition:none;transition:none}.plyr__progress--played::-moz-progress-bar,.plyr__volume--display::-moz-progress-bar{min-width:8px;max-width:99%;border-top-right-radius:0;border-bottom-right-radius:0;-webkit-transition:none;transition:none}.plyr__progress--played::-ms-fill,.plyr__volume--display::-ms-fill{display:none}.plyr__progress--buffer::-webkit-progress-value{-webkit-transition:width .2s ease;transition:width .2s ease}.plyr__progress--buffer::-moz-progress-bar{-webkit-transition:width .2s ease;transition:width .2s ease}.plyr__progress--buffer::-ms-fill{-webkit-transition:width .2s ease;transition:width .2s ease}.plyr--video .plyr__progress--buffer,.plyr--video .plyr__volume--display{background:hsla(0,0%,100%,.25)}.plyr--video .plyr__progress--buffer{color:hsla(0,0%,100%,.25)}.plyr--audio .plyr__progress--buffer,.plyr--audio .plyr__volume--display{background:rgba(198,214,219,.66)}.plyr--audio .plyr__progress--buffer{color:rgba(198,214,219,.66)}.plyr--loading .plyr__progress--buffer{-webkit-animation:plyr-progress 1s linear infinite;animation:plyr-progress 1s linear infinite;background-size:25px 25px;background-repeat:repeat-x;background-image:-webkit-linear-gradient(135deg,rgba(0,0,0,.15) 25%,transparent 0,transparent 50%,rgba(0,0,0,.15) 0,rgba(0,0,0,.15) 75%,transparent 0,transparent);background-image:linear-gradient(-45deg,rgba(0,0,0,.15) 25%,transparent 0,transparent 50%,rgba(0,0,0,.15) 0,rgba(0,0,0,.15) 75%,transparent 0,transparent);color:transparent}.plyr--video.plyr--loading .plyr__progress--buffer{background-color:hsla(0,0%,100%,.25)}.plyr--audio.plyr--loading .plyr__progress--buffer{background-color:rgba(198,214,219,.66)}.plyr__time{display:inline-block;vertical-align:middle;font-size:14px}.plyr__time+.plyr__time{display:none}@media (min-width:768px){.plyr__time+.plyr__time{display:inline-block}}.plyr__time+.plyr__time:before{content:\\\"\\\\2044\\\";margin-right:10px}.plyr__volume{display:none}.plyr .plyr__volume{-ms-flex:1;-webkit-box-flex:1;flex:1;position:relative}.plyr .plyr__volume input[type=range]{position:relative;z-index:2}@media (min-width:480px){.plyr .plyr__volume{display:block;max-width:60px}}@media (min-width:768px){.plyr .plyr__volume{max-width:100px}}.plyr--is-ios .plyr__volume,.plyr--is-ios [data-plyr=mute]{display:none!important}.plyr--fullscreen-active{position:fixed;top:0;left:0;right:0;bottom:0;height:100%;width:100%;z-index:10000000;background:#000;border-radius:0!important}.plyr--fullscreen-active video{height:100%}.plyr--fullscreen-active .plyr__video-wrapper{height:100%;width:100%}.plyr--fullscreen-active .plyr__video-embed{overflow:visible}.plyr--fullscreen-active .plyr__controls{position:absolute;bottom:0;left:0;right:0}.plyr--fullscreen-active.plyr--vimeo .plyr__video-wrapper{height:0;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n\n/***/ 312:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(304);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(243)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!../../css-loader/index.js?-autoprefixer!../../postcss-loader/index.js!./plyr.css\", function() {\n\t\t\t\tvar newContent = require(\"!!../../css-loader/index.js?-autoprefixer!../../postcss-loader/index.js!./plyr.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 334:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/media/qknow.412422a0.jpg\";\n\n/***/ },\n\n/***/ 506:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// ==========================================================================\n\t// Plyr\n\t// plyr.js v2.0.11\n\t// https://github.com/selz/plyr\n\t// License: The MIT License (MIT)\n\t// ==========================================================================\n\t// Credits: http://paypal.github.io/accessible-html5-video-player/\n\t// ==========================================================================\n\t\n\t;(function(root, factory) {\n\t    'use strict';\n\t    /*global define,module*/\n\t\n\t    if (typeof module === 'object' && typeof module.exports === 'object') {\n\t        // Node, CommonJS-like\n\t        module.exports = factory(root, document);\n\t    } else if (true) {\n\t        // AMD\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return factory(root, document); }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else {\n\t        // Browser globals (root is window)\n\t        root.plyr = factory(root, document);\n\t    }\n\t}(typeof window !== 'undefined' ? window : this, function(window, document) {\n\t    'use strict';\n\t\n\t    // Globals\n\t    var fullscreen,\n\t    scroll = { x: 0, y: 0 },\n\t\n\t    // Default config\n\t    defaults = {\n\t        enabled:                true,\n\t        debug:                  false,\n\t        autoplay:               false,\n\t        loop:                   false,\n\t        seekTime:               10,\n\t        volume:                 10,\n\t        volumeMin:              0,\n\t        volumeMax:              10,\n\t        volumeStep:             1,\n\t        duration:               null,\n\t        displayDuration:        true,\n\t        loadSprite:             true,\n\t        iconPrefix:             'plyr',\n\t        iconUrl:                'https://cdn.plyr.io/2.0.11/plyr.svg',\n\t        clickToPlay:            true,\n\t        hideControls:           true,\n\t        showPosterOnEnd:        false,\n\t        disableContextMenu:     true,\n\t        keyboardShorcuts:       {\n\t            focused:            true,\n\t            global:             false\n\t        },\n\t        tooltips: {\n\t            controls:           false,\n\t            seek:               true\n\t        },\n\t        selectors: {\n\t            html5:              'video, audio',\n\t            embed:              '[data-type]',\n\t            editable:           'input, textarea, select, [contenteditable]',\n\t            container:          '.plyr',\n\t            controls: {\n\t                container:      null,\n\t                wrapper:        '.plyr__controls'\n\t            },\n\t            labels:             '[data-plyr]',\n\t            buttons: {\n\t                seek:           '[data-plyr=\"seek\"]',\n\t                play:           '[data-plyr=\"play\"]',\n\t                pause:          '[data-plyr=\"pause\"]',\n\t                restart:        '[data-plyr=\"restart\"]',\n\t                rewind:         '[data-plyr=\"rewind\"]',\n\t                forward:        '[data-plyr=\"fast-forward\"]',\n\t                mute:           '[data-plyr=\"mute\"]',\n\t                captions:       '[data-plyr=\"captions\"]',\n\t                fullscreen:     '[data-plyr=\"fullscreen\"]'\n\t            },\n\t            volume: {\n\t                input:          '[data-plyr=\"volume\"]',\n\t                display:        '.plyr__volume--display'\n\t            },\n\t            progress: {\n\t                container:      '.plyr__progress',\n\t                buffer:         '.plyr__progress--buffer',\n\t                played:         '.plyr__progress--played'\n\t            },\n\t            captions:           '.plyr__captions',\n\t            currentTime:        '.plyr__time--current',\n\t            duration:           '.plyr__time--duration'\n\t        },\n\t        classes: {\n\t            setup:              'plyr--setup',\n\t            ready:              'plyr--ready',\n\t            videoWrapper:       'plyr__video-wrapper',\n\t            embedWrapper:       'plyr__video-embed',\n\t            type:               'plyr--{0}',\n\t            stopped:            'plyr--stopped',\n\t            playing:            'plyr--playing',\n\t            muted:              'plyr--muted',\n\t            loading:            'plyr--loading',\n\t            hover:              'plyr--hover',\n\t            tooltip:            'plyr__tooltip',\n\t            hidden:             'plyr__sr-only',\n\t            hideControls:       'plyr--hide-controls',\n\t            isIos:              'plyr--is-ios',\n\t            isTouch:            'plyr--is-touch',\n\t            captions: {\n\t                enabled:        'plyr--captions-enabled',\n\t                active:         'plyr--captions-active'\n\t            },\n\t            fullscreen: {\n\t                enabled:        'plyr--fullscreen-enabled',\n\t                active:         'plyr--fullscreen-active'\n\t            },\n\t            tabFocus:           'tab-focus'\n\t        },\n\t        captions: {\n\t            defaultActive:      false\n\t        },\n\t        fullscreen: {\n\t            enabled:            true,\n\t            fallback:           true,\n\t            allowAudio:         false\n\t        },\n\t        storage: {\n\t            enabled:            true,\n\t            key:                'plyr'\n\t        },\n\t        controls:               ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'fullscreen'],\n\t        i18n: {\n\t            restart:            'Restart',\n\t            rewind:             'Rewind {seektime} secs',\n\t            play:               'Play',\n\t            pause:              'Pause',\n\t            forward:            'Forward {seektime} secs',\n\t            played:             'played',\n\t            buffered:           'buffered',\n\t            currentTime:        'Current time',\n\t            duration:           'Duration',\n\t            volume:             'Volume',\n\t            toggleMute:         'Toggle Mute',\n\t            toggleCaptions:     'Toggle Captions',\n\t            toggleFullscreen:   'Toggle Fullscreen',\n\t            frameTitle:         'Player for {title}'\n\t        },\n\t        types: {\n\t            embed:              ['youtube', 'vimeo', 'soundcloud'],\n\t            html5:              ['video', 'audio']\n\t        },\n\t        // URLs\n\t        urls: {\n\t            vimeo: {\n\t                api:            'https://player.vimeo.com/api/player.js',\n\t            },\n\t            youtube: {\n\t                api:            'https://www.youtube.com/iframe_api'\n\t            },\n\t            soundcloud: {\n\t                api:            'https://w.soundcloud.com/player/api.js'\n\t            }\n\t        },\n\t        // Custom control listeners\n\t        listeners: {\n\t            seek:               null,\n\t            play:               null,\n\t            pause:              null,\n\t            restart:            null,\n\t            rewind:             null,\n\t            forward:            null,\n\t            mute:               null,\n\t            volume:             null,\n\t            captions:           null,\n\t            fullscreen:         null\n\t        },\n\t        // Events to watch on HTML5 media elements\n\t        events:                 ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],\n\t        // Logging\n\t        logPrefix:              '[Plyr]'\n\t    };\n\t\n\t    // Credits: http://paypal.github.io/accessible-html5-video-player/\n\t    // Unfortunately, due to mixed support, UA sniffing is required\n\t    function _browserSniff() {\n\t        var ua = navigator.userAgent,\n\t            name = navigator.appName,\n\t            fullVersion = '' + parseFloat(navigator.appVersion),\n\t            majorVersion = parseInt(navigator.appVersion, 10),\n\t            nameOffset,\n\t            verOffset,\n\t            ix,\n\t            isIE = false,\n\t            isFirefox = false,\n\t            isChrome = false,\n\t            isSafari = false;\n\t\n\t        if ((navigator.appVersion.indexOf('Windows NT') !== -1) && (navigator.appVersion.indexOf('rv:11') !== -1)) {\n\t            // MSIE 11\n\t            isIE = true;\n\t            name = 'IE';\n\t            fullVersion = '11';\n\t        } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {\n\t            // MSIE\n\t            isIE = true;\n\t            name = 'IE';\n\t            fullVersion = ua.substring(verOffset + 5);\n\t        } else if ((verOffset = ua.indexOf('Chrome')) !== -1) {\n\t            // Chrome\n\t            isChrome = true;\n\t            name = 'Chrome';\n\t            fullVersion = ua.substring(verOffset + 7);\n\t        } else if ((verOffset = ua.indexOf('Safari')) !== -1) {\n\t            // Safari\n\t            isSafari = true;\n\t            name = 'Safari';\n\t            fullVersion = ua.substring(verOffset + 7);\n\t            if ((verOffset = ua.indexOf('Version')) !== -1) {\n\t                fullVersion = ua.substring(verOffset + 8);\n\t            }\n\t        } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {\n\t            // Firefox\n\t            isFirefox = true;\n\t            name = 'Firefox';\n\t            fullVersion = ua.substring(verOffset + 8);\n\t        } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {\n\t            // In most other browsers, 'name/version' is at the end of userAgent\n\t            name = ua.substring(nameOffset,verOffset);\n\t            fullVersion = ua.substring(verOffset + 1);\n\t\n\t            if (name.toLowerCase() === name.toUpperCase()) {\n\t                name = navigator.appName;\n\t            }\n\t        }\n\t\n\t        // Trim the fullVersion string at semicolon/space if present\n\t        if ((ix = fullVersion.indexOf(';')) !== -1) {\n\t            fullVersion = fullVersion.substring(0, ix);\n\t        }\n\t        if ((ix = fullVersion.indexOf(' ')) !== -1) {\n\t            fullVersion = fullVersion.substring(0, ix);\n\t        }\n\t\n\t        // Get major version\n\t        majorVersion = parseInt('' + fullVersion, 10);\n\t        if (isNaN(majorVersion)) {\n\t            fullVersion = '' + parseFloat(navigator.appVersion);\n\t            majorVersion = parseInt(navigator.appVersion, 10);\n\t        }\n\t\n\t        // Return data\n\t        return {\n\t            name:       name,\n\t            version:    majorVersion,\n\t            isIE:       isIE,\n\t            isFirefox:  isFirefox,\n\t            isChrome:   isChrome,\n\t            isSafari:   isSafari,\n\t            isIos:      /(iPad|iPhone|iPod)/g.test(navigator.platform),\n\t            isIphone:   /(iPhone|iPod)/g.test(navigator.userAgent),\n\t            isTouch:    'ontouchstart' in document.documentElement\n\t        };\n\t    }\n\t\n\t    // Check for mime type support against a player instance\n\t    // Credits: http://diveintohtml5.info/everything.html\n\t    // Related: http://www.leanbackplyr.com/test/h5mt.html\n\t    function _supportMime(plyr, mimeType) {\n\t        var media = plyr.media;\n\t\n\t        if (plyr.type === 'video') {\n\t            // Check type\n\t            switch (mimeType) {\n\t                case 'video/webm':   return !!(media.canPlayType && media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, ''));\n\t                case 'video/mp4':    return !!(media.canPlayType && media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, ''));\n\t                case 'video/ogg':    return !!(media.canPlayType && media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, ''));\n\t            }\n\t        } else if (plyr.type === 'audio') {\n\t            // Check type\n\t            switch (mimeType) {\n\t                case 'audio/mpeg':   return !!(media.canPlayType && media.canPlayType('audio/mpeg;').replace(/no/, ''));\n\t                case 'audio/ogg':    return !!(media.canPlayType && media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, ''));\n\t                case 'audio/wav':    return !!(media.canPlayType && media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, ''));\n\t            }\n\t        }\n\t\n\t        // If we got this far, we're stuffed\n\t        return false;\n\t    }\n\t\n\t    // Inject a script\n\t    function _injectScript(source) {\n\t        if (document.querySelectorAll('script[src=\"' + source + '\"]').length) {\n\t            return;\n\t        }\n\t\n\t        var tag = document.createElement('script');\n\t        tag.src = source;\n\t        var firstScriptTag = document.getElementsByTagName('script')[0];\n\t        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\t    }\n\t\n\t    // Element exists in an array\n\t    function _inArray(haystack, needle) {\n\t        return Array.prototype.indexOf && (haystack.indexOf(needle) !== -1);\n\t    }\n\t\n\t    // Replace all\n\t    function _replaceAll(string, find, replace) {\n\t        return string.replace(new RegExp(find.replace(/([.*+?\\^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), replace);\n\t    }\n\t\n\t    // Wrap an element\n\t    function _wrap(elements, wrapper) {\n\t        // Convert `elements` to an array, if necessary.\n\t        if (!elements.length) {\n\t            elements = [elements];\n\t        }\n\t\n\t        // Loops backwards to prevent having to clone the wrapper on the\n\t        // first element (see `child` below).\n\t        for (var i = elements.length - 1; i >= 0; i--) {\n\t            var child   = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n\t            var element = elements[i];\n\t\n\t            // Cache the current parent and sibling.\n\t            var parent  = element.parentNode;\n\t            var sibling = element.nextSibling;\n\t\n\t            // Wrap the element (is automatically removed from its current\n\t            // parent).\n\t            child.appendChild(element);\n\t\n\t            // If the element had a sibling, insert the wrapper before\n\t            // the sibling to maintain the HTML structure; otherwise, just\n\t            // append it to the parent.\n\t            if (sibling) {\n\t                parent.insertBefore(child, sibling);\n\t            } else {\n\t                parent.appendChild(child);\n\t            }\n\t\n\t            return child;\n\t        }\n\t    }\n\t\n\t    // Unwrap an element\n\t    // http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/\n\t    /*function _unwrap(wrapper) {\n\t        // Get the element's parent node\n\t        var parent = wrapper.parentNode;\n\t\n\t        // Move all children out of the element\n\t        while (wrapper.firstChild) {\n\t            parent.insertBefore(wrapper.firstChild, wrapper);\n\t        }\n\t\n\t        // Remove the empty element\n\t        parent.removeChild(wrapper);\n\t    }*/\n\t\n\t    // Remove an element\n\t    function _remove(element) {\n\t        if (!element) {\n\t            return;\n\t        }\n\t        element.parentNode.removeChild(element);\n\t    }\n\t\n\t    // Prepend child\n\t    function _prependChild(parent, element) {\n\t        parent.insertBefore(element, parent.firstChild);\n\t    }\n\t\n\t    // Set attributes\n\t    function _setAttributes(element, attributes) {\n\t        for (var key in attributes) {\n\t            element.setAttribute(key, (_is.boolean(attributes[key]) && attributes[key]) ? '' : attributes[key]);\n\t        }\n\t    }\n\t\n\t    // Insert a HTML element\n\t    function _insertElement(type, parent, attributes) {\n\t        // Create a new <element>\n\t        var element = document.createElement(type);\n\t\n\t        // Set all passed attributes\n\t        _setAttributes(element, attributes);\n\t\n\t        // Inject the new element\n\t        _prependChild(parent, element);\n\t    }\n\t\n\t    // Get a classname from selector\n\t    function _getClassname(selector) {\n\t        return selector.replace('.', '');\n\t    }\n\t\n\t    // Toggle class on an element\n\t    function _toggleClass(element, className, state) {\n\t        if (element) {\n\t            if (element.classList) {\n\t                element.classList[state ? 'add' : 'remove'](className);\n\t            } else {\n\t                var name = (' ' + element.className + ' ').replace(/\\s+/g, ' ').replace(' ' + className + ' ', '');\n\t                element.className = name + (state ? ' ' + className : '');\n\t            }\n\t        }\n\t    }\n\t\n\t    // Has class name\n\t    function _hasClass(element, className) {\n\t        if (element) {\n\t            if (element.classList) {\n\t                return element.classList.contains(className);\n\t            } else {\n\t                return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(element.className);\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t\n\t    // Element matches selector\n\t    function _matches(element, selector) {\n\t        var p = Element.prototype;\n\t\n\t        var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {\n\t            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n\t        };\n\t\n\t        return f.call(element, selector);\n\t    }\n\t\n\t    // Bind along with custom handler\n\t    function _proxyListener(element, eventName, userListener, defaultListener, useCapture) {\n\t        _on(element, eventName, function(event) {\n\t            if (userListener) {\n\t                userListener.apply(element, [event]);\n\t            }\n\t            defaultListener.apply(element, [event]);\n\t        }, useCapture);\n\t    }\n\t\n\t    // Toggle event listener\n\t    function _toggleListener(element, events, callback, toggle, useCapture) {\n\t        var eventList = events.split(' ');\n\t\n\t        // Whether the listener is a capturing listener or not\n\t        // Default to false\n\t        if (!_is.boolean(useCapture)) {\n\t            useCapture = false;\n\t        }\n\t\n\t        // If a nodelist is passed, call itself on each node\n\t        if (element instanceof NodeList) {\n\t            for (var x = 0; x < element.length; x++) {\n\t                if (element[x] instanceof Node) {\n\t                    _toggleListener(element[x], arguments[1], arguments[2], arguments[3]);\n\t                }\n\t            }\n\t            return;\n\t        }\n\t\n\t        // If a single node is passed, bind the event listener\n\t        for (var i = 0; i < eventList.length; i++) {\n\t            element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);\n\t        }\n\t    }\n\t\n\t    // Bind event\n\t    function _on(element, events, callback, useCapture) {\n\t        if (element) {\n\t            _toggleListener(element, events, callback, true, useCapture);\n\t        }\n\t    }\n\t\n\t    // Unbind event\n\t    /*function _off(element, events, callback, useCapture) {\n\t        if (element) {\n\t            _toggleListener(element, events, callback, false, useCapture);\n\t        }\n\t    }*/\n\t\n\t    // Trigger event\n\t    function _event(element, type, bubbles, properties) {\n\t        // Bail if no element\n\t        if (!element || !type) {\n\t            return;\n\t        }\n\t\n\t        // Default bubbles to false\n\t        if (!_is.boolean(bubbles)) {\n\t            bubbles = false;\n\t        }\n\t\n\t        // Create and dispatch the event\n\t        var event = new CustomEvent(type, {\n\t            bubbles:    bubbles,\n\t            detail:     properties\n\t        });\n\t\n\t        // Dispatch the event\n\t        element.dispatchEvent(event);\n\t    }\n\t\n\t    // Toggle aria-pressed state on a toggle button\n\t    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n\t    function _toggleState(target, state) {\n\t        // Bail if no target\n\t        if (!target) {\n\t            return;\n\t        }\n\t\n\t        // Get state\n\t        state = (_is.boolean(state) ? state : !target.getAttribute('aria-pressed'));\n\t\n\t        // Set the attribute on target\n\t        target.setAttribute('aria-pressed', state);\n\t\n\t        return state;\n\t    }\n\t\n\t    // Get percentage\n\t    function _getPercentage(current, max) {\n\t        if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {\n\t            return 0;\n\t        }\n\t        return ((current / max) * 100).toFixed(2);\n\t    }\n\t\n\t    // Deep extend/merge destination object with N more objects\n\t    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n\t    // Removed call to arguments.callee (used explicit function name instead)\n\t    function _extend() {\n\t        // Get arguments\n\t        var objects = arguments;\n\t\n\t        // Bail if nothing to merge\n\t        if (!objects.length) {\n\t            return;\n\t        }\n\t\n\t        // Return first if specified but nothing to merge\n\t        if (objects.length === 1) {\n\t            return objects[0];\n\t        }\n\t\n\t        // First object is the destination\n\t        var destination = Array.prototype.shift.call(objects),\n\t            length      = objects.length;\n\t\n\t        // Loop through all objects to merge\n\t        for (var i = 0; i < length; i++) {\n\t            var source = objects[i];\n\t\n\t            for (var property in source) {\n\t                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n\t                    destination[property] = destination[property] || {};\n\t                    _extend(destination[property], source[property]);\n\t                } else {\n\t                    destination[property] = source[property];\n\t                }\n\t            }\n\t        }\n\t\n\t        return destination;\n\t    }\n\t\n\t    // Check variable types\n\t    var _is = {\n\t        object: function(input) {\n\t            return input !== null && typeof(input) === 'object';\n\t        },\n\t        array: function(input) {\n\t            return input !== null && (typeof(input) === 'object' && input.constructor === Array);\n\t        },\n\t        number: function(input) {\n\t            return input !== null && (typeof(input) === 'number' && !isNaN(input - 0) || (typeof input === 'object' && input.constructor === Number));\n\t        },\n\t        string: function(input) {\n\t            return input !== null && (typeof input === 'string' || (typeof input === 'object' && input.constructor === String));\n\t        },\n\t        boolean: function(input) {\n\t            return input !== null && typeof input === 'boolean';\n\t        },\n\t        nodeList: function(input) {\n\t            return input !== null && input instanceof NodeList;\n\t        },\n\t        htmlElement: function(input) {\n\t            return input !== null && input instanceof HTMLElement;\n\t        },\n\t        function: function(input) {\n\t            return input !== null && typeof input === 'function';\n\t        },\n\t        undefined: function(input) {\n\t            return input !== null && typeof input === 'undefined';\n\t        }\n\t    };\n\t\n\t    // Parse YouTube ID from url\n\t    function _parseYouTubeId(url) {\n\t        var regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\n\t        return (url.match(regex)) ? RegExp.$2 : url;\n\t    }\n\t\n\t    // Parse Vimeo ID from url\n\t    function _parseVimeoId(url) {\n\t        var regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n\t        return (url.match(regex)) ? RegExp.$2 : url;\n\t    }\n\t\n\t    // Fullscreen API\n\t    function _fullscreen() {\n\t        var fullscreen = {\n\t                supportsFullScreen: false,\n\t                isFullScreen: function() { return false; },\n\t                requestFullScreen: function() {},\n\t                cancelFullScreen: function() {},\n\t                fullScreenEventName: '',\n\t                element: null,\n\t                prefix: ''\n\t            },\n\t            browserPrefixes = 'webkit o moz ms khtml'.split(' ');\n\t\n\t        // Check for native support\n\t        if (!_is.undefined(document.cancelFullScreen)) {\n\t            fullscreen.supportsFullScreen = true;\n\t        } else {\n\t            // Check for fullscreen support by vendor prefix\n\t            for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {\n\t                fullscreen.prefix = browserPrefixes[i];\n\t\n\t                if (!_is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {\n\t                    fullscreen.supportsFullScreen = true;\n\t                    break;\n\t                } else if (!_is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {\n\t                    // Special case for MS (when isn't it?)\n\t                    fullscreen.prefix = 'ms';\n\t                    fullscreen.supportsFullScreen = true;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t\n\t        // Update methods to do something useful\n\t        if (fullscreen.supportsFullScreen) {\n\t            // Yet again Microsoft awesomeness,\n\t            // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n\t            fullscreen.fullScreenEventName = (fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange');\n\t\n\t            fullscreen.isFullScreen = function(element) {\n\t                if (_is.undefined(element)) {\n\t                    element = document.body;\n\t                }\n\t                switch (this.prefix) {\n\t                    case '':\n\t                        return document.fullscreenElement === element;\n\t                    case 'moz':\n\t                        return document.mozFullScreenElement === element;\n\t                    default:\n\t                        return document[this.prefix + 'FullscreenElement'] === element;\n\t                }\n\t            };\n\t            fullscreen.requestFullScreen = function(element) {\n\t                if (_is.undefined(element)) {\n\t                    element = document.body;\n\t                }\n\t                return (this.prefix === '') ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n\t            };\n\t            fullscreen.cancelFullScreen = function() {\n\t                return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n\t            };\n\t            fullscreen.element = function() {\n\t                return (this.prefix === '') ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];\n\t            };\n\t        }\n\t\n\t        return fullscreen;\n\t    }\n\t\n\t    // Local storage\n\t    var _storage = {\n\t        supported: (function() {\n\t            if (!('localStorage' in window)) {\n\t                return false;\n\t            }\n\t\n\t            // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n\t            // see: https://github.com/Selz/plyr/issues/131\n\t            try {\n\t                // Add test item\n\t                window.localStorage.setItem('___test', 'OK');\n\t\n\t                // Get the test item\n\t                var result = window.localStorage.getItem('___test');\n\t\n\t                // Clean up\n\t                window.localStorage.removeItem('___test');\n\t\n\t                // Check if value matches\n\t                return (result === 'OK');\n\t            }\n\t            catch (e) {\n\t                return false;\n\t            }\n\t\n\t            return false;\n\t        })()\n\t    };\n\t\n\t    // Player instance\n\t    function Plyr(media, config) {\n\t        var plyr = this,\n\t        timers = {},\n\t        api;\n\t\n\t        // Set media\n\t        plyr.media = media;\n\t        var original = media.cloneNode(true);\n\t\n\t        // Trigger events, with plyr instance passed\n\t        function _triggerEvent(element, type, bubbles, properties) {\n\t            _event(element, type, bubbles, _extend({}, properties, {\n\t                plyr: api\n\t            }));\n\t        }\n\t\n\t        // Debugging\n\t        function _console(type, args) {\n\t            if (config.debug && window.console) {\n\t                args = Array.prototype.slice.call(args);\n\t\n\t                if (_is.string(config.logPrefix) && config.logPrefix.length) {\n\t                    args.unshift(config.logPrefix);\n\t                }\n\t\n\t                console[type].apply(console, args);\n\t            }\n\t        }\n\t        var _log = function() { _console('log', arguments) },\n\t            _warn = function() { _console('warn', arguments) };\n\t\n\t        // Log config options\n\t        _log('Config', config);\n\t\n\t        // Get icon URL\n\t        function _getIconUrl() {\n\t            return {\n\t                url:        config.iconUrl,\n\t                absolute:   (config.iconUrl.indexOf(\"http\") === 0) || plyr.browser.isIE\n\t            };\n\t        }\n\t\n\t        // Build the default HTML\n\t        function _buildControls() {\n\t            // Create html array\n\t            var html        = [],\n\t                iconUrl     = _getIconUrl(),\n\t                iconPath    = (!iconUrl.absolute ? iconUrl.url : '') + '#' + config.iconPrefix;\n\t\n\t            // Larger overlaid play button\n\t            if (_inArray(config.controls, 'play-large')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"play\" class=\"plyr__play-large\">',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-play\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.play + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            html.push('<div class=\"plyr__controls\">');\n\t\n\t            // Restart button\n\t            if (_inArray(config.controls, 'restart')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"restart\">',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-restart\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.restart + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Rewind button\n\t            if (_inArray(config.controls, 'rewind')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"rewind\">',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-rewind\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.rewind + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Play Pause button\n\t            // TODO: This should be a toggle button really?\n\t            if (_inArray(config.controls, 'play')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"play\">',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-play\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.play + '</span>',\n\t                    '</button>',\n\t                    '<button type=\"button\" data-plyr=\"pause\">',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-pause\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.pause + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Fast forward button\n\t            if (_inArray(config.controls, 'fast-forward')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"fast-forward\">',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-fast-forward\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.forward + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Progress\n\t            if (_inArray(config.controls, 'progress')) {\n\t                // Create progress\n\t                html.push('<span class=\"plyr__progress\">',\n\t                    '<label for=\"seek{id}\" class=\"plyr__sr-only\">Seek</label>',\n\t                    '<input id=\"seek{id}\" class=\"plyr__progress--seek\" type=\"range\" min=\"0\" max=\"100\" step=\"0.1\" value=\"0\" data-plyr=\"seek\">',\n\t                    '<progress class=\"plyr__progress--played\" max=\"100\" value=\"0\" role=\"presentation\"></progress>',\n\t                    '<progress class=\"plyr__progress--buffer\" max=\"100\" value=\"0\">',\n\t                        '<span>0</span>% ' + config.i18n.buffered,\n\t                    '</progress>');\n\t\n\t                // Seek tooltip\n\t                if (config.tooltips.seek) {\n\t                    html.push('<span class=\"plyr__tooltip\">00:00</span>');\n\t                }\n\t\n\t                // Close\n\t                html.push('</span>');\n\t            }\n\t\n\t            // Media current time display\n\t            if (_inArray(config.controls, 'current-time')) {\n\t                html.push(\n\t                    '<span class=\"plyr__time\">',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.currentTime + '</span>',\n\t                        '<span class=\"plyr__time--current\">00:00</span>',\n\t                    '</span>'\n\t                );\n\t            }\n\t\n\t            // Media duration display\n\t            if (_inArray(config.controls, 'duration')) {\n\t                html.push(\n\t                    '<span class=\"plyr__time\">',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.duration + '</span>',\n\t                        '<span class=\"plyr__time--duration\">00:00</span>',\n\t                    '</span>'\n\t                );\n\t            }\n\t\n\t            // Toggle mute button\n\t            if (_inArray(config.controls, 'mute')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"mute\">',\n\t                        '<svg class=\"icon--muted\"><use xlink:href=\"' + iconPath + '-muted\" /></svg>',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-volume\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleMute + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Volume range control\n\t            if (_inArray(config.controls, 'volume')) {\n\t                html.push(\n\t                    '<span class=\"plyr__volume\">',\n\t                        '<label for=\"volume{id}\" class=\"plyr__sr-only\">' + config.i18n.volume + '</label>',\n\t                        '<input id=\"volume{id}\" class=\"plyr__volume--input\" type=\"range\" min=\"' + config.volumeMin + '\" max=\"' + config.volumeMax + '\" value=\"' + config.volume + '\" data-plyr=\"volume\">',\n\t                        '<progress class=\"plyr__volume--display\" max=\"' + config.volumeMax + '\" value=\"' + config.volumeMin + '\" role=\"presentation\"></progress>',\n\t                    '</span>'\n\t                );\n\t            }\n\t\n\t            // Toggle captions button\n\t            if (_inArray(config.controls, 'captions')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"captions\">',\n\t                        '<svg class=\"icon--captions-on\"><use xlink:href=\"' + iconPath + '-captions-on\" /></svg>',\n\t                        '<svg><use xlink:href=\"' + iconPath+ '-captions-off\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleCaptions + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Toggle fullscreen button\n\t            if (_inArray(config.controls, 'fullscreen')) {\n\t                html.push(\n\t                    '<button type=\"button\" data-plyr=\"fullscreen\">',\n\t                        '<svg class=\"icon--exit-fullscreen\"><use xlink:href=\"' + iconPath + '-exit-fullscreen\" /></svg>',\n\t                        '<svg><use xlink:href=\"' + iconPath + '-enter-fullscreen\" /></svg>',\n\t                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleFullscreen + '</span>',\n\t                    '</button>'\n\t                );\n\t            }\n\t\n\t            // Close everything\n\t            html.push('</div>');\n\t\n\t            return html.join('');\n\t        }\n\t\n\t        // Setup fullscreen\n\t        function _setupFullscreen() {\n\t            if (!plyr.supported.full) {\n\t                return;\n\t            }\n\t\n\t            if ((plyr.type !== 'audio' || config.fullscreen.allowAudio) && config.fullscreen.enabled) {\n\t                // Check for native support\n\t                var nativeSupport = fullscreen.supportsFullScreen;\n\t\n\t                if (nativeSupport || (config.fullscreen.fallback && !_inFrame())) {\n\t                    _log((nativeSupport ? 'Native' : 'Fallback') + ' fullscreen enabled');\n\t\n\t                    // Add styling hook\n\t                    _toggleClass(plyr.container, config.classes.fullscreen.enabled, true);\n\t                } else {\n\t                    _log('Fullscreen not supported and fallback disabled');\n\t                }\n\t\n\t                // Toggle state\n\t                if (plyr.buttons && plyr.buttons.fullscreen) {\n\t                    _toggleState(plyr.buttons.fullscreen, false);\n\t                }\n\t\n\t                // Setup focus trap\n\t                _focusTrap();\n\t            }\n\t        }\n\t\n\t        // Setup captions\n\t        function _setupCaptions() {\n\t            // Bail if not HTML5 video\n\t            if (plyr.type !== 'video') {\n\t                return;\n\t            }\n\t\n\t            // Inject the container\n\t            if (!_getElement(config.selectors.captions)) {\n\t                plyr.videoContainer.insertAdjacentHTML('afterbegin', '<div class=\"' + _getClassname(config.selectors.captions) + '\"></div>');\n\t            }\n\t\n\t            // Determine if HTML5 textTracks is supported\n\t            plyr.usingTextTracks = false;\n\t            if (plyr.media.textTracks) {\n\t                plyr.usingTextTracks = true;\n\t            }\n\t\n\t            // Get URL of caption file if exists\n\t            var captionSrc = '',\n\t                kind,\n\t                children = plyr.media.childNodes;\n\t\n\t            for (var i = 0; i < children.length; i++) {\n\t                if (children[i].nodeName.toLowerCase() === 'track') {\n\t                    kind = children[i].kind;\n\t                    if (kind === 'captions' || kind === 'subtitles') {\n\t                        captionSrc = children[i].getAttribute('src');\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Record if caption file exists or not\n\t            plyr.captionExists = true;\n\t            if (captionSrc === '') {\n\t                plyr.captionExists = false;\n\t                _log('No caption track found');\n\t            } else {\n\t                _log('Caption track found; URI: ' + captionSrc);\n\t            }\n\t\n\t            // If no caption file exists, hide container for caption text\n\t            if (!plyr.captionExists) {\n\t                _toggleClass(plyr.container, config.classes.captions.enabled);\n\t            } else {\n\t                // Turn off native caption rendering to avoid double captions\n\t                // This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below\n\t                var tracks = plyr.media.textTracks;\n\t                for (var x = 0; x < tracks.length; x++) {\n\t                    tracks[x].mode = 'hidden';\n\t                }\n\t\n\t                // Enable UI\n\t                _showCaptions(plyr);\n\t\n\t                // Disable unsupported browsers than report false positive\n\t                // Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144\n\t                if ((plyr.browser.isIE && plyr.browser.version >= 10) ||\n\t                    (plyr.browser.isFirefox && plyr.browser.version >= 31)) {\n\t\n\t                    // Debugging\n\t                    _log('Detected browser with known TextTrack issues - using manual fallback');\n\t\n\t                    // Set to false so skips to 'manual' captioning\n\t                    plyr.usingTextTracks = false;\n\t                }\n\t\n\t                // Rendering caption tracks\n\t                // Native support required - http://caniuse.com/webvtt\n\t                if (plyr.usingTextTracks) {\n\t                    _log('TextTracks supported');\n\t\n\t                    for (var y = 0; y < tracks.length; y++) {\n\t                        var track = tracks[y];\n\t\n\t                        if (track.kind === 'captions' || track.kind === 'subtitles') {\n\t                            _on(track, 'cuechange', function() {\n\t                                // Display a cue, if there is one\n\t                                if (this.activeCues[0] && 'text' in this.activeCues[0]) {\n\t                                    _setCaption(this.activeCues[0].getCueAsHTML());\n\t                                } else {\n\t                                    _setCaption();\n\t                                }\n\t                            });\n\t                        }\n\t                    }\n\t                } else {\n\t                    // Caption tracks not natively supported\n\t                    _log('TextTracks not supported so rendering captions manually');\n\t\n\t                    // Render captions from array at appropriate time\n\t                    plyr.currentCaption = '';\n\t                    plyr.captions = [];\n\t\n\t                    if (captionSrc !== '') {\n\t                        // Create XMLHttpRequest Object\n\t                        var xhr = new XMLHttpRequest();\n\t\n\t                        xhr.onreadystatechange = function() {\n\t                            if (xhr.readyState === 4) {\n\t                                if (xhr.status === 200) {\n\t                                    var captions = [],\n\t                                        caption,\n\t                                        req = xhr.responseText;\n\t\n\t                                    //According to webvtt spec, line terminator consists of one of the following\n\t                                    // CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)\n\t                                    var lineSeparator = '\\r\\n';\n\t                                    if(req.indexOf(lineSeparator+lineSeparator) === -1) {\n\t                                        if(req.indexOf('\\r\\r') !== -1){\n\t                                            lineSeparator = '\\r';\n\t                                        } else {\n\t                                            lineSeparator = '\\n';\n\t                                        }\n\t                                    }\n\t\n\t                                    captions = req.split(lineSeparator+lineSeparator);\n\t\n\t                                    for (var r = 0; r < captions.length; r++) {\n\t                                        caption = captions[r];\n\t                                        plyr.captions[r] = [];\n\t\n\t                                        // Get the parts of the captions\n\t                                        var parts = caption.split(lineSeparator),\n\t                                            index = 0;\n\t\n\t                                        // Incase caption numbers are added\n\t                                        if (parts[index].indexOf(\":\") === -1) {\n\t                                            index = 1;\n\t                                        }\n\t\n\t                                        plyr.captions[r] = [parts[index], parts[index + 1]];\n\t                                    }\n\t\n\t                                    // Remove first element ('VTT')\n\t                                    plyr.captions.shift();\n\t\n\t                                    _log('Successfully loaded the caption file via AJAX');\n\t                                } else {\n\t                                    _warn(config.logPrefix + 'There was a problem loading the caption file via AJAX');\n\t                                }\n\t                            }\n\t                        };\n\t\n\t                        xhr.open('get', captionSrc, true);\n\t\n\t                        xhr.send();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        // Set the current caption\n\t        function _setCaption(caption) {\n\t            /* jshint unused:false */\n\t            var container = _getElement(config.selectors.captions),\n\t                content = document.createElement('span');\n\t\n\t            // Empty the container\n\t            container.innerHTML = '';\n\t\n\t            // Default to empty\n\t            if (_is.undefined(caption)) {\n\t                caption = '';\n\t            }\n\t\n\t            // Set the span content\n\t            if (_is.string(caption)) {\n\t                content.innerHTML = caption.trim();\n\t            } else {\n\t                content.appendChild(caption);\n\t            }\n\t\n\t            // Set new caption text\n\t            container.appendChild(content);\n\t\n\t            // Force redraw (for Safari)\n\t            var redraw = container.offsetHeight;\n\t        }\n\t\n\t        // Captions functions\n\t        // Seek the manual caption time and update UI\n\t        function _seekManualCaptions(time) {\n\t            // Utilities for caption time codes\n\t            function _timecodeCommon(tc, pos) {\n\t                var tcpair = [];\n\t                tcpair = tc.split(' --> ');\n\t                for(var i = 0; i < tcpair.length; i++) {\n\t                    // WebVTT allows for extra meta data after the timestamp line\n\t                    // So get rid of this if it exists\n\t                    tcpair[i] = tcpair[i].replace(/(\\d+:\\d+:\\d+\\.\\d+).*/, \"$1\");\n\t                }\n\t                return _subTcSecs(tcpair[pos]);\n\t            }\n\t            function _timecodeMin(tc) {\n\t                return _timecodeCommon(tc, 0);\n\t            }\n\t            function _timecodeMax(tc) {\n\t                return _timecodeCommon(tc, 1);\n\t            }\n\t            function _subTcSecs(tc) {\n\t                if (tc === null || tc === undefined) {\n\t                    return 0;\n\t                } else {\n\t                    var tc1 = [],\n\t                        tc2 = [],\n\t                        seconds;\n\t                    tc1 = tc.split(',');\n\t                    tc2 = tc1[0].split(':');\n\t                    seconds = Math.floor(tc2[0]*60*60) + Math.floor(tc2[1]*60) + Math.floor(tc2[2]);\n\t                    return seconds;\n\t                }\n\t            }\n\t\n\t            // If it's not video, or we're using textTracks, bail.\n\t            if (plyr.usingTextTracks || plyr.type !== 'video' || !plyr.supported.full) {\n\t                return;\n\t            }\n\t\n\t            // Reset subcount\n\t            plyr.subcount = 0;\n\t\n\t            // Check time is a number, if not use currentTime\n\t            // IE has a bug where currentTime doesn't go to 0\n\t            // https://twitter.com/Sam_Potts/status/573715746506731521\n\t            time = _is.number(time) ? time : plyr.media.currentTime;\n\t\n\t            // If there's no subs available, bail\n\t            if (!plyr.captions[plyr.subcount]) {\n\t                return;\n\t            }\n\t\n\t            while (_timecodeMax(plyr.captions[plyr.subcount][0]) < time.toFixed(1)) {\n\t                plyr.subcount++;\n\t                if (plyr.subcount > plyr.captions.length - 1) {\n\t                    plyr.subcount = plyr.captions.length - 1;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            // Check if the next caption is in the current time range\n\t            if (plyr.media.currentTime.toFixed(1) >= _timecodeMin(plyr.captions[plyr.subcount][0]) &&\n\t                plyr.media.currentTime.toFixed(1) <= _timecodeMax(plyr.captions[plyr.subcount][0])) {\n\t                    plyr.currentCaption = plyr.captions[plyr.subcount][1];\n\t\n\t                // Render the caption\n\t                _setCaption(plyr.currentCaption);\n\t            } else {\n\t                _setCaption();\n\t            }\n\t        }\n\t\n\t        // Display captions container and button (for initialization)\n\t        function _showCaptions() {\n\t            // If there's no caption toggle, bail\n\t            if (!plyr.buttons.captions) {\n\t                return;\n\t            }\n\t\n\t            _toggleClass(plyr.container, config.classes.captions.enabled, true);\n\t\n\t            // Try to load the value from storage\n\t            var active = plyr.storage.captionsEnabled;\n\t\n\t            // Otherwise fall back to the default config\n\t            if (!_is.boolean(active)) {\n\t                active = config.captions.defaultActive;\n\t            }\n\t\n\t            if (active) {\n\t                _toggleClass(plyr.container, config.classes.captions.active, true);\n\t                _toggleState(plyr.buttons.captions, true);\n\t            }\n\t        }\n\t\n\t        // Find all elements\n\t        function _getElements(selector) {\n\t            return plyr.container.querySelectorAll(selector);\n\t        }\n\t\n\t        // Find a single element\n\t        function _getElement(selector) {\n\t            return _getElements(selector)[0];\n\t        }\n\t\n\t        // Determine if we're in an iframe\n\t        function _inFrame() {\n\t            try {\n\t                return window.self !== window.top;\n\t            }\n\t            catch (e) {\n\t                return true;\n\t            }\n\t        }\n\t\n\t        // Trap focus inside container\n\t        function _focusTrap() {\n\t            var tabbables   = _getElements('input:not([disabled]), button:not([disabled])'),\n\t                first       = tabbables[0],\n\t                last        = tabbables[tabbables.length - 1];\n\t\n\t            function _checkFocus(event) {\n\t                // If it is TAB\n\t                if (event.which === 9 && plyr.isFullscreen) {\n\t                    if (event.target === last && !event.shiftKey) {\n\t                        // Move focus to first element that can be tabbed if Shift isn't used\n\t                        event.preventDefault();\n\t                        first.focus();\n\t                    } else if (event.target === first && event.shiftKey) {\n\t                        // Move focus to last element that can be tabbed if Shift is used\n\t                        event.preventDefault();\n\t                        last.focus();\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Bind the handler\n\t            _on(plyr.container, 'keydown', _checkFocus);\n\t        }\n\t\n\t        // Add elements to HTML5 media (source, tracks, etc)\n\t        function _insertChildElements(type, attributes) {\n\t            if (_is.string(attributes)) {\n\t               _insertElement(type, plyr.media, { src: attributes });\n\t            } else if (attributes.constructor === Array) {\n\t                for (var i = attributes.length - 1; i >= 0; i--) {\n\t                    _insertElement(type, plyr.media, attributes[i]);\n\t                }\n\t            }\n\t        }\n\t\n\t        // Insert controls\n\t        function _injectControls() {\n\t            // Sprite\n\t            if (config.loadSprite) {\n\t                var iconUrl = _getIconUrl();\n\t\n\t                // Only load external sprite using AJAX\n\t                if (iconUrl.absolute) {\n\t                    _log('AJAX loading absolute SVG sprite' + (plyr.browser.isIE ? ' (due to IE)' : ''));\n\t                    loadSprite(iconUrl.url, \"sprite-plyr\");\n\t                } else {\n\t                    _log('Sprite will be used as external resource directly');\n\t                }\n\t            }\n\t\n\t            // Make a copy of the html\n\t            var html = config.html;\n\t\n\t            // Insert custom video controls\n\t            _log('Injecting custom controls');\n\t\n\t            // If no controls are specified, create default\n\t            if (!html) {\n\t                html = _buildControls();\n\t            }\n\t\n\t            // Replace seek time instances\n\t            html = _replaceAll(html, '{seektime}', config.seekTime);\n\t\n\t            // Replace all id references with random numbers\n\t            html = _replaceAll(html, '{id}', Math.floor(Math.random() * (10000)));\n\t\n\t            // Controls container\n\t            var target;\n\t\n\t            // Inject to custom location\n\t            if (_is.string(config.selectors.controls.container)) {\n\t                target = document.querySelector(config.selectors.controls.container);\n\t            }\n\t\n\t            // Inject into the container by default\n\t            if (!_is.htmlElement(target)) {\n\t                target = plyr.container\n\t            }\n\t\n\t            // Inject controls HTML\n\t            target.insertAdjacentHTML('beforeend', html);\n\t\n\t            // Setup tooltips\n\t            if (config.tooltips.controls) {\n\t                var labels = _getElements([config.selectors.controls.wrapper, ' ', config.selectors.labels, ' .', config.classes.hidden].join(''));\n\t\n\t                for (var i = labels.length - 1; i >= 0; i--) {\n\t                    var label = labels[i];\n\t\n\t                    _toggleClass(label, config.classes.hidden, false);\n\t                    _toggleClass(label, config.classes.tooltip, true);\n\t                }\n\t            }\n\t        }\n\t\n\t        // Find the UI controls and store references\n\t        function _findElements() {\n\t            try {\n\t                plyr.controls                 = _getElement(config.selectors.controls.wrapper);\n\t\n\t                // Buttons\n\t                plyr.buttons = {};\n\t                plyr.buttons.seek             = _getElement(config.selectors.buttons.seek);\n\t                plyr.buttons.play             = _getElements(config.selectors.buttons.play);\n\t                plyr.buttons.pause            = _getElement(config.selectors.buttons.pause);\n\t                plyr.buttons.restart          = _getElement(config.selectors.buttons.restart);\n\t                plyr.buttons.rewind           = _getElement(config.selectors.buttons.rewind);\n\t                plyr.buttons.forward          = _getElement(config.selectors.buttons.forward);\n\t                plyr.buttons.fullscreen       = _getElement(config.selectors.buttons.fullscreen);\n\t\n\t                // Inputs\n\t                plyr.buttons.mute             = _getElement(config.selectors.buttons.mute);\n\t                plyr.buttons.captions         = _getElement(config.selectors.buttons.captions);\n\t\n\t                // Progress\n\t                plyr.progress = {};\n\t                plyr.progress.container       = _getElement(config.selectors.progress.container);\n\t\n\t                // Progress - Buffering\n\t                plyr.progress.buffer          = {};\n\t                plyr.progress.buffer.bar      = _getElement(config.selectors.progress.buffer);\n\t                plyr.progress.buffer.text     = plyr.progress.buffer.bar && plyr.progress.buffer.bar.getElementsByTagName('span')[0];\n\t\n\t                // Progress - Played\n\t                plyr.progress.played          = _getElement(config.selectors.progress.played);\n\t\n\t                // Seek tooltip\n\t                plyr.progress.tooltip         = plyr.progress.container && plyr.progress.container.querySelector('.' + config.classes.tooltip);\n\t\n\t                // Volume\n\t                plyr.volume                   = {};\n\t                plyr.volume.input             = _getElement(config.selectors.volume.input);\n\t                plyr.volume.display           = _getElement(config.selectors.volume.display);\n\t\n\t                // Timing\n\t                plyr.duration                 = _getElement(config.selectors.duration);\n\t                plyr.currentTime              = _getElement(config.selectors.currentTime);\n\t                plyr.seekTime                 = _getElements(config.selectors.seekTime);\n\t\n\t                return true;\n\t            }\n\t            catch(e) {\n\t                _warn('It looks like there is a problem with your controls HTML');\n\t\n\t                // Restore native video controls\n\t                _toggleNativeControls(true);\n\t\n\t                return false;\n\t            }\n\t        }\n\t\n\t        // Toggle style hook\n\t        function _toggleStyleHook() {\n\t            _toggleClass(plyr.container, config.selectors.container.replace('.', ''), plyr.supported.full);\n\t        }\n\t\n\t        // Toggle native controls\n\t        function _toggleNativeControls(toggle) {\n\t            if (toggle && _inArray(config.types.html5, plyr.type)) {\n\t                plyr.media.setAttribute('controls', '');\n\t            } else {\n\t                plyr.media.removeAttribute('controls');\n\t            }\n\t        }\n\t\n\t        // Setup aria attribute for play and iframe title\n\t        function _setTitle(iframe) {\n\t            // Find the current text\n\t            var label = config.i18n.play;\n\t\n\t            // If there's a media title set, use that for the label\n\t            if (_is.string(config.title) && config.title.length) {\n\t                label += ', ' + config.title;\n\t\n\t                // Set container label\n\t                plyr.container.setAttribute('aria-label', config.title);\n\t            }\n\t\n\t            // If there's a play button, set label\n\t            if (plyr.supported.full && plyr.buttons.play) {\n\t                for (var i = plyr.buttons.play.length - 1; i >= 0; i--) {\n\t                    plyr.buttons.play[i].setAttribute('aria-label', label);\n\t                }\n\t            }\n\t\n\t            // Set iframe title\n\t            // https://github.com/Selz/plyr/issues/124\n\t            if (_is.htmlElement(iframe)) {\n\t                iframe.setAttribute('title', config.i18n.frameTitle.replace('{title}', config.title));\n\t            }\n\t        }\n\t\n\t        // Setup localStorage\n\t        function _setupStorage() {\n\t            var value = null;\n\t            plyr.storage = {};\n\t\n\t            // Bail if we don't have localStorage support or it's disabled\n\t            if (!_storage.supported || !config.storage.enabled) {\n\t                return;\n\t            }\n\t\n\t            // Clean up old volume\n\t            // https://github.com/Selz/plyr/issues/171\n\t            window.localStorage.removeItem('plyr-volume');\n\t\n\t            // load value from the current key\n\t            value = window.localStorage.getItem(config.storage.key);\n\t\n\t            if (!value) {\n\t                // Key wasn't set (or had been cleared), move along\n\t                return;\n\t            } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n\t                // If value is a number, it's probably volume from an older\n\t                // version of plyr. See: https://github.com/Selz/plyr/pull/313\n\t                // Update the key to be JSON\n\t                _updateStorage({volume: parseFloat(value)});\n\t            } else {\n\t                // Assume it's JSON from this or a later version of plyr\n\t                plyr.storage = JSON.parse(value);\n\t            }\n\t        }\n\t\n\t        // Save a value back to local storage\n\t        function _updateStorage(value) {\n\t            // Bail if we don't have localStorage support or it's disabled\n\t            if (!_storage.supported || !config.storage.enabled) {\n\t                return;\n\t            }\n\t\n\t            // Update the working copy of the values\n\t            _extend(plyr.storage, value);\n\t\n\t            // Update storage\n\t            window.localStorage.setItem(config.storage.key, JSON.stringify(plyr.storage));\n\t        }\n\t\n\t        // Setup media\n\t        function _setupMedia() {\n\t            // If there's no media, bail\n\t            if (!plyr.media) {\n\t                _warn('No media element found!');\n\t                return;\n\t            }\n\t\n\t            if (plyr.supported.full) {\n\t                // Add type class\n\t                _toggleClass(plyr.container, config.classes.type.replace('{0}', plyr.type), true);\n\t\n\t                // Add video class for embeds\n\t                // This will require changes if audio embeds are added\n\t                if (_inArray(config.types.embed, plyr.type)) {\n\t                    _toggleClass(plyr.container, config.classes.type.replace('{0}', 'video'), true);\n\t                }\n\t\n\t                // If there's no autoplay attribute, assume the video is stopped and add state class\n\t                _toggleClass(plyr.container, config.classes.stopped, config.autoplay);\n\t\n\t                // Add iOS class\n\t                _toggleClass(plyr.ontainer, config.classes.isIos, plyr.browser.isIos);\n\t\n\t                // Add touch class\n\t                _toggleClass(plyr.container, config.classes.isTouch, plyr.browser.isTouch);\n\t\n\t                // Inject the player wrapper\n\t                if (plyr.type === 'video') {\n\t                    // Create the wrapper div\n\t                    var wrapper = document.createElement('div');\n\t                    wrapper.setAttribute('class', config.classes.videoWrapper);\n\t\n\t                    // Wrap the video in a container\n\t                    _wrap(plyr.media, wrapper);\n\t\n\t                    // Cache the container\n\t                    plyr.videoContainer = wrapper;\n\t                }\n\t            }\n\t\n\t            // Embeds\n\t            if (_inArray(config.types.embed, plyr.type)) {\n\t                _setupEmbed();\n\t            }\n\t        }\n\t\n\t        // Setup YouTube/Vimeo\n\t        function _setupEmbed() {\n\t            var container = document.createElement('div'),\n\t                mediaId,\n\t                id = plyr.type + '-' + Math.floor(Math.random() * (10000));\n\t\n\t            // Parse IDs from URLs if supplied\n\t            switch (plyr.type) {\n\t                case 'youtube':\n\t                    mediaId = _parseYouTubeId(plyr.embedId);\n\t                    break;\n\t\n\t                case 'vimeo':\n\t                    mediaId = _parseVimeoId(plyr.embedId);\n\t                    break;\n\t\n\t                default:\n\t                    mediaId = plyr.embedId;\n\t            }\n\t\n\t            // Remove old containers\n\t            var containers = _getElements('[id^=\"' + plyr.type + '-\"]');\n\t            for (var i = containers.length - 1; i >= 0; i--) {\n\t                _remove(containers[i]);\n\t            }\n\t\n\t            // Add embed class for responsive\n\t            _toggleClass(plyr.media, config.classes.videoWrapper, true);\n\t            _toggleClass(plyr.media, config.classes.embedWrapper, true);\n\t\n\t            if (plyr.type === 'youtube') {\n\t                // Create the YouTube container\n\t                plyr.media.appendChild(container);\n\t\n\t                // Set ID\n\t                container.setAttribute('id', id);\n\t\n\t                // Setup API\n\t                if (_is.object(window.YT)) {\n\t                    _youTubeReady(mediaId, container);\n\t                } else {\n\t                    // Load the API\n\t                    _injectScript(config.urls.youtube.api);\n\t\n\t                    // Setup callback for the API\n\t                    window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\t\n\t                    // Add to queue\n\t                    window.onYouTubeReadyCallbacks.push(function() { _youTubeReady(mediaId, container); });\n\t\n\t                    // Set callback to process queue\n\t                    window.onYouTubeIframeAPIReady = function () {\n\t                        window.onYouTubeReadyCallbacks.forEach(function(callback) { callback(); });\n\t                    };\n\t                }\n\t            } else if (plyr.type === 'vimeo') {\n\t                // Vimeo needs an extra div to hide controls on desktop (which has full support)\n\t                if (plyr.supported.full) {\n\t                    plyr.media.appendChild(container);\n\t                } else {\n\t                    container = plyr.media;\n\t                }\n\t\n\t                // Set ID\n\t                container.setAttribute('id', id);\n\t\n\t                // Load the API if not already\n\t                if (!_is.object(window.Vimeo)) {\n\t                    _injectScript(config.urls.vimeo.api);\n\t\n\t                    // Wait for fragaloop load\n\t                    var vimeoTimer = window.setInterval(function() {\n\t                        if (_is.object(window.Vimeo)) {\n\t                            window.clearInterval(vimeoTimer);\n\t                            _vimeoReady(mediaId, container);\n\t                        }\n\t                    }, 50);\n\t                } else {\n\t                    _vimeoReady(mediaId, container);\n\t                }\n\t            } else if (plyr.type === 'soundcloud') {\n\t                // TODO: Currently unsupported and undocumented\n\t                // Inject the iframe\n\t                var soundCloud = document.createElement('iframe');\n\t\n\t                // Watch for iframe load\n\t                soundCloud.loaded = false;\n\t                _on(soundCloud, 'load', function() { soundCloud.loaded = true; });\n\t\n\t                _setAttributes(soundCloud, {\n\t                    'src':  'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/' + mediaId,\n\t                    'id':   id\n\t                });\n\t\n\t                container.appendChild(soundCloud);\n\t                plyr.media.appendChild(container);\n\t\n\t                // Load the API if not already\n\t                if (!window.SC) {\n\t                    _injectScript(config.urls.soundcloud.api);\n\t                }\n\t\n\t                // Wait for SC load\n\t                var soundCloudTimer = window.setInterval(function() {\n\t                    if (window.SC && soundCloud.loaded) {\n\t                        window.clearInterval(soundCloudTimer);\n\t                        _soundcloudReady.call(soundCloud);\n\t                    }\n\t                }, 50);\n\t            }\n\t        }\n\t\n\t        // When embeds are ready\n\t        function _embedReady() {\n\t            // Setup the UI and call ready if full support\n\t            if (plyr.supported.full) {\n\t                _setupInterface();\n\t                _ready();\n\t            }\n\t\n\t            // Set title\n\t            _setTitle(_getElement('iframe'));\n\t        }\n\t\n\t        // Handle YouTube API ready\n\t        function _youTubeReady(videoId, container) {\n\t            // Setup instance\n\t            // https://developers.google.com/youtube/iframe_api_reference\n\t            plyr.embed = new window.YT.Player(container.id, {\n\t                videoId: videoId,\n\t                playerVars: {\n\t                    autoplay:       (config.autoplay ? 1 : 0),\n\t                    controls:       (plyr.supported.full ? 0 : 1),\n\t                    rel:            0,\n\t                    showinfo:       0,\n\t                    iv_load_policy: 3,\n\t                    cc_load_policy: (config.captions.defaultActive ? 1 : 0),\n\t                    cc_lang_pref:   'en',\n\t                    wmode:          'transparent',\n\t                    modestbranding: 1,\n\t                    disablekb:      1,\n\t                    origin:         '*' // https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45\n\t                },\n\t                events: {\n\t                    'onError': function(event) {\n\t                        _triggerEvent(plyr.container, 'error', true, {\n\t                            code:   event.data,\n\t                            embed:  event.target\n\t                        });\n\t                    },\n\t                    'onReady': function(event) {\n\t                        // Get the instance\n\t                        var instance = event.target;\n\t\n\t                        // Create a faux HTML5 API using the YouTube API\n\t                        plyr.media.play = function() {\n\t                            instance.playVideo();\n\t                            plyr.media.paused = false;\n\t                        };\n\t                        plyr.media.pause = function() {\n\t                            instance.pauseVideo();\n\t                            plyr.media.paused = true;\n\t                        };\n\t                        plyr.media.stop = function() {\n\t                            instance.stopVideo();\n\t                            plyr.media.paused = true;\n\t                        };\n\t                        plyr.media.duration = instance.getDuration();\n\t                        plyr.media.paused = true;\n\t                        plyr.media.currentTime = 0;\n\t                        plyr.media.muted = instance.isMuted();\n\t\n\t                        // Set title\n\t                        config.title = instance.getVideoData().title;\n\t\n\t                        // Set the tabindex\n\t                        if (plyr.supported.full) {\n\t                            plyr.media.querySelector('iframe').setAttribute('tabindex', '-1');\n\t                        }\n\t\n\t                        // Update UI\n\t                        _embedReady();\n\t\n\t                        // Trigger timeupdate\n\t                        _triggerEvent(plyr.media, 'timeupdate');\n\t\n\t                        // Trigger timeupdate\n\t                        _triggerEvent(plyr.media, 'durationchange');\n\t\n\t                        // Reset timer\n\t                        window.clearInterval(timers.buffering);\n\t\n\t                        // Setup buffering\n\t                        timers.buffering = window.setInterval(function() {\n\t                            // Get loaded % from YouTube\n\t                            plyr.media.buffered = instance.getVideoLoadedFraction();\n\t\n\t                            // Trigger progress only when we actually buffer something\n\t                            if (plyr.media.lastBuffered === null || plyr.media.lastBuffered < plyr.media.buffered) {\n\t                                _triggerEvent(plyr.media, 'progress');\n\t                            }\n\t\n\t                            // Set last buffer point\n\t                            plyr.media.lastBuffered = plyr.media.buffered;\n\t\n\t                            // Bail if we're at 100%\n\t                            if (plyr.media.buffered === 1) {\n\t                                window.clearInterval(timers.buffering);\n\t\n\t                                // Trigger event\n\t                                _triggerEvent(plyr.media, 'canplaythrough');\n\t                            }\n\t                        }, 200);\n\t                    },\n\t                    'onStateChange': function(event) {\n\t                        // Get the instance\n\t                        var instance = event.target;\n\t\n\t                        // Reset timer\n\t                        window.clearInterval(timers.playing);\n\t\n\t                        // Handle events\n\t                        // -1   Unstarted\n\t                        // 0    Ended\n\t                        // 1    Playing\n\t                        // 2    Paused\n\t                        // 3    Buffering\n\t                        // 5    Video cued\n\t                        switch (event.data) {\n\t                            case 0:\n\t                                plyr.media.paused = true;\n\t                                _triggerEvent(plyr.media, 'ended');\n\t                                break;\n\t\n\t                            case 1:\n\t                                plyr.media.paused = false;\n\t\n\t                                // If we were seeking, fire seeked event\n\t                                if (plyr.media.seeking) {\n\t                                    _triggerEvent(plyr.media, 'seeked');\n\t                                }\n\t\n\t                                plyr.media.seeking = false;\n\t                                _triggerEvent(plyr.media, 'play');\n\t                                _triggerEvent(plyr.media, 'playing');\n\t\n\t                                // Poll to get playback progress\n\t                                timers.playing = window.setInterval(function() {\n\t                                    // Set the current time\n\t                                    plyr.media.currentTime = instance.getCurrentTime();\n\t\n\t                                    // Trigger timeupdate\n\t                                    _triggerEvent(plyr.media, 'timeupdate');\n\t                                }, 100);\n\t\n\t                                // Check duration again due to YouTube bug\n\t                                // https://github.com/Selz/plyr/issues/374\n\t                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n\t                                if (plyr.media.duration !== instance.getDuration()) {\n\t                                    plyr.media.duration = instance.getDuration();\n\t                                    _triggerEvent(plyr.media, 'durationchange');\n\t                                }\n\t\n\t                                break;\n\t\n\t                            case 2:\n\t                                plyr.media.paused = true;\n\t                                _triggerEvent(plyr.media, 'pause');\n\t                                break;\n\t                        }\n\t\n\t                        _triggerEvent(plyr.container, 'statechange', false, {\n\t                            code: event.data\n\t                        });\n\t                    }\n\t                }\n\t            });\n\t        }\n\t\n\t        // Vimeo ready\n\t        function _vimeoReady(mediaId, container) {\n\t            // Setup instance\n\t            // https://github.com/vimeo/player.js\n\t            plyr.embed = new window.Vimeo.Player(container, {\n\t                id:         parseInt(mediaId),\n\t                loop:       config.loop,\n\t                autoplay:   config.autoplay,\n\t                byline:     false,\n\t                portrait:   false,\n\t                title:      false\n\t            });\n\t\n\t            // Create a faux HTML5 API using the Vimeo API\n\t            plyr.media.play = function() {\n\t                plyr.embed.play();\n\t                plyr.media.paused = false;\n\t            };\n\t            plyr.media.pause = function() {\n\t                plyr.embed.pause();\n\t                plyr.media.paused = true;\n\t            };\n\t            plyr.media.stop = function() {\n\t                plyr.embed.stop();\n\t                plyr.media.paused = true;\n\t            };\n\t\n\t            plyr.media.paused = true;\n\t            plyr.media.currentTime = 0;\n\t\n\t            // Update UI\n\t            _embedReady();\n\t\n\t            plyr.embed.getCurrentTime().then(function(value) {\n\t                plyr.media.currentTime = value;\n\t\n\t                // Trigger timeupdate\n\t                _triggerEvent(plyr.media, 'timeupdate');\n\t            });\n\t\n\t            plyr.embed.getDuration().then(function(value) {\n\t                plyr.media.duration = value;\n\t\n\t                // Trigger timeupdate\n\t                _triggerEvent(plyr.media, 'durationchange');\n\t            });\n\t\n\t            // TODO: Captions\n\t            /*if (config.captions.defaultActive) {\n\t                plyr.embed.enableTextTrack('en');\n\t            }*/\n\t\n\t            plyr.embed.on('loaded', function() {\n\t                // Fix keyboard focus issues\n\t                // https://github.com/Selz/plyr/issues/317\n\t                if (_is.htmlElement(plyr.embed.element) && plyr.supported.full) {\n\t                    plyr.embed.element.setAttribute('tabindex', '-1');\n\t                }\n\t            });\n\t\n\t            plyr.embed.on('play', function() {\n\t                plyr.media.paused = false;\n\t                _triggerEvent(plyr.media, 'play');\n\t                _triggerEvent(plyr.media, 'playing');\n\t            });\n\t\n\t            plyr.embed.on('pause', function() {\n\t                plyr.media.paused = true;\n\t                _triggerEvent(plyr.media, 'pause');\n\t            });\n\t\n\t            plyr.embed.on('timeupdate', function(data) {\n\t                plyr.media.seeking = false;\n\t                plyr.media.currentTime = data.seconds;\n\t                _triggerEvent(plyr.media, 'timeupdate');\n\t            });\n\t\n\t            plyr.embed.on('progress', function(data) {\n\t                plyr.media.buffered = data.percent;\n\t                _triggerEvent(plyr.media, 'progress');\n\t\n\t                if (parseInt(data.percent) === 1) {\n\t                    // Trigger event\n\t                    _triggerEvent(plyr.media, 'canplaythrough');\n\t                }\n\t            });\n\t\n\t            plyr.embed.on('seeked', function() {\n\t                plyr.media.seeking = false;\n\t                _triggerEvent(plyr.media, 'seeked');\n\t                _triggerEvent(plyr.media, 'play');\n\t            });\n\t\n\t            plyr.embed.on('ended', function() {\n\t                plyr.media.paused = true;\n\t                _triggerEvent(plyr.media, 'ended');\n\t            });\n\t        }\n\t\n\t        // Soundcloud ready\n\t        function _soundcloudReady() {\n\t            /* jshint validthis: true */\n\t            plyr.embed = window.SC.Widget(this);\n\t\n\t            // Setup on ready\n\t            plyr.embed.bind(window.SC.Widget.Events.READY, function() {\n\t                // Create a faux HTML5 API using the Soundcloud API\n\t                plyr.media.play = function() {\n\t                    plyr.embed.play();\n\t                    plyr.media.paused = false;\n\t                };\n\t                plyr.media.pause = function() {\n\t                    plyr.embed.pause();\n\t                    plyr.media.paused = true;\n\t                };\n\t                plyr.media.stop = function() {\n\t                    plyr.embed.seekTo(0);\n\t                    plyr.embed.pause();\n\t                    plyr.media.paused = true;\n\t                };\n\t\n\t                plyr.media.paused = true;\n\t                plyr.media.currentTime = 0;\n\t\n\t                plyr.embed.getDuration(function(value) {\n\t                    plyr.media.duration = value/1000;\n\t\n\t                    // Update UI\n\t                    _embedReady();\n\t                });\n\t\n\t                plyr.embed.getPosition(function(value) {\n\t                    plyr.media.currentTime = value;\n\t\n\t                    // Trigger timeupdate\n\t                    _triggerEvent(plyr.media, 'timeupdate');\n\t                });\n\t\n\t                plyr.embed.bind(window.SC.Widget.Events.PLAY, function() {\n\t                    plyr.media.paused = false;\n\t                    _triggerEvent(plyr.media, 'play');\n\t                    _triggerEvent(plyr.media, 'playing');\n\t                });\n\t\n\t                plyr.embed.bind(window.SC.Widget.Events.PAUSE, function() {\n\t                    plyr.media.paused = true;\n\t                    _triggerEvent(plyr.media, 'pause');\n\t                });\n\t\n\t                plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS, function(data) {\n\t                    plyr.media.seeking = false;\n\t                    plyr.media.currentTime = data.currentPosition/1000;\n\t                    _triggerEvent(plyr.media, 'timeupdate');\n\t                });\n\t\n\t                plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS, function(data) {\n\t                    plyr.media.buffered = data.loadProgress;\n\t                    _triggerEvent(plyr.media, 'progress');\n\t\n\t                    if (parseInt(data.loadProgress) === 1) {\n\t                        // Trigger event\n\t                        _triggerEvent(plyr.media, 'canplaythrough');\n\t                    }\n\t                });\n\t\n\t                plyr.embed.bind(window.SC.Widget.Events.FINISH, function() {\n\t                    plyr.media.paused = true;\n\t                    _triggerEvent(plyr.media, 'ended');\n\t                });\n\t            });\n\t        }\n\t\n\t        // Play media\n\t        function _play() {\n\t            if ('play' in plyr.media) {\n\t                plyr.media.play();\n\t            }\n\t        }\n\t\n\t        // Pause media\n\t        function _pause() {\n\t            if ('pause' in plyr.media) {\n\t                plyr.media.pause();\n\t            }\n\t        }\n\t\n\t        // Toggle playback\n\t        function _togglePlay(toggle) {\n\t            // True toggle\n\t            if (!_is.boolean(toggle)) {\n\t                toggle = plyr.media.paused;\n\t            }\n\t\n\t            if (toggle) {\n\t                _play();\n\t            } else {\n\t                _pause();\n\t            }\n\t\n\t            return toggle;\n\t        }\n\t\n\t        // Rewind\n\t        function _rewind(seekTime) {\n\t            // Use default if needed\n\t            if (!_is.number(seekTime)) {\n\t                seekTime = config.seekTime;\n\t            }\n\t            _seek(plyr.media.currentTime - seekTime);\n\t        }\n\t\n\t        // Fast forward\n\t        function _forward(seekTime) {\n\t            // Use default if needed\n\t            if (!_is.number(seekTime)) {\n\t                seekTime = config.seekTime;\n\t            }\n\t            _seek(plyr.media.currentTime + seekTime);\n\t        }\n\t\n\t        // Seek to time\n\t        // The input parameter can be an event or a number\n\t        function _seek(input) {\n\t            var targetTime  = 0,\n\t                paused      = plyr.media.paused,\n\t                duration    = _getDuration();\n\t\n\t            if (_is.number(input)) {\n\t                targetTime = input;\n\t            } else if (_is.object(input) && _inArray(['input', 'change'], input.type)) {\n\t                // It's the seek slider\n\t                // Seek to the selected time\n\t                targetTime = ((input.target.value / input.target.max) * duration);\n\t            }\n\t\n\t            // Normalise targetTime\n\t            if (targetTime < 0) {\n\t                targetTime = 0;\n\t            } else if (targetTime > duration) {\n\t                targetTime = duration;\n\t            }\n\t\n\t            // Update seek range and progress\n\t            _updateSeekDisplay(targetTime);\n\t\n\t            // Set the current time\n\t            // Try/catch incase the media isn't set and we're calling seek() from source() and IE moans\n\t            try {\n\t                plyr.media.currentTime = targetTime.toFixed(4);\n\t            }\n\t            catch(e) {}\n\t\n\t            // Embeds\n\t            if (_inArray(config.types.embed, plyr.type)) {\n\t                switch(plyr.type) {\n\t                    case 'youtube':\n\t                        plyr.embed.seekTo(targetTime);\n\t                        break;\n\t\n\t                    case 'vimeo':\n\t                        // Round to nearest second for vimeo\n\t                        plyr.embed.setCurrentTime(targetTime.toFixed(0));\n\t                        break;\n\t\n\t                    case 'soundcloud':\n\t                        plyr.embed.seekTo(targetTime * 1000);\n\t                        break;\n\t                }\n\t\n\t                if (paused) {\n\t                    _pause();\n\t                }\n\t\n\t                // Trigger timeupdate\n\t                _triggerEvent(plyr.media, 'timeupdate');\n\t\n\t                // Set seeking flag\n\t                plyr.media.seeking = true;\n\t\n\t                // Trigger seeking\n\t                _triggerEvent(plyr.media, 'seeking');\n\t            }\n\t\n\t            // Logging\n\t            _log('Seeking to ' + plyr.media.currentTime + ' seconds');\n\t\n\t            // Special handling for 'manual' captions\n\t            _seekManualCaptions(targetTime);\n\t        }\n\t\n\t        // Get the duration (or custom if set)\n\t        function _getDuration() {\n\t            // It should be a number, but parse it just incase\n\t            var duration = parseInt(config.duration),\n\t\n\t            // True duration\n\t            mediaDuration = 0;\n\t\n\t            // Only if duration available\n\t            if (plyr.media.duration !== null && !isNaN(plyr.media.duration)) {\n\t                mediaDuration = plyr.media.duration;\n\t            }\n\t\n\t            // If custom duration is funky, use regular duration\n\t            return (isNaN(duration) ? mediaDuration : duration);\n\t        }\n\t\n\t        // Check playing state\n\t        function _checkPlaying() {\n\t            _toggleClass(plyr.container, config.classes.playing, !plyr.media.paused);\n\t\n\t            _toggleClass(plyr.container, config.classes.stopped, plyr.media.paused);\n\t\n\t            _toggleControls(plyr.media.paused);\n\t        }\n\t\n\t        // Save scroll position\n\t        function _saveScrollPosition() {\n\t            scroll = {\n\t                x: window.pageXOffset || 0,\n\t                y: window.pageYOffset || 0\n\t            };\n\t        }\n\t\n\t        // Restore scroll position\n\t        function _restoreScrollPosition() {\n\t            window.scrollTo(scroll.x, scroll.y);\n\t        }\n\t\n\t        // Toggle fullscreen\n\t        function _toggleFullscreen(event) {\n\t            // Check for native support\n\t            var nativeSupport = fullscreen.supportsFullScreen;\n\t\n\t            if (nativeSupport) {\n\t                // If it's a fullscreen change event, update the UI\n\t                if (event && event.type === fullscreen.fullScreenEventName) {\n\t                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);\n\t                } else {\n\t                    // Else it's a user request to enter or exit\n\t                    if (!fullscreen.isFullScreen(plyr.container)) {\n\t                        // Save scroll position\n\t                        _saveScrollPosition();\n\t\n\t                        // Request full screen\n\t                        fullscreen.requestFullScreen(plyr.container);\n\t                    } else {\n\t                        // Bail from fullscreen\n\t                        fullscreen.cancelFullScreen();\n\t                    }\n\t\n\t                    // Check if we're actually full screen (it could fail)\n\t                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);\n\t\n\t                    return;\n\t                }\n\t            } else {\n\t                // Otherwise, it's a simple toggle\n\t                plyr.isFullscreen = !plyr.isFullscreen;\n\t\n\t                // Bind/unbind escape key\n\t                document.body.style.overflow = plyr.isFullscreen ? 'hidden' : '';\n\t            }\n\t\n\t            // Set class hook\n\t            _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);\n\t\n\t            // Trap focus\n\t            _focusTrap(plyr.isFullscreen);\n\t\n\t            // Set button state\n\t            if (plyr.buttons && plyr.buttons.fullscreen) {\n\t                _toggleState(plyr.buttons.fullscreen, plyr.isFullscreen);\n\t            }\n\t\n\t            // Trigger an event\n\t            _triggerEvent(plyr.container, plyr.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);\n\t\n\t            // Restore scroll position\n\t            if (!plyr.isFullscreen && nativeSupport) {\n\t                _restoreScrollPosition();\n\t            }\n\t        }\n\t\n\t        // Mute\n\t        function _toggleMute(muted) {\n\t            // If the method is called without parameter, toggle based on current value\n\t            if (!_is.boolean(muted)) {\n\t                muted = !plyr.media.muted;\n\t            }\n\t\n\t            // Set button state\n\t            _toggleState(plyr.buttons.mute, muted);\n\t\n\t            // Set mute on the player\n\t            plyr.media.muted = muted;\n\t\n\t            // If volume is 0 after unmuting, set to default\n\t            if (plyr.media.volume === 0) {\n\t                _setVolume(config.volume);\n\t            }\n\t\n\t            // Embeds\n\t            if (_inArray(config.types.embed, plyr.type)) {\n\t                // YouTube\n\t                switch(plyr.type) {\n\t                    case 'youtube':\n\t                        plyr.embed[plyr.media.muted ? 'mute' : 'unMute']();\n\t                        break;\n\t\n\t                    case 'vimeo':\n\t                    case 'soundcloud':\n\t                        plyr.embed.setVolume(plyr.media.muted ? 0 : parseFloat(config.volume / config.volumeMax));\n\t                        break;\n\t                }\n\t\n\t                // Trigger volumechange for embeds\n\t                _triggerEvent(plyr.media, 'volumechange');\n\t            }\n\t        }\n\t\n\t        // Set volume\n\t        function _setVolume(volume) {\n\t            var max = config.volumeMax,\n\t                min = config.volumeMin;\n\t\n\t            // Load volume from storage if no value specified\n\t            if (_is.undefined(volume)) {\n\t                volume = plyr.storage.volume;\n\t            }\n\t\n\t            // Use config if all else fails\n\t            if (volume === null || isNaN(volume)) {\n\t                volume = config.volume;\n\t            }\n\t\n\t            // Maximum is volumeMax\n\t            if (volume > max) {\n\t                volume = max;\n\t            }\n\t            // Minimum is volumeMin\n\t            if (volume < min) {\n\t                volume = min;\n\t            }\n\t\n\t            // Set the player volume\n\t            plyr.media.volume = parseFloat(volume / max);\n\t\n\t            // Set the display\n\t            if (plyr.volume.display) {\n\t                plyr.volume.display.value = volume;\n\t            }\n\t\n\t            // Embeds\n\t            if (_inArray(config.types.embed, plyr.type)) {\n\t                switch(plyr.type) {\n\t                    case 'youtube':\n\t                        plyr.embed.setVolume(plyr.media.volume * 100);\n\t                        break;\n\t\n\t                    case 'vimeo':\n\t                    case 'soundcloud':\n\t                        plyr.embed.setVolume(plyr.media.volume);\n\t                        break;\n\t                }\n\t\n\t                // Trigger volumechange for embeds\n\t                _triggerEvent(plyr.media, 'volumechange');\n\t            }\n\t\n\t            // Toggle muted state\n\t            if (volume === 0) {\n\t                plyr.media.muted = true;\n\t            } else if (plyr.media.muted && volume > 0) {\n\t                _toggleMute();\n\t            }\n\t        }\n\t\n\t        // Increase volume\n\t        function _increaseVolume(step) {\n\t            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\t\n\t            if (!_is.number(step)) {\n\t                step = config.volumeStep;\n\t            }\n\t\n\t            _setVolume(volume + step);\n\t        }\n\t\n\t        // Decrease volume\n\t        function _decreaseVolume(step) {\n\t            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\t\n\t            if (!_is.number(step)) {\n\t                step = config.volumeStep;\n\t            }\n\t\n\t            _setVolume(volume - step);\n\t        }\n\t\n\t        // Update volume UI and storage\n\t        function _updateVolume() {\n\t            // Get the current volume\n\t            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\t\n\t            // Update the <input type=\"range\"> if present\n\t            if (plyr.supported.full) {\n\t                if (plyr.volume.input) {\n\t                    plyr.volume.input.value = volume;\n\t                }\n\t                if (plyr.volume.display) {\n\t                    plyr.volume.display.value = volume;\n\t                }\n\t            }\n\t\n\t            // Update the volume in storage\n\t            _updateStorage({volume: volume});\n\t\n\t            // Toggle class if muted\n\t            _toggleClass(plyr.container, config.classes.muted, (volume === 0));\n\t\n\t            // Update checkbox for mute state\n\t            if (plyr.supported.full && plyr.buttons.mute) {\n\t                _toggleState(plyr.buttons.mute, (volume === 0));\n\t            }\n\t        }\n\t\n\t        // Toggle captions\n\t        function _toggleCaptions(show) {\n\t            // If there's no full support, or there's no caption toggle\n\t            if (!plyr.supported.full || !plyr.buttons.captions) {\n\t                return;\n\t            }\n\t\n\t            // If the method is called without parameter, toggle based on current value\n\t            if (!_is.boolean(show)) {\n\t                show = (plyr.container.className.indexOf(config.classes.captions.active) === -1);\n\t            }\n\t\n\t            // Set global\n\t            plyr.captionsEnabled = show;\n\t\n\t            // Toggle state\n\t            _toggleState(plyr.buttons.captions, plyr.captionsEnabled);\n\t\n\t            // Add class hook\n\t            _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);\n\t\n\t            // Trigger an event\n\t            _triggerEvent(plyr.container, plyr.captionsEnabled ? 'captionsenabled' : 'captionsdisabled', true);\n\t\n\t            // Save captions state to localStorage\n\t            _updateStorage({captionsEnabled: plyr.captionsEnabled});\n\t        }\n\t\n\t        // Check if media is loading\n\t        function _checkLoading(event) {\n\t            var loading = (event.type === 'waiting');\n\t\n\t            // Clear timer\n\t            clearTimeout(timers.loading);\n\t\n\t            // Timer to prevent flicker when seeking\n\t            timers.loading = setTimeout(function() {\n\t                // Toggle container class hook\n\t                _toggleClass(plyr.container, config.classes.loading, loading);\n\t\n\t                // Show controls if loading, hide if done\n\t                _toggleControls(loading);\n\t            }, (loading ? 250 : 0));\n\t        }\n\t\n\t        // Update <progress> elements\n\t        function _updateProgress(event) {\n\t            if (!plyr.supported.full) {\n\t                return;\n\t            }\n\t\n\t            var progress    = plyr.progress.played,\n\t                value       = 0,\n\t                duration    = _getDuration();\n\t\n\t            if (event) {\n\t                switch (event.type) {\n\t                    // Video playing\n\t                    case 'timeupdate':\n\t                    case 'seeking':\n\t                        if (plyr.controls.pressed) {\n\t                            return;\n\t                        }\n\t\n\t                        value = _getPercentage(plyr.media.currentTime, duration);\n\t\n\t                        // Set seek range value only if it's a 'natural' time event\n\t                        if (event.type === 'timeupdate' && plyr.buttons.seek) {\n\t                            plyr.buttons.seek.value = value;\n\t                        }\n\t\n\t                        break;\n\t\n\t                    // Check buffer status\n\t                    case 'playing':\n\t                    case 'progress':\n\t                        progress    = plyr.progress.buffer;\n\t                        value       = (function() {\n\t                            var buffered = plyr.media.buffered;\n\t\n\t                            if (buffered && buffered.length) {\n\t                                // HTML5\n\t                                return _getPercentage(buffered.end(0), duration);\n\t                            } else if (_is.number(buffered)) {\n\t                                // YouTube returns between 0 and 1\n\t                                return (buffered * 100);\n\t                            }\n\t\n\t                            return 0;\n\t                        })();\n\t\n\t                        break;\n\t                }\n\t            }\n\t\n\t            // Set values\n\t            _setProgress(progress, value);\n\t        }\n\t\n\t        // Set <progress> value\n\t        function _setProgress(progress, value) {\n\t            if (!plyr.supported.full) {\n\t                return;\n\t            }\n\t\n\t            // Default to 0\n\t            if (_is.undefined(value)) {\n\t                value = 0;\n\t            }\n\t            // Default to buffer or bail\n\t            if (_is.undefined(progress)) {\n\t                if (plyr.progress && plyr.progress.buffer) {\n\t                    progress = plyr.progress.buffer;\n\t                } else {\n\t                    return;\n\t                }\n\t            }\n\t\n\t            // One progress element passed\n\t            if (_is.htmlElement(progress)) {\n\t                progress.value = value;\n\t            } else if (progress) {\n\t                // Object of progress + text element\n\t                if (progress.bar) {\n\t                    progress.bar.value = value;\n\t                }\n\t                if (progress.text) {\n\t                    progress.text.innerHTML = value;\n\t                }\n\t            }\n\t        }\n\t\n\t        // Update the displayed time\n\t        function _updateTimeDisplay(time, element) {\n\t            // Bail if there's no duration display\n\t            if (!element) {\n\t                return;\n\t            }\n\t\n\t            // Fallback to 0\n\t            if (isNaN(time)) {\n\t                time = 0;\n\t            }\n\t\n\t            plyr.secs = parseInt(time % 60);\n\t            plyr.mins = parseInt((time / 60) % 60);\n\t            plyr.hours = parseInt(((time / 60) / 60) % 60);\n\t\n\t            // Do we need to display hours?\n\t            var displayHours = (parseInt(((_getDuration() / 60) / 60) % 60) > 0);\n\t\n\t            // Ensure it's two digits. For example, 03 rather than 3.\n\t            plyr.secs = ('0' + plyr.secs).slice(-2);\n\t            plyr.mins = ('0' + plyr.mins).slice(-2);\n\t\n\t            // Render\n\t            element.innerHTML = (displayHours ? plyr.hours + ':' : '') + plyr.mins + ':' + plyr.secs;\n\t        }\n\t\n\t        // Show the duration on metadataloaded\n\t        function _displayDuration() {\n\t            if (!plyr.supported.full) {\n\t                return;\n\t            }\n\t\n\t            // Determine duration\n\t            var duration = _getDuration() || 0;\n\t\n\t            // If there's only one time display, display duration there\n\t            if (!plyr.duration && config.displayDuration && plyr.media.paused) {\n\t                _updateTimeDisplay(duration, plyr.currentTime);\n\t            }\n\t\n\t            // If there's a duration element, update content\n\t            if (plyr.duration) {\n\t                _updateTimeDisplay(duration, plyr.duration);\n\t            }\n\t\n\t            // Update the tooltip (if visible)\n\t            _updateSeekTooltip();\n\t        }\n\t\n\t        // Handle time change event\n\t        function _timeUpdate(event) {\n\t            // Duration\n\t            _updateTimeDisplay(plyr.media.currentTime, plyr.currentTime);\n\t\n\t            // Ignore updates while seeking\n\t            if (event && event.type === 'timeupdate' && plyr.media.seeking) {\n\t                return;\n\t            }\n\t\n\t            // Playing progress\n\t            _updateProgress(event);\n\t        }\n\t\n\t        // Update seek range and progress\n\t        function _updateSeekDisplay(time) {\n\t            // Default to 0\n\t            if (!_is.number(time)) {\n\t                time = 0;\n\t            }\n\t\n\t            var duration    = _getDuration(),\n\t                value       = _getPercentage(time, duration);\n\t\n\t            // Update progress\n\t            if (plyr.progress && plyr.progress.played) {\n\t                plyr.progress.played.value = value;\n\t            }\n\t\n\t            // Update seek range input\n\t            if (plyr.buttons && plyr.buttons.seek) {\n\t                plyr.buttons.seek.value = value;\n\t            }\n\t        }\n\t\n\t        // Update hover tooltip for seeking\n\t        function _updateSeekTooltip(event) {\n\t            var duration = _getDuration();\n\t\n\t            // Bail if setting not true\n\t            if (!config.tooltips.seek || !plyr.progress.container || duration === 0) {\n\t                return;\n\t            }\n\t\n\t            // Calculate percentage\n\t            var clientRect  = plyr.progress.container.getBoundingClientRect(),\n\t                percent     = 0,\n\t                visible     = config.classes.tooltip + '--visible';\n\t\n\t            // Determine percentage, if already visible\n\t            if (!event) {\n\t                if (_hasClass(plyr.progress.tooltip, visible)) {\n\t                    percent = plyr.progress.tooltip.style.left.replace('%', '');\n\t                } else {\n\t                    return;\n\t                }\n\t            } else {\n\t                percent = ((100 / clientRect.width) * (event.pageX - clientRect.left));\n\t            }\n\t\n\t            // Set bounds\n\t            if (percent < 0) {\n\t                percent = 0;\n\t            } else if (percent > 100) {\n\t                percent = 100;\n\t            }\n\t\n\t            // Display the time a click would seek to\n\t            _updateTimeDisplay(((duration / 100) * percent), plyr.progress.tooltip);\n\t\n\t            // Set position\n\t            plyr.progress.tooltip.style.left = percent + \"%\";\n\t\n\t            // Show/hide the tooltip\n\t            // If the event is a moues in/out and percentage is inside bounds\n\t            if (event && _inArray(['mouseenter', 'mouseleave'], event.type)) {\n\t                _toggleClass(plyr.progress.tooltip, visible, (event.type === 'mouseenter'));\n\t            }\n\t        }\n\t\n\t        // Show the player controls in fullscreen mode\n\t        function _toggleControls(toggle) {\n\t            // Don't hide if config says not to, it's audio, or not ready or loading\n\t            if (!config.hideControls || plyr.type === 'audio') {\n\t                return;\n\t            }\n\t\n\t            var delay = 0,\n\t                isEnterFullscreen = false,\n\t                show = toggle,\n\t                loading = _hasClass(plyr.container, config.classes.loading);\n\t\n\t            // Default to false if no boolean\n\t            if (!_is.boolean(toggle)) {\n\t                if (toggle && toggle.type) {\n\t                    // Is the enter fullscreen event\n\t                    isEnterFullscreen = (toggle.type === 'enterfullscreen');\n\t\n\t                    // Whether to show controls\n\t                    show = _inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);\n\t\n\t                    // Delay hiding on move events\n\t                    if (_inArray(['mousemove', 'touchmove'], toggle.type)) {\n\t                        delay = 2000;\n\t                    }\n\t\n\t                    // Delay a little more for keyboard users\n\t                    if (toggle.type === 'focus') {\n\t                        delay = 3000;\n\t                    }\n\t                } else {\n\t                    show = _hasClass(plyr.container, config.classes.hideControls);\n\t                }\n\t            }\n\t\n\t            // Clear timer every movement\n\t            window.clearTimeout(timers.hover);\n\t\n\t            // If the mouse is not over the controls, set a timeout to hide them\n\t            if (show || plyr.media.paused || loading) {\n\t                _toggleClass(plyr.container, config.classes.hideControls, false);\n\t\n\t                // Always show controls when paused or if touch\n\t                if (plyr.media.paused || loading) {\n\t                    return;\n\t                }\n\t\n\t                // Delay for hiding on touch\n\t                if (plyr.browser.isTouch) {\n\t                    delay = 3000;\n\t                }\n\t            }\n\t\n\t            // If toggle is false or if we're playing (regardless of toggle),\n\t            // then set the timer to hide the controls\n\t            if (!show || !plyr.media.paused) {\n\t                timers.hover = window.setTimeout(function() {\n\t                    // If the mouse is over the controls (and not entering fullscreen), bail\n\t                    if ((plyr.controls.pressed || plyr.controls.hover) && !isEnterFullscreen) {\n\t                        return;\n\t                    }\n\t\n\t                    _toggleClass(plyr.container, config.classes.hideControls, true);\n\t                }, delay);\n\t            }\n\t        }\n\t\n\t        // Add common function to retrieve media source\n\t        function _source(source) {\n\t            // If not null or undefined, parse it\n\t            if (!_is.undefined(source)) {\n\t                _updateSource(source);\n\t                return;\n\t            }\n\t\n\t            // Return the current source\n\t            var url;\n\t            switch(plyr.type) {\n\t                case 'youtube':\n\t                    url = plyr.embed.getVideoUrl();\n\t                    break;\n\t\n\t                case 'vimeo':\n\t                    plyr.embed.getVideoUrl.then(function (value) {\n\t                        url = value;\n\t                    });\n\t                    break;\n\t\n\t                case 'soundcloud':\n\t                    plyr.embed.getCurrentSound(function(object) {\n\t                        url = object.permalink_url;\n\t                    });\n\t                    break;\n\t\n\t                default:\n\t                    url = plyr.media.currentSrc;\n\t                    break;\n\t            }\n\t\n\t            return url || '';\n\t        }\n\t\n\t        // Update source\n\t        // Sources are not checked for support so be careful\n\t        function _updateSource(source) {\n\t            if (!_is.object(source) || !('sources' in source) || !source.sources.length) {\n\t                _warn('Invalid source format');\n\t                return;\n\t            }\n\t\n\t            // Remove ready class hook\n\t            _toggleClass(plyr.container, config.classes.ready, false);\n\t\n\t            // Pause playback\n\t            _pause();\n\t\n\t            // Update seek range and progress\n\t            _updateSeekDisplay();\n\t\n\t            // Reset buffer progress\n\t            _setProgress();\n\t\n\t            // Cancel current network requests\n\t            _cancelRequests();\n\t\n\t            // Setup new source\n\t            function setup() {\n\t                // Remove embed object\n\t                plyr.embed = null;\n\t\n\t                // Remove the old media\n\t                _remove(plyr.media);\n\t\n\t                // Remove video container\n\t                if (plyr.type === 'video' && plyr.videoContainer) {\n\t                    _remove(plyr.videoContainer);\n\t                }\n\t\n\t                // Reset class name\n\t                if (plyr.container) {\n\t                    plyr.container.removeAttribute('class');\n\t                }\n\t\n\t                // Set the type\n\t                if ('type' in source) {\n\t                    plyr.type = source.type;\n\t\n\t                    // Get child type for video (it might be an embed)\n\t                    if (plyr.type === 'video') {\n\t                        var firstSource = source.sources[0];\n\t\n\t                        if ('type' in firstSource && _inArray(config.types.embed, firstSource.type)) {\n\t                            plyr.type = firstSource.type;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // Check for support\n\t                plyr.supported = supported(plyr.type);\n\t\n\t                // Create new markup\n\t                switch(plyr.type) {\n\t                    case 'video':\n\t                        plyr.media = document.createElement('video');\n\t                        break;\n\t\n\t                    case 'audio':\n\t                        plyr.media = document.createElement('audio');\n\t                        break;\n\t\n\t                    case 'youtube':\n\t                    case 'vimeo':\n\t                    case 'soundcloud':\n\t                        plyr.media = document.createElement('div');\n\t                        plyr.embedId = source.sources[0].src;\n\t                        break;\n\t                }\n\t\n\t                // Inject the new element\n\t                _prependChild(plyr.container, plyr.media);\n\t\n\t                // Autoplay the new source?\n\t                if (_is.boolean(source.autoplay)) {\n\t                    config.autoplay = source.autoplay;\n\t                }\n\t\n\t                // Set attributes for audio and video\n\t                if (_inArray(config.types.html5, plyr.type)) {\n\t                    if (config.crossorigin) {\n\t                        plyr.media.setAttribute('crossorigin', '');\n\t                    }\n\t                    if (config.autoplay) {\n\t                        plyr.media.setAttribute('autoplay', '');\n\t                    }\n\t                    if ('poster' in source) {\n\t                        plyr.media.setAttribute('poster', source.poster);\n\t                    }\n\t                    if (config.loop) {\n\t                        plyr.media.setAttribute('loop', '');\n\t                    }\n\t                }\n\t\n\t                // Restore class hooks\n\t                _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);\n\t                _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);\n\t                _toggleStyleHook();\n\t\n\t                // Set new sources for html5\n\t                if (_inArray(config.types.html5, plyr.type)) {\n\t                    _insertChildElements('source', source.sources);\n\t                }\n\t\n\t                // Set up from scratch\n\t                _setupMedia();\n\t\n\t                // HTML5 stuff\n\t                if (_inArray(config.types.html5, plyr.type)) {\n\t                    // Setup captions\n\t                    if ('tracks' in source) {\n\t                        _insertChildElements('track', source.tracks);\n\t                    }\n\t\n\t                    // Load HTML5 sources\n\t                    plyr.media.load();\n\t                }\n\t\n\t                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n\t                if (_inArray(config.types.html5, plyr.type) || (_inArray(config.types.embed, plyr.type) && !plyr.supported.full)) {\n\t                    // Setup interface\n\t                    _setupInterface();\n\t\n\t                    // Call ready\n\t                    _ready();\n\t                }\n\t\n\t                // Set aria title and iframe title\n\t                config.title = source.title;\n\t                _setTitle();\n\t            }\n\t\n\t            // Destroy instance adn wait for callback\n\t            // Vimeo throws a wobbly if you don't wait\n\t            _destroy(setup, false);\n\t        }\n\t\n\t        // Update poster\n\t        function _updatePoster(source) {\n\t            if (plyr.type === 'video') {\n\t                plyr.media.setAttribute('poster', source);\n\t            }\n\t        }\n\t\n\t        // Listen for control events\n\t        function _controlListeners() {\n\t            // IE doesn't support input event, so we fallback to change\n\t            var inputEvent = (plyr.browser.isIE ? 'change' : 'input');\n\t\n\t            // Click play/pause helper\n\t            function togglePlay() {\n\t                var play = _togglePlay();\n\t\n\t                // Determine which buttons\n\t                var trigger = plyr.buttons[play ? 'play' : 'pause'],\n\t                    target = plyr.buttons[play ? 'pause' : 'play'];\n\t\n\t                // Get the last play button to account for the large play button\n\t                if (target && target.length > 1) {\n\t                    target = target[target.length - 1];\n\t                } else {\n\t                    target = target[0];\n\t                }\n\t\n\t                // Setup focus and tab focus\n\t                if (target) {\n\t                    var hadTabFocus = _hasClass(trigger, config.classes.tabFocus);\n\t\n\t                    setTimeout(function() {\n\t                        target.focus();\n\t\n\t                        if (hadTabFocus) {\n\t                            _toggleClass(trigger, config.classes.tabFocus, false);\n\t                            _toggleClass(target, config.classes.tabFocus, true);\n\t                        }\n\t                    }, 100);\n\t                }\n\t            }\n\t\n\t            // Get the focused element\n\t            function getFocusElement() {\n\t                var focused = document.activeElement;\n\t\n\t                if (!focused || focused === document.body) {\n\t                    focused = null;\n\t                } else {\n\t                    focused = document.querySelector(':focus');\n\t                }\n\t\n\t                return focused;\n\t            }\n\t\n\t            // Get the key code for an event\n\t            function getKeyCode(event) {\n\t                return event.keyCode ? event.keyCode : event.which;\n\t            }\n\t\n\t            // Detect tab focus\n\t            function checkTabFocus(focused) {\n\t                for (var button in plyr.buttons) {\n\t                    var element = plyr.buttons[button];\n\t\n\t                    if (_is.nodeList(element)) {\n\t                        for (var i = 0; i < element.length; i++) {\n\t                            _toggleClass(element[i], config.classes.tabFocus, (element[i] === focused));\n\t                        }\n\t                    } else {\n\t                        _toggleClass(element, config.classes.tabFocus, (element === focused));\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Keyboard shortcuts\n\t            if (config.keyboardShorcuts.focused) {\n\t                var last = null;\n\t\n\t                // Handle global presses\n\t                if (config.keyboardShorcuts.global) {\n\t                    _on(window, 'keydown keyup', function(event) {\n\t                        var code = getKeyCode(event),\n\t                        focused = getFocusElement(),\n\t                        allowed = [48,49,50,51,52,53,54,56,57,75,77,70,67],\n\t                        count   = get().length;\n\t\n\t                        // Only handle global key press if there's only one player\n\t                        // and the key is in the allowed keys\n\t                        // and if the focused element is not editable (e.g. text input)\n\t                        // and any that accept key input http://webaim.org/techniques/keyboard/\n\t                        if (count === 1 && _inArray(allowed, code) && (!_is.htmlElement(focused) || !_matches(focused, config.selectors.editable))) {\n\t                            handleKey(event);\n\t                        }\n\t                    });\n\t                }\n\t\n\t                // Handle presses on focused\n\t                _on(plyr.container, 'keydown keyup', handleKey);\n\t            }\n\t\n\t            function handleKey(event) {\n\t                var code = getKeyCode(event),\n\t                    pressed = event.type === 'keydown',\n\t                    held = pressed && code === last;\n\t\n\t                // If the event is bubbled from the media element\n\t                // Firefox doesn't get the keycode for whatever reason\n\t                if (!_is.number(code)) {\n\t                    return;\n\t                }\n\t\n\t                // Seek by the number keys\n\t                function seekByKey() {\n\t                    // Get current duration\n\t                    var duration = plyr.media.duration;\n\t\n\t                    // Bail if we have no duration set\n\t                    if (!_is.number(duration)) {\n\t                        return;\n\t                    }\n\t\n\t                    // Divide the max duration into 10th's and times by the number value\n\t                    _seek((duration / 10) * (code - 48));\n\t                }\n\t\n\t                // Handle the key on keydown\n\t                // Reset on keyup\n\t                if (pressed) {\n\t                    // Which keycodes should we prevent default\n\t                    var preventDefault = [48,49,50,51,52,53,54,56,57,32,75,38,40,77,39,37,70,67];\n\t\n\t                    // If the code is found prevent default (e.g. prevent scrolling for arrows)\n\t                    if (_inArray(preventDefault, code)) {\n\t                        event.preventDefault();\n\t                        event.stopPropagation();\n\t                    }\n\t\n\t                    switch(code) {\n\t                        // 0-9\n\t                        case 48:\n\t                        case 49:\n\t                        case 50:\n\t                        case 51:\n\t                        case 52:\n\t                        case 53:\n\t                        case 54:\n\t                        case 55:\n\t                        case 56:\n\t                        case 57: if (!held) { seekByKey(); } break;\n\t                        // Space and K key\n\t                        case 32:\n\t                        case 75: if (!held) { _togglePlay(); } break;\n\t                        // Arrow up\n\t                        case 38: _increaseVolume(); break;\n\t                        // Arrow down\n\t                        case 40: _decreaseVolume(); break;\n\t                        // M key\n\t                        case 77: if (!held) { _toggleMute() } break;\n\t                        // Arrow forward\n\t                        case 39: _forward(); break;\n\t                        // Arrow back\n\t                        case 37: _rewind(); break;\n\t                        // F key\n\t                        case 70: _toggleFullscreen(); break;\n\t                        // C key\n\t                        case 67: if (!held) { _toggleCaptions(); } break;\n\t                    }\n\t\n\t                    // Escape is handle natively when in full screen\n\t                    // So we only need to worry about non native\n\t                    if (!fullscreen.supportsFullScreen && plyr.isFullscreen && code === 27) {\n\t                        _toggleFullscreen();\n\t                    }\n\t\n\t                    // Store last code for next cycle\n\t                    last = code;\n\t                } else {\n\t                    last = null;\n\t                }\n\t            }\n\t\n\t            // Focus/tab management\n\t            _on(window, 'keyup', function(event) {\n\t                var code = getKeyCode(event),\n\t                    focused = getFocusElement();\n\t\n\t                if (code === 9) {\n\t                    checkTabFocus(focused);\n\t                }\n\t            });\n\t            _on(document.body, 'click', function() {\n\t                _toggleClass(_getElement('.' + config.classes.tabFocus), config.classes.tabFocus, false);\n\t            });\n\t            for (var button in plyr.buttons) {\n\t                var element = plyr.buttons[button];\n\t\n\t                _on(element, 'blur', function() {\n\t                    _toggleClass(element, 'tab-focus', false);\n\t                });\n\t            }\n\t\n\t            // Play\n\t            _proxyListener(plyr.buttons.play, 'click', config.listeners.play, togglePlay);\n\t\n\t            // Pause\n\t            _proxyListener(plyr.buttons.pause, 'click', config.listeners.pause, togglePlay);\n\t\n\t            // Restart\n\t            _proxyListener(plyr.buttons.restart, 'click', config.listeners.restart, _seek);\n\t\n\t            // Rewind\n\t            _proxyListener(plyr.buttons.rewind, 'click', config.listeners.rewind, _rewind);\n\t\n\t            // Fast forward\n\t            _proxyListener(plyr.buttons.forward, 'click', config.listeners.forward, _forward);\n\t\n\t            // Seek\n\t            _proxyListener(plyr.buttons.seek, inputEvent, config.listeners.seek, _seek);\n\t\n\t            // Set volume\n\t            _proxyListener(plyr.volume.input, inputEvent, config.listeners.volume, function() {\n\t                _setVolume(plyr.volume.input.value);\n\t            });\n\t\n\t            // Mute\n\t            _proxyListener(plyr.buttons.mute, 'click', config.listeners.mute, _toggleMute);\n\t\n\t            // Fullscreen\n\t            _proxyListener(plyr.buttons.fullscreen, 'click', config.listeners.fullscreen, _toggleFullscreen);\n\t\n\t            // Handle user exiting fullscreen by escaping etc\n\t            if (fullscreen.supportsFullScreen) {\n\t                _on(document, fullscreen.fullScreenEventName, _toggleFullscreen);\n\t            }\n\t\n\t            // Captions\n\t            _on(plyr.buttons.captions, 'click', _toggleCaptions);\n\t\n\t            // Seek tooltip\n\t            _on(plyr.progress.container, 'mouseenter mouseleave mousemove', _updateSeekTooltip);\n\t\n\t            // Toggle controls visibility based on mouse movement\n\t            if (config.hideControls) {\n\t                // Toggle controls on mouse events and entering fullscreen\n\t                _on(plyr.container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', _toggleControls);\n\t\n\t                // Watch for cursor over controls so they don't hide when trying to interact\n\t                _on(plyr.controls, 'mouseenter mouseleave', function(event) {\n\t                    plyr.controls.hover = event.type === 'mouseenter';\n\t                });\n\t\n\t                 // Watch for cursor over controls so they don't hide when trying to interact\n\t                _on(plyr.controls, 'mousedown mouseup touchstart touchend touchcancel', function(event) {\n\t                    plyr.controls.pressed = _inArray(['mousedown', 'touchstart'], event.type);\n\t                });\n\t\n\t                // Focus in/out on controls\n\t                _on(plyr.controls, 'focus blur', _toggleControls, true);\n\t            }\n\t\n\t            // Adjust volume on scroll\n\t            _on(plyr.volume.input, 'wheel', function(event) {\n\t                event.preventDefault();\n\t\n\t                // Detect \"natural\" scroll - suppored on OS X Safari only\n\t                // Other browsers on OS X will be inverted until support improves\n\t                var inverted = event.webkitDirectionInvertedFromDevice,\n\t                    step = (config.volumeStep / 5);\n\t\n\t                // Scroll down (or up on natural) to decrease\n\t                if (event.deltaY < 0 || event.deltaX > 0) {\n\t                    if (inverted) {\n\t                        _decreaseVolume(step);\n\t                    } else {\n\t                        _increaseVolume(step);\n\t                    }\n\t                }\n\t\n\t                // Scroll up (or down on natural) to increase\n\t                if (event.deltaY > 0 || event.deltaX < 0) {\n\t                    if (inverted) {\n\t                        _increaseVolume(step);\n\t                    } else {\n\t                        _decreaseVolume(step);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t\n\t        // Listen for media events\n\t        function _mediaListeners() {\n\t            // Time change on media\n\t            _on(plyr.media, 'timeupdate seeking', _timeUpdate);\n\t\n\t            // Update manual captions\n\t            _on(plyr.media, 'timeupdate', _seekManualCaptions);\n\t\n\t            // Display duration\n\t            _on(plyr.media, 'durationchange loadedmetadata', _displayDuration);\n\t\n\t            // Handle the media finishing\n\t            _on(plyr.media, 'ended', function() {\n\t                // Show poster on end\n\t                if (plyr.type === 'video' && config.showPosterOnEnd) {\n\t                    // Clear\n\t                    if (plyr.type === 'video') {\n\t                        _setCaption();\n\t                    }\n\t\n\t                    // Restart\n\t                    _seek();\n\t\n\t                    // Re-load media\n\t                    plyr.media.load();\n\t                }\n\t            });\n\t\n\t            // Check for buffer progress\n\t            _on(plyr.media, 'progress playing', _updateProgress);\n\t\n\t            // Handle native mute\n\t            _on(plyr.media, 'volumechange', _updateVolume);\n\t\n\t            // Handle native play/pause\n\t            _on(plyr.media, 'play pause ended', _checkPlaying);\n\t\n\t            // Loading\n\t            _on(plyr.media, 'waiting canplay seeked', _checkLoading);\n\t\n\t            // Click video\n\t            if (config.clickToPlay && plyr.type !== 'audio') {\n\t                // Re-fetch the wrapper\n\t                var wrapper = _getElement('.' + config.classes.videoWrapper);\n\t\n\t                // Bail if there's no wrapper (this should never happen)\n\t                if (!wrapper) {\n\t                    return;\n\t                }\n\t\n\t                // Set cursor\n\t                wrapper.style.cursor = \"pointer\";\n\t\n\t                // On click play, pause ore restart\n\t                _on(wrapper, 'click', function() {\n\t                    // Touch devices will just show controls (if we're hiding controls)\n\t                    if (config.hideControls && plyr.browser.isTouch && !plyr.media.paused) {\n\t                        return;\n\t                    }\n\t\n\t                    if (plyr.media.paused) {\n\t                        _play();\n\t                    } else if (plyr.media.ended) {\n\t                        _seek();\n\t                        _play();\n\t                    } else {\n\t                        _pause();\n\t                    }\n\t                });\n\t            }\n\t\n\t            // Disable right click\n\t            if (config.disableContextMenu) {\n\t                _on(plyr.media, 'contextmenu', function(event) { event.preventDefault(); });\n\t            }\n\t\n\t            // Proxy events to container\n\t            // Bubble up key events for Edge\n\t            _on(plyr.media, config.events.concat(['keyup', 'keydown']).join(' '), function(event) {\n\t                _triggerEvent(plyr.container, event.type, true);\n\t            });\n\t        }\n\t\n\t        // Cancel current network requests\n\t        // See https://github.com/Selz/plyr/issues/174\n\t        function _cancelRequests() {\n\t            if (!_inArray(config.types.html5, plyr.type)) {\n\t                return;\n\t            }\n\t\n\t            // Remove child sources\n\t            var sources = plyr.media.querySelectorAll('source');\n\t            for (var i = 0; i < sources.length; i++) {\n\t                _remove(sources[i]);\n\t            }\n\t\n\t            // Set blank video src attribute\n\t            // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n\t            // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n\t            plyr.media.setAttribute('src', 'https://cdn.selz.com/plyr/blank.mp4');\n\t\n\t            // Load the new empty source\n\t            // This will cancel existing requests\n\t            // See https://github.com/Selz/plyr/issues/174\n\t            plyr.media.load();\n\t\n\t            // Debugging\n\t            _log('Cancelled network requests');\n\t        }\n\t\n\t        // Destroy an instance\n\t        // Event listeners are removed when elements are removed\n\t        // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n\t        function _destroy(callback, restore) {\n\t            // Bail if the element is not initialized\n\t            if (!plyr.init) {\n\t                return null;\n\t            }\n\t\n\t            // Type specific stuff\n\t            switch (plyr.type) {\n\t                case 'youtube':\n\t                    // Clear timers\n\t                    window.clearInterval(timers.buffering);\n\t                    window.clearInterval(timers.playing);\n\t\n\t                    // Destroy YouTube API\n\t                    plyr.embed.destroy();\n\t\n\t                    // Clean up\n\t                    cleanUp();\n\t\n\t                    break;\n\t\n\t                case 'vimeo':\n\t                    // Destroy Vimeo API\n\t                    // then clean up (wait, to prevent postmessage errors)\n\t                    plyr.embed.unload().then(cleanUp);\n\t\n\t                    // Vimeo does not always return\n\t                    timers.cleanUp = window.setTimeout(cleanUp, 200);\n\t\n\t                    break;\n\t\n\t                case 'video':\n\t                case 'audio':\n\t                    // Restore native video controls\n\t                    _toggleNativeControls(true);\n\t\n\t                    // Clean up\n\t                    cleanUp();\n\t\n\t                    break;\n\t            }\n\t\n\t            function cleanUp() {\n\t                clearTimeout(timers.cleanUp);\n\t\n\t                // Default to restore original element\n\t                if (!_is.boolean(restore)) {\n\t                    restore = true;\n\t                }\n\t\n\t                // Callback\n\t                if (_is.function(callback)) {\n\t                    callback.call(original);\n\t                }\n\t\n\t                // Bail if we don't need to restore the original element\n\t                if (!restore) {\n\t                    return;\n\t                }\n\t\n\t                // Remove init flag\n\t                plyr.init = false;\n\t\n\t                // Replace the container with the original element provided\n\t                plyr.container.parentNode.replaceChild(original, plyr.container);\n\t\n\t                // Allow overflow (set on fullscreen)\n\t                document.body.style.overflow = '';\n\t\n\t                // Event\n\t                _triggerEvent(original, 'destroyed', true);\n\t            }\n\t        }\n\t\n\t        // Setup a player\n\t        function _init() {\n\t            // Bail if the element is initialized\n\t            if (plyr.init) {\n\t                return null;\n\t            }\n\t\n\t            // Setup the fullscreen api\n\t            fullscreen = _fullscreen();\n\t\n\t            // Sniff out the browser\n\t            plyr.browser = _browserSniff();\n\t\n\t            // Bail if nothing to setup\n\t            if (!_is.htmlElement(plyr.media)) {\n\t                return;\n\t            }\n\t\n\t            // Load saved settings from localStorage\n\t            _setupStorage();\n\t\n\t            // Set media type based on tag or data attribute\n\t            // Supported: video, audio, vimeo, youtube\n\t            var tagName = media.tagName.toLowerCase();\n\t            if (tagName === 'div') {\n\t                plyr.type     = media.getAttribute('data-type');\n\t                plyr.embedId  = media.getAttribute('data-video-id');\n\t\n\t                // Clean up\n\t                media.removeAttribute('data-type');\n\t                media.removeAttribute('data-video-id');\n\t            } else {\n\t                plyr.type           = tagName;\n\t                config.crossorigin  = (media.getAttribute('crossorigin') !== null);\n\t                config.autoplay     = (config.autoplay || (media.getAttribute('autoplay') !== null));\n\t                config.loop         = (config.loop || (media.getAttribute('loop') !== null));\n\t            }\n\t\n\t            // Check for support\n\t            plyr.supported = supported(plyr.type);\n\t\n\t            // If no native support, bail\n\t            if (!plyr.supported.basic) {\n\t                return;\n\t            }\n\t\n\t            // Wrap media\n\t            plyr.container = _wrap(media, document.createElement('div'));\n\t\n\t            // Allow focus to be captured\n\t            plyr.container.setAttribute('tabindex', 0);\n\t\n\t            // Add style hook\n\t            _toggleStyleHook();\n\t\n\t            // Debug info\n\t            _log('' + plyr.browser.name + ' ' + plyr.browser.version);\n\t\n\t            // Setup media\n\t            _setupMedia();\n\t\n\t            // Setup interface\n\t            // If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now\n\t            if (_inArray(config.types.html5, plyr.type) || (_inArray(config.types.embed, plyr.type) && !plyr.supported.full)) {\n\t                // Setup UI\n\t                _setupInterface();\n\t\n\t                // Call ready\n\t                _ready();\n\t\n\t                // Set title on button and frame\n\t                _setTitle();\n\t            }\n\t\n\t            // Successful setup\n\t            plyr.init = true;\n\t        }\n\t\n\t        // Setup the UI\n\t        function _setupInterface() {\n\t            // Don't setup interface if no support\n\t            if (!plyr.supported.full) {\n\t                _warn('Basic support only', plyr.type);\n\t\n\t                // Remove controls\n\t                _remove(_getElement(config.selectors.controls.wrapper));\n\t\n\t                // Remove large play\n\t                _remove(_getElement(config.selectors.buttons.play));\n\t\n\t                // Restore native controls\n\t                _toggleNativeControls(true);\n\t\n\t                // Bail\n\t                return;\n\t            }\n\t\n\t            // Inject custom controls if not present\n\t            var controlsMissing = !_getElements(config.selectors.controls.wrapper).length;\n\t            if (controlsMissing) {\n\t                // Inject custom controls\n\t                _injectControls();\n\t            }\n\t\n\t            // Find the elements\n\t            if (!_findElements()) {\n\t                return;\n\t            }\n\t\n\t            // If the controls are injected, re-bind listeners for controls\n\t            if (controlsMissing) {\n\t                _controlListeners();\n\t            }\n\t\n\t            // Media element listeners\n\t            _mediaListeners();\n\t\n\t            // Remove native controls\n\t            _toggleNativeControls();\n\t\n\t            // Setup fullscreen\n\t            _setupFullscreen();\n\t\n\t            // Captions\n\t            _setupCaptions();\n\t\n\t            // Set volume\n\t            _setVolume();\n\t            _updateVolume();\n\t\n\t            // Reset time display\n\t            _timeUpdate();\n\t\n\t            // Update the UI\n\t            _checkPlaying();\n\t        }\n\t\n\t        api = {\n\t            getOriginal:        function() { return original; },\n\t            getContainer:       function() { return plyr.container },\n\t            getEmbed:           function() { return plyr.embed; },\n\t            getMedia:           function() { return plyr.media; },\n\t            getType:            function() { return plyr.type; },\n\t            getDuration:        _getDuration,\n\t            getCurrentTime:     function() { return plyr.media.currentTime; },\n\t            getVolume:          function() { return plyr.media.volume; },\n\t            isMuted:            function() { return plyr.media.muted; },\n\t            isReady:            function() { return _hasClass(plyr.container, config.classes.ready); },\n\t            isLoading:          function() { return _hasClass(plyr.container, config.classes.loading); },\n\t            isPaused:           function() { return plyr.media.paused; },\n\t            on:                 function(event, callback) { _on(plyr.container, event, callback); return this; },\n\t            play:               _play,\n\t            pause:              _pause,\n\t            stop:               function() { _pause(); _seek(); },\n\t            restart:            _seek,\n\t            rewind:             _rewind,\n\t            forward:            _forward,\n\t            seek:               _seek,\n\t            source:             _source,\n\t            poster:             _updatePoster,\n\t            setVolume:          _setVolume,\n\t            togglePlay:         _togglePlay,\n\t            toggleMute:         _toggleMute,\n\t            toggleCaptions:     _toggleCaptions,\n\t            toggleFullscreen:   _toggleFullscreen,\n\t            toggleControls:     _toggleControls,\n\t            isFullscreen:       function() { return plyr.isFullscreen || false; },\n\t            support:            function(mimeType) { return _supportMime(plyr, mimeType); },\n\t            destroy:            _destroy\n\t        };\n\t\n\t        // Everything done\n\t        function _ready() {\n\t            // Ready event at end of execution stack\n\t            window.setTimeout(function() {\n\t                _triggerEvent(plyr.media, 'ready');\n\t            }, 0);\n\t\n\t            // Set class hook on media element\n\t            _toggleClass(plyr.media, defaults.classes.setup, true);\n\t\n\t            // Set container class for ready\n\t            _toggleClass(plyr.container, config.classes.ready, true);\n\t\n\t            // Store a refernce to instance\n\t            plyr.media.plyr = api;\n\t\n\t            // Autoplay\n\t            if (config.autoplay) {\n\t                _play();\n\t            }\n\t        }\n\t\n\t        // Initialize instance\n\t        _init();\n\t\n\t        // If init failed, return null\n\t        if (!plyr.init) {\n\t            return null;\n\t        }\n\t\n\t        return api;\n\t    }\n\t\n\t    // Load a sprite\n\t    function loadSprite(url, id) {\n\t        var x = new XMLHttpRequest();\n\t\n\t        // If the id is set and sprite exists, bail\n\t        if (_is.string(id) && _is.htmlElement(document.querySelector('#' + id))) {\n\t            return;\n\t        }\n\t\n\t        // Create placeholder (to prevent loading twice)\n\t        var container = document.createElement('div');\n\t        container.setAttribute('hidden', '');\n\t        if (_is.string(id)) {\n\t            container.setAttribute('id', id);\n\t        }\n\t        document.body.insertBefore(container, document.body.childNodes[0]);\n\t\n\t        // Check for CORS support\n\t        if ('withCredentials' in x) {\n\t            x.open('GET', url, true);\n\t        } else {\n\t            return;\n\t        }\n\t\n\t        // Inject hidden div with sprite on load\n\t        x.onload = function() {\n\t            container.innerHTML = x.responseText;\n\t        }\n\t\n\t        x.send();\n\t    }\n\t\n\t    // Check for support\n\t    function supported(type) {\n\t        var browser     = _browserSniff(),\n\t            isOldIE     = (browser.isIE && browser.version <= 9),\n\t            isIos       = browser.isIos,\n\t            isIphone    = browser.isIphone,\n\t            audioSupport = !!document.createElement('audio').canPlayType,\n\t            videoSupport = !!document.createElement('video').canPlayType,\n\t            basic       = false,\n\t            full        = false;\n\t\n\t        switch (type) {\n\t            case 'video':\n\t                basic = videoSupport;\n\t                full  = (basic && (!isOldIE && !isIphone));\n\t                break;\n\t\n\t            case 'audio':\n\t                basic = audioSupport;\n\t                full  = (basic && !isOldIE);\n\t                break;\n\t\n\t            // Vimeo does not seem to be supported on iOS via API\n\t            // Issue raised https://github.com/vimeo/player.js/issues/87\n\t            case 'vimeo':\n\t                basic = true;\n\t                full = (!isOldIE && !isIos);\n\t                break;\n\t\n\t            case 'youtube':\n\t                basic = true;\n\t                full = (!isOldIE && !isIos);\n\t\n\t                // YouTube seems to work on iOS 10+ on iPad\n\t                if (isIos && !isIphone && browser.version >= 10) {\n\t                    full = true;\n\t                }\n\t\n\t                break;\n\t\n\t            case 'soundcloud':\n\t                basic = true;\n\t                full  = (!isOldIE && !isIphone);\n\t                break;\n\t\n\t            default:\n\t                basic = (audioSupport && videoSupport);\n\t                full  = (basic && !isOldIE);\n\t        }\n\t\n\t        return {\n\t            basic:  basic,\n\t            full:   full\n\t        };\n\t    }\n\t\n\t    // Setup function\n\t    function setup(targets, options) {\n\t        // Get the players\n\t        var players     = [],\n\t            instances   = [],\n\t            selector    = [defaults.selectors.html5, defaults.selectors.embed].join(',');\n\t\n\t        // Select the elements\n\t        if (_is.string(targets)) {\n\t            // String selector passed\n\t            targets = document.querySelectorAll(targets);\n\t        }  else if (_is.htmlElement(targets)) {\n\t            // Single HTMLElement passed\n\t            targets = [targets];\n\t        }  else if (!_is.nodeList(targets) && !_is.array(targets) && !_is.string(targets))  {\n\t            // No selector passed, possibly options as first argument\n\t            // If options are the first argument\n\t            if (_is.undefined(options) && _is.object(targets)) {\n\t                options = targets;\n\t            }\n\t\n\t            // Use default selector\n\t            targets = document.querySelectorAll(selector);\n\t        }\n\t\n\t        // Convert NodeList to array\n\t        if (_is.nodeList(targets)) {\n\t            targets = Array.prototype.slice.call(targets);\n\t        }\n\t\n\t        // Bail if disabled or no basic support\n\t        // You may want to disable certain UAs etc\n\t        if (!supported().basic || !targets.length) {\n\t            return false;\n\t        }\n\t\n\t        // Add to container list\n\t        function add(target, media) {\n\t            if (!_hasClass(media, defaults.classes.hook)) {\n\t                players.push({\n\t                    // Always wrap in a <div> for styling\n\t                    //container:  _wrap(media, document.createElement('div')),\n\t                    // Could be a container or the media itself\n\t                    target:     target,\n\t                    // This should be the <video>, <audio> or <div> (YouTube/Vimeo)\n\t                    media:      media\n\t                });\n\t            }\n\t        }\n\t\n\t        // Check if the targets have multiple media elements\n\t        for (var i = 0; i < targets.length; i++) {\n\t            var target = targets[i];\n\t\n\t            // Get children\n\t            var children = target.querySelectorAll(selector);\n\t\n\t            // If there's more than one media element child, wrap them\n\t            if (children.length) {\n\t                for (var x = 0; x < children.length; x++) {\n\t                    add(target, children[x]);\n\t                }\n\t            } else if (_matches(target, selector)) {\n\t                // Target is media element\n\t                add(target, target);\n\t            }\n\t        }\n\t\n\t        // Create a player instance for each element\n\t        players.forEach(function(player) {\n\t            var element     = player.target,\n\t                media       = player.media,\n\t                match       = false;\n\t\n\t            // The target element can also be the media element\n\t            if (media === element) {\n\t                match = true;\n\t            }\n\t\n\t            // Setup a player instance and add to the element\n\t            // Create instance-specific config\n\t            var data = {};\n\t\n\t            // Try parsing data attribute config\n\t            try { data = JSON.parse(element.getAttribute('data-plyr')); }\n\t            catch(e) { }\n\t\n\t            var config = _extend({}, defaults, options, data);\n\t\n\t            // Bail if not enabled\n\t            if (!config.enabled) {\n\t                return null;\n\t            }\n\t\n\t            // Create new instance\n\t            var instance = new Plyr(media, config);\n\t\n\t            // Go to next if setup failed\n\t            if (!_is.object(instance)) {\n\t                return;\n\t            }\n\t\n\t            // Listen for events if debugging\n\t            if (config.debug) {\n\t                var events = config.events.concat(['setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);\n\t\n\t                _on(instance.getContainer(), events.join(' '), function(event) {\n\t                    console.log([config.logPrefix, 'event:', event.type].join(' '), event.detail.plyr);\n\t                });\n\t            }\n\t\n\t            // Callback\n\t            _event(instance.getContainer(), 'setup', true, {\n\t                plyr: instance\n\t            });\n\t\n\t            // Add to return array even if it's already setup\n\t            instances.push(instance);\n\t        });\n\t\n\t        return instances;\n\t    }\n\t\n\t    // Get all instances within a provided container\n\t    function get(container) {\n\t        if (_is.string(container)) {\n\t            // Get selector if string passed\n\t            container = document.querySelector(container);\n\t        } else if (_is.undefined(container)) {\n\t            // Use body by default to get all on page\n\t            container = document.body;\n\t        }\n\t\n\t        // If we have a HTML element\n\t        if (_is.htmlElement(container)) {\n\t            var elements = container.querySelectorAll('.' + defaults.classes.setup),\n\t                instances = [];\n\t\n\t            Array.prototype.slice.call(elements).forEach(function(element) {\n\t                if (_is.object(element.plyr)) {\n\t                    instances.push(element.plyr);\n\t                }\n\t            });\n\t\n\t            return instances;\n\t        }\n\t\n\t        return [];\n\t    }\n\t\n\t    return {\n\t        setup:      setup,\n\t        supported:  supported,\n\t        loadSprite: loadSprite,\n\t        get:        get\n\t    };\n\t}));\n\t\n\t// Custom event polyfill\n\t// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n\t(function () {\n\t    if (typeof window.CustomEvent === 'function') {\n\t        return;\n\t    }\n\t\n\t    function CustomEvent(event, params) {\n\t        params = params || { bubbles: false, cancelable: false, detail: undefined };\n\t        var evt = document.createEvent('CustomEvent');\n\t        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t        return evt;\n\t    }\n\t\n\t    CustomEvent.prototype = window.Event.prototype;\n\t\n\t    window.CustomEvent = CustomEvent;\n\t})();\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** static/js/video.e6e9fb22.chunk.js\n **/","import axios from 'axios';\r\nimport config from '../../config/default.config';\r\nimport { FETCH_COURSE_SUCCESS , FETCH_COURSE_LIST_SUCCESS} from '../constants'\r\n\r\nfunction fetchCourseListSuccess(data){\r\n  return{\r\n    type:FETCH_COURSE_LIST_SUCCESS,\r\n    data\r\n  }\r\n}\r\n\r\nfunction fetchCourseSuccess(data){\r\n  return{\r\n    type:FETCH_COURSE_SUCCESS,\r\n    data\r\n  }\r\n}\r\n\r\n\r\n//根据课程分类id获取所有id\r\nexport function fetchCourseByCourseTypeId(id){\r\n  return (dispatch)=>{\r\n    axios.get(config.API_URL+`/courseType/${id}/course`).then(function(response){\r\n      if(response.status !== 200 && response.data.meta.code !== 200){\r\n        throw new Error(\"Bad response from server\");\r\n      }\r\n      return response.data.data;\r\n    }).then(function(data){\r\n      return dispatch(fetchCourseListSuccess(data));\r\n    })\r\n  }\r\n}\r\n\r\n//根据课程id获取详情\r\nexport function fetchCourseById(id){\r\n  return (dispatch)=>{\r\n    axios.get(config.API_URL+`/course/${id}`).then(function(response){\r\n      if(response.status !== 200 && response.data.meta.code !== 200){\r\n        throw new Error(\"Bad response from server\");\r\n      }\r\n      return response.data.data;\r\n    }).then(function(data){\r\n      return dispatch(fetchCourseSuccess(data));\r\n    })\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/actions/courseActions.js\n **/","import axios from 'axios';\r\nimport config from '../../config/default.config';\r\nimport { FETCH_VIDEO_SUCCESS } from '../constants'\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction fetchVideoSuccess(data){\r\n  return{\r\n    type:FETCH_VIDEO_SUCCESS,\r\n    data\r\n  }\r\n}\r\n\r\n\r\n//根据课程id获取详情\r\nexport function fetchVideoById(id,token,issued){\r\n  console.log(\"token\",token);\r\n\r\n  return (dispatch)=>{\r\n    axios.get(config.API_URL+`/course/video/${id}`,{\r\n       headers: {\r\n         'x-token': `${token}`,\r\n         'x-token-issued': `${issued}`,\r\n       }\r\n    }).then(function(response){\r\n      if(response.status !== 200 && response.data.meta.code !== 200){\r\n        throw new Error(\"Bad response from server\");\r\n      }\r\n      return response.data.data;\r\n    }).then(function(data){\r\n      return dispatch(fetchVideoSuccess(data));\r\n    })\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/actions/videoAction.js\n **/","import React, { PropTypes } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport plyr from 'plyr';\r\nimport 'plyr/dist/plyr.css';\r\n\r\n\r\nclass PlyrMidea extends React.Component {\r\n  static propTypes = {\r\n    'options': PropTypes.object,  // this is an options object from the docs\r\n    'source': PropTypes.object  // this is a source object from the docs\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps, nextState){\r\n    this.player.source(nextProps.source);\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.player = plyr.setup(ReactDOM.findDOMNode(this.refs.videoPlayer), this.props.options)[0];\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    this.player.destroy();\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <video className='js-plyr plyr' ref=\"videoPlayer\" >\r\n      </video>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlyrMidea;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/components/PlyrMidea.js\n **/","import React, {Component} from \"react\";\r\nimport radium from 'radium';\r\nimport { connect } from 'react-redux';\r\nimport RaisedButton from 'material-ui/RaisedButton';\r\nimport {  Link } from 'react-router';\r\n\r\nimport { fetchVideoById } from '../actions/videoAction';\r\nimport { fetchCourseById } from '../actions/courseActions';\r\n//import Madia from '../components/Media';\r\nimport PlyrMidea from '../components/PlyrMidea'\r\nimport bgQknow from '../images/qknow.jpg';\r\n\r\n\r\n\r\nconst style = {\r\n  base:{\r\n\r\n  },\r\n  video:{\r\n    height:700\r\n  },\r\n  couseName:{\r\n    fontSize:30\r\n  },\r\n  des:{\r\n    marginTop:20,\r\n    marginBottom:10\r\n  },\r\n  couseIntro:{\r\n    fontSize:18,\r\n    lineHeight:1.3\r\n  },\r\n  pre:{\r\n    marginRight:20\r\n  }\r\n}\r\n\r\n\r\nclass Video extends Component{\r\n  componentDidMount = ()=>{\r\n    let token = this.props.user.get(\"token\");\r\n    let issued = this.props.user.get(\"issued\");\r\n    this.props.onLoadVideo(this.props.params.id,token,issued);\r\n    this.props.onLoadCourse(this.props.params.courseId);\r\n  }\r\n\r\n\r\n\r\n\r\n  render(){\r\n    const { video } = this.props;\r\n\r\n    //上一节\r\n    const preButton = video.get('pre_video') ? (\r\n      <RaisedButton  containerElement={<Link to={`/course/${this.props.params.courseId}/video/${video.get('pre_video')}`} />}\r\n       label=\"上一节\"  target=\"_blank\" primary={true} style={style.pre} />\r\n    ) : (\r\n      <RaisedButton disabled label=\"上一节\" primary={true} style={style.pre} />\r\n    );\r\n\r\n    //下一节\r\n    const nextButton = video.get('next_video') ? (\r\n      <RaisedButton containerElement={<Link to={`/course/${this.props.params.courseId}/video/${video.get('next_video')}`} />}\r\n       label=\"下一节\"  target=\"_blank\" primary={true}  />\r\n    ) : (\r\n      <RaisedButton disabled  label=\"下一节\" primary={true}  />\r\n    );\r\n\r\n    //http://qknow1.oss-cn-shanghai.aliyuncs.com/chrome_01_2016-08-29_222508.mp4\r\n    return (\r\n      <div className=\"container\" >\r\n        <div className=\"row\" >\r\n          <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\" style={[style.video]}>\r\n            <PlyrMidea source={{type:'video',\r\n                       sources:[\r\n                         {\r\n                           src:video.get(\"URL\"),\r\n                           type:'video/mp4'\r\n                          }\r\n                       ],\r\n                       poster:bgQknow\r\n                     }}\r\n             options={{}} >\r\n            </PlyrMidea>\r\n         </div>\r\n        </div>\r\n        <div className=\"row between-lg\" style={[style.des]}>\r\n          <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\" >\r\n            <span style={[style.couseName]}>{video.get('title')}</span>\r\n          </div>\r\n          <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\" >\r\n            <div className=\"row end-xs\" >\r\n              <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                {preButton}\r\n                {nextButton}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\" >\r\n          <div className=\"col-xs-8 col-sm-8 col-md-8 col-lg-8\">\r\n              <span style={[style.couseIntro]}>\r\n              {video.get('sub_title')}\r\n              </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      video:state.video,\r\n      course:state.course,\r\n      user:state.user\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onLoadVideo:(id,token,issued)=>{\r\n      dispatch(fetchVideoById(id,token,issued))\r\n    },\r\n    onLoadCourse:(id)=>{\r\n      dispatch(fetchCourseById(id))\r\n    }\r\n\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(radium(Video));\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/containers/Video.js\n **/","exports = module.exports = require(\"../../css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".plyr:focus,.plyr input[type=range]:focus{outline:0}.plyr .plyr__video-embed iframe,.plyr__tooltip{pointer-events:none}@-webkit-keyframes plyr-progress{to{background-position:25px 0}}@keyframes plyr-progress{to{background-position:25px 0}}.plyr{position:relative;max-width:100%;min-width:200px;font-family:Avenir,Avenir Next,Helvetica Neue,Segoe UI,Helvetica,Arial,sans-serif;direction:ltr}.plyr,.plyr *,.plyr :after,.plyr :before{box-sizing:border-box}.plyr a,.plyr button,.plyr input,.plyr label{-ms-touch-action:manipulation;touch-action:manipulation}.plyr audio,.plyr video{width:100%;height:auto;vertical-align:middle;border-radius:inherit}.plyr input[type=range]{display:block;height:20px;width:100%;margin:0;padding:0;vertical-align:middle;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;background:0 0}.plyr input[type=range]::-webkit-slider-runnable-track{height:8px;background:0 0;border:0;border-radius:4px;-webkit-user-select:none;user-select:none}.plyr input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;margin-top:-4px;position:relative;height:16px;width:16px;background:#fff;border:2px solid transparent;border-radius:100%;-webkit-transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease,-webkit-transform .2s ease;box-shadow:0 1px 1px rgba(0,0,0,.15),0 0 0 1px rgba(0,0,0,.15);box-sizing:border-box}.plyr input[type=range]::-moz-range-track{height:8px;background:0 0;border:0;border-radius:4px;-moz-user-select:none;user-select:none}.plyr input[type=range]::-moz-range-thumb{position:relative;height:16px;width:16px;background:#fff;border:2px solid transparent;border-radius:100%;-webkit-transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease,-webkit-transform .2s ease;box-shadow:0 1px 1px rgba(0,0,0,.15),0 0 0 1px rgba(0,0,0,.15);box-sizing:border-box}.plyr input[type=range]::-ms-track{height:8px;background:0 0;border:0;color:transparent}.plyr input[type=range]::-ms-fill-upper{height:8px;background:0 0;border:0;border-radius:4px;-ms-user-select:none;user-select:none}.plyr input[type=range]::-ms-fill-lower{height:8px;border:0;border-radius:4px;-ms-user-select:none;user-select:none;background:#3498db}.plyr input[type=range]::-ms-thumb{position:relative;height:16px;width:16px;background:#fff;border:2px solid transparent;border-radius:100%;-webkit-transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,-webkit-transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease;transition:background .2s ease,border .2s ease,transform .2s ease,-webkit-transform .2s ease;box-shadow:0 1px 1px rgba(0,0,0,.15),0 0 0 1px rgba(0,0,0,.15);box-sizing:border-box;margin-top:0}.plyr input[type=range]::-ms-tooltip{display:none}.plyr input[type=range]::-moz-focus-outer{border:0}.plyr input[type=range].tab-focus:focus{outline-offset:3px}.plyr input[type=range]:active::-webkit-slider-thumb{background:#3498db;border-color:#fff;-webkit-transform:scale(1.25);transform:scale(1.25)}.plyr input[type=range]:active::-moz-range-thumb{background:#3498db;border-color:#fff;transform:scale(1.25)}.plyr input[type=range]:active::-ms-thumb{background:#3498db;border-color:#fff;transform:scale(1.25)}.plyr--video input[type=range].tab-focus:focus{outline:1px dotted hsla(0,0%,100%,.5)}.plyr--audio input[type=range].tab-focus:focus{outline:1px dotted rgba(86,93,100,.5)}.plyr__sr-only{clip:rect(1px,1px,1px,1px);overflow:hidden;position:absolute!important;padding:0!important;border:0!important;height:1px!important;width:1px!important}.plyr__video-wrapper{position:relative;background:#000;border-radius:inherit}.plyr__video-embed{padding-bottom:56.25%;height:0;border-radius:inherit;overflow:hidden;z-index:0}.plyr__video-embed iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.plyr__video-embed>div{position:relative;padding-bottom:200%;-webkit-transform:translateY(-35.95%);transform:translateY(-35.95%)}.plyr video::-webkit-media-text-track-container{display:none}.plyr__captions{display:none;position:absolute;bottom:0;left:0;width:100%;padding:20px;-webkit-transform:translateY(-40px);transform:translateY(-40px);-webkit-transition:-webkit-transform .3s ease;transition:-webkit-transform .3s ease;transition:transform .3s ease;transition:transform .3s ease,-webkit-transform .3s ease;color:#fff;font-size:16px;text-align:center;font-weight:400}.plyr__captions span{border-radius:2px;padding:3px 10px;background:rgba(0,0,0,.7);-webkit-box-decoration-break:clone;box-decoration-break:clone;line-height:150%}.plyr__captions span:empty{display:none}@media (min-width:768px){.plyr__captions{font-size:24px}}.plyr--captions-active .plyr__captions{display:block}.plyr--hide-controls .plyr__captions{-webkit-transform:translateY(-15px);transform:translateY(-15px)}@media (min-width:1024px){.plyr--fullscreen-active .plyr__captions{font-size:32px}}.plyr ::-webkit-media-controls{display:none}.plyr__controls{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;line-height:1;text-align:center}.plyr__controls .plyr__progress,.plyr__controls .plyr__time,.plyr__controls>button{margin-left:5px}.plyr__controls .plyr__progress:first-child,.plyr__controls .plyr__time:first-child,.plyr__controls>button:first-child{margin-left:0}.plyr__controls .plyr__volume{margin-left:5px}.plyr__controls [data-plyr=pause]{margin-left:0}.plyr__controls button{position:relative;display:inline-block;-ms-flex-negative:0;flex-shrink:0;overflow:visible;vertical-align:middle;padding:7px;border:0;background:0 0;border-radius:3px;cursor:pointer;-webkit-transition:background .3s ease,color .3s ease,opacity .3s ease;transition:background .3s ease,color .3s ease,opacity .3s ease;color:inherit}.plyr__controls button svg{width:18px;height:18px;display:block;fill:currentColor}.plyr__controls button:focus{outline:0}.plyr__controls .icon--captions-on,.plyr__controls .icon--exit-fullscreen,.plyr__controls .icon--muted{display:none}@media (min-width:480px){.plyr__controls .plyr__progress,.plyr__controls .plyr__time,.plyr__controls>button{margin-left:10px}}.plyr--hide-controls .plyr__controls{opacity:0;pointer-events:none}.plyr--video .plyr__controls{position:absolute;left:0;right:0;bottom:0;z-index:2;padding:50px 10px 10px;background:-webkit-linear-gradient(transparent,rgba(0,0,0,.5));background:linear-gradient(transparent,rgba(0,0,0,.5));border-bottom-left-radius:inherit;border-bottom-right-radius:inherit;color:#fff;-webkit-transition:opacity .3s ease;transition:opacity .3s ease}.plyr--video .plyr__controls button.tab-focus:focus,.plyr--video .plyr__controls button:hover{background:#3498db;color:#fff}.plyr--audio .plyr__controls{padding:10px;border-radius:inherit;background:#fff;border:1px solid #dbe3e8;color:#565d64}.plyr--audio .plyr__controls button.tab-focus:focus,.plyr--audio .plyr__controls button:hover,.plyr__play-large{background:#3498db;color:#fff}.plyr__play-large{display:none;position:absolute;z-index:1;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);padding:10px;border:4px solid currentColor;border-radius:100%;box-shadow:0 1px 1px rgba(0,0,0,.15);-webkit-transition:all .3s ease;transition:all .3s ease}.plyr__play-large svg{position:relative;left:2px;width:20px;height:20px;display:block;fill:currentColor}.plyr__play-large:focus{outline:1px dotted hsla(0,0%,100%,.5)}.plyr .plyr__play-large{display:inline-block}.plyr--audio .plyr__play-large,.plyr--playing .plyr__controls [data-plyr=play],.plyr__controls [data-plyr=pause]{display:none}.plyr--playing .plyr__play-large{opacity:0;visibility:hidden}.plyr--playing .plyr__controls [data-plyr=pause]{display:inline-block}.plyr--captions-active .plyr__controls .icon--captions-on,.plyr--fullscreen-active .icon--exit-fullscreen,.plyr--muted .plyr__controls .icon--muted{display:block}.plyr--captions-active .plyr__controls .icon--captions-on+svg,.plyr--fullscreen-active .icon--exit-fullscreen+svg,.plyr--muted .plyr__controls .icon--muted+svg,.plyr [data-plyr=captions],.plyr [data-plyr=fullscreen]{display:none}.plyr--captions-enabled [data-plyr=captions],.plyr--fullscreen-enabled [data-plyr=fullscreen]{display:inline-block}.plyr__tooltip{position:absolute;z-index:2;bottom:100%;margin-bottom:10px;padding:5px 7.5px;opacity:0;background:rgba(0,0,0,.7);border-radius:3px;color:#fff;font-size:14px;line-height:1.3;-webkit-transform:translate(-50%,10px) scale(.8);transform:translate(-50%,10px) scale(.8);-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transition:opacity .2s ease .1s,-webkit-transform .2s ease .1s;transition:opacity .2s ease .1s,-webkit-transform .2s ease .1s;transition:transform .2s ease .1s,opacity .2s ease .1s;transition:transform .2s ease .1s,opacity .2s ease .1s,-webkit-transform .2s ease .1s}.plyr__tooltip:before{content:\\\"\\\";position:absolute;width:0;height:0;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);bottom:-4px;border-right:4px solid transparent;border-top:4px solid rgba(0,0,0,.7);border-left:4px solid transparent;z-index:2}.plyr__tooltip--visible,.plyr button.tab-focus:focus .plyr__tooltip,.plyr button:hover .plyr__tooltip{opacity:1;-webkit-transform:translate(-50%) scale(1);transform:translate(-50%) scale(1)}.plyr button:hover .plyr__tooltip{z-index:3}.plyr__controls button:first-child .plyr__tooltip{left:0;-webkit-transform:translateY(10px) scale(.8);transform:translateY(10px) scale(.8);-webkit-transform-origin:0 100%;transform-origin:0 100%}.plyr__controls button:first-child .plyr__tooltip:before{left:16px}.plyr__controls button:last-child .plyr__tooltip{right:0;-webkit-transform:translateY(10px) scale(.8);transform:translateY(10px) scale(.8);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}.plyr__controls button:last-child .plyr__tooltip:before{left:auto;right:16px;-webkit-transform:translateX(50%);transform:translateX(50%)}.plyr__controls button:first-child .plyr__tooltip--visible,.plyr__controls button:first-child.tab-focus:focus .plyr__tooltip,.plyr__controls button:first-child:hover .plyr__tooltip,.plyr__controls button:last-child .plyr__tooltip--visible,.plyr__controls button:last-child.tab-focus:focus .plyr__tooltip,.plyr__controls button:last-child:hover .plyr__tooltip{-webkit-transform:translate(0) scale(1);transform:translate(0) scale(1)}.plyr__progress{position:relative;display:none;-ms-flex:1;-webkit-box-flex:1;flex:1}.plyr__progress input[type=range]{position:relative;z-index:2}.plyr__progress input[type=range]::-webkit-slider-runnable-track{background:0 0}.plyr__progress input[type=range]::-moz-range-track{background:0 0}.plyr__progress input[type=range]::-ms-fill-upper{background:0 0}.plyr__progress .plyr__tooltip{left:0}.plyr .plyr__progress{display:inline-block}.plyr__progress--buffer,.plyr__progress--played,.plyr__volume--display{position:absolute;left:0;top:50%;width:100%;height:8px;margin:-4px 0 0;padding:0;vertical-align:top;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;border-radius:100px}.plyr__progress--buffer::-webkit-progress-bar,.plyr__progress--played::-webkit-progress-bar,.plyr__volume--display::-webkit-progress-bar{background:0 0}.plyr__progress--buffer::-webkit-progress-value,.plyr__progress--played::-webkit-progress-value,.plyr__volume--display::-webkit-progress-value{background:currentColor;border-radius:100px;min-width:8px}.plyr__progress--buffer::-moz-progress-bar,.plyr__progress--played::-moz-progress-bar,.plyr__volume--display::-moz-progress-bar{background:currentColor;border-radius:100px;min-width:8px}.plyr__progress--buffer::-ms-fill,.plyr__progress--played::-ms-fill,.plyr__volume--display::-ms-fill{border-radius:100px}.plyr__progress--played,.plyr__volume--display{z-index:1;color:#3498db;background:0 0;-webkit-transition:none;transition:none}.plyr__progress--played::-webkit-progress-value,.plyr__volume--display::-webkit-progress-value{min-width:8px;max-width:99%;border-top-right-radius:0;border-bottom-right-radius:0;-webkit-transition:none;transition:none}.plyr__progress--played::-moz-progress-bar,.plyr__volume--display::-moz-progress-bar{min-width:8px;max-width:99%;border-top-right-radius:0;border-bottom-right-radius:0;-webkit-transition:none;transition:none}.plyr__progress--played::-ms-fill,.plyr__volume--display::-ms-fill{display:none}.plyr__progress--buffer::-webkit-progress-value{-webkit-transition:width .2s ease;transition:width .2s ease}.plyr__progress--buffer::-moz-progress-bar{-webkit-transition:width .2s ease;transition:width .2s ease}.plyr__progress--buffer::-ms-fill{-webkit-transition:width .2s ease;transition:width .2s ease}.plyr--video .plyr__progress--buffer,.plyr--video .plyr__volume--display{background:hsla(0,0%,100%,.25)}.plyr--video .plyr__progress--buffer{color:hsla(0,0%,100%,.25)}.plyr--audio .plyr__progress--buffer,.plyr--audio .plyr__volume--display{background:rgba(198,214,219,.66)}.plyr--audio .plyr__progress--buffer{color:rgba(198,214,219,.66)}.plyr--loading .plyr__progress--buffer{-webkit-animation:plyr-progress 1s linear infinite;animation:plyr-progress 1s linear infinite;background-size:25px 25px;background-repeat:repeat-x;background-image:-webkit-linear-gradient(135deg,rgba(0,0,0,.15) 25%,transparent 0,transparent 50%,rgba(0,0,0,.15) 0,rgba(0,0,0,.15) 75%,transparent 0,transparent);background-image:linear-gradient(-45deg,rgba(0,0,0,.15) 25%,transparent 0,transparent 50%,rgba(0,0,0,.15) 0,rgba(0,0,0,.15) 75%,transparent 0,transparent);color:transparent}.plyr--video.plyr--loading .plyr__progress--buffer{background-color:hsla(0,0%,100%,.25)}.plyr--audio.plyr--loading .plyr__progress--buffer{background-color:rgba(198,214,219,.66)}.plyr__time{display:inline-block;vertical-align:middle;font-size:14px}.plyr__time+.plyr__time{display:none}@media (min-width:768px){.plyr__time+.plyr__time{display:inline-block}}.plyr__time+.plyr__time:before{content:\\\"\\\\2044\\\";margin-right:10px}.plyr__volume{display:none}.plyr .plyr__volume{-ms-flex:1;-webkit-box-flex:1;flex:1;position:relative}.plyr .plyr__volume input[type=range]{position:relative;z-index:2}@media (min-width:480px){.plyr .plyr__volume{display:block;max-width:60px}}@media (min-width:768px){.plyr .plyr__volume{max-width:100px}}.plyr--is-ios .plyr__volume,.plyr--is-ios [data-plyr=mute]{display:none!important}.plyr--fullscreen-active{position:fixed;top:0;left:0;right:0;bottom:0;height:100%;width:100%;z-index:10000000;background:#000;border-radius:0!important}.plyr--fullscreen-active video{height:100%}.plyr--fullscreen-active .plyr__video-wrapper{height:100%;width:100%}.plyr--fullscreen-active .plyr__video-embed{overflow:visible}.plyr--fullscreen-active .plyr__controls{position:absolute;bottom:0;left:0;right:0}.plyr--fullscreen-active.plyr--vimeo .plyr__video-wrapper{height:0;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader?-autoprefixer!./~/postcss-loader!./~/plyr/dist/plyr.css\n ** module id = 304\n ** module chunks = 4\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js?-autoprefixer!../../postcss-loader/index.js!./plyr.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js?-autoprefixer!../../postcss-loader/index.js!./plyr.css\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js?-autoprefixer!../../postcss-loader/index.js!./plyr.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/plyr/dist/plyr.css\n ** module id = 312\n ** module chunks = 4\n **/","module.exports = __webpack_public_path__ + \"static/media/qknow.412422a0.jpg\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/images/qknow.jpg\n ** module id = 334\n ** module chunks = 4\n **/","// ==========================================================================\n// Plyr\n// plyr.js v2.0.11\n// https://github.com/selz/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n// Credits: http://paypal.github.io/accessible-html5-video-player/\n// ==========================================================================\n\n;(function(root, factory) {\n    'use strict';\n    /*global define,module*/\n\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(root, document);\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define([], function () { return factory(root, document); });\n    } else {\n        // Browser globals (root is window)\n        root.plyr = factory(root, document);\n    }\n}(typeof window !== 'undefined' ? window : this, function(window, document) {\n    'use strict';\n\n    // Globals\n    var fullscreen,\n    scroll = { x: 0, y: 0 },\n\n    // Default config\n    defaults = {\n        enabled:                true,\n        debug:                  false,\n        autoplay:               false,\n        loop:                   false,\n        seekTime:               10,\n        volume:                 10,\n        volumeMin:              0,\n        volumeMax:              10,\n        volumeStep:             1,\n        duration:               null,\n        displayDuration:        true,\n        loadSprite:             true,\n        iconPrefix:             'plyr',\n        iconUrl:                'https://cdn.plyr.io/2.0.11/plyr.svg',\n        clickToPlay:            true,\n        hideControls:           true,\n        showPosterOnEnd:        false,\n        disableContextMenu:     true,\n        keyboardShorcuts:       {\n            focused:            true,\n            global:             false\n        },\n        tooltips: {\n            controls:           false,\n            seek:               true\n        },\n        selectors: {\n            html5:              'video, audio',\n            embed:              '[data-type]',\n            editable:           'input, textarea, select, [contenteditable]',\n            container:          '.plyr',\n            controls: {\n                container:      null,\n                wrapper:        '.plyr__controls'\n            },\n            labels:             '[data-plyr]',\n            buttons: {\n                seek:           '[data-plyr=\"seek\"]',\n                play:           '[data-plyr=\"play\"]',\n                pause:          '[data-plyr=\"pause\"]',\n                restart:        '[data-plyr=\"restart\"]',\n                rewind:         '[data-plyr=\"rewind\"]',\n                forward:        '[data-plyr=\"fast-forward\"]',\n                mute:           '[data-plyr=\"mute\"]',\n                captions:       '[data-plyr=\"captions\"]',\n                fullscreen:     '[data-plyr=\"fullscreen\"]'\n            },\n            volume: {\n                input:          '[data-plyr=\"volume\"]',\n                display:        '.plyr__volume--display'\n            },\n            progress: {\n                container:      '.plyr__progress',\n                buffer:         '.plyr__progress--buffer',\n                played:         '.plyr__progress--played'\n            },\n            captions:           '.plyr__captions',\n            currentTime:        '.plyr__time--current',\n            duration:           '.plyr__time--duration'\n        },\n        classes: {\n            setup:              'plyr--setup',\n            ready:              'plyr--ready',\n            videoWrapper:       'plyr__video-wrapper',\n            embedWrapper:       'plyr__video-embed',\n            type:               'plyr--{0}',\n            stopped:            'plyr--stopped',\n            playing:            'plyr--playing',\n            muted:              'plyr--muted',\n            loading:            'plyr--loading',\n            hover:              'plyr--hover',\n            tooltip:            'plyr__tooltip',\n            hidden:             'plyr__sr-only',\n            hideControls:       'plyr--hide-controls',\n            isIos:              'plyr--is-ios',\n            isTouch:            'plyr--is-touch',\n            captions: {\n                enabled:        'plyr--captions-enabled',\n                active:         'plyr--captions-active'\n            },\n            fullscreen: {\n                enabled:        'plyr--fullscreen-enabled',\n                active:         'plyr--fullscreen-active'\n            },\n            tabFocus:           'tab-focus'\n        },\n        captions: {\n            defaultActive:      false\n        },\n        fullscreen: {\n            enabled:            true,\n            fallback:           true,\n            allowAudio:         false\n        },\n        storage: {\n            enabled:            true,\n            key:                'plyr'\n        },\n        controls:               ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'fullscreen'],\n        i18n: {\n            restart:            'Restart',\n            rewind:             'Rewind {seektime} secs',\n            play:               'Play',\n            pause:              'Pause',\n            forward:            'Forward {seektime} secs',\n            played:             'played',\n            buffered:           'buffered',\n            currentTime:        'Current time',\n            duration:           'Duration',\n            volume:             'Volume',\n            toggleMute:         'Toggle Mute',\n            toggleCaptions:     'Toggle Captions',\n            toggleFullscreen:   'Toggle Fullscreen',\n            frameTitle:         'Player for {title}'\n        },\n        types: {\n            embed:              ['youtube', 'vimeo', 'soundcloud'],\n            html5:              ['video', 'audio']\n        },\n        // URLs\n        urls: {\n            vimeo: {\n                api:            'https://player.vimeo.com/api/player.js',\n            },\n            youtube: {\n                api:            'https://www.youtube.com/iframe_api'\n            },\n            soundcloud: {\n                api:            'https://w.soundcloud.com/player/api.js'\n            }\n        },\n        // Custom control listeners\n        listeners: {\n            seek:               null,\n            play:               null,\n            pause:              null,\n            restart:            null,\n            rewind:             null,\n            forward:            null,\n            mute:               null,\n            volume:             null,\n            captions:           null,\n            fullscreen:         null\n        },\n        // Events to watch on HTML5 media elements\n        events:                 ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],\n        // Logging\n        logPrefix:              '[Plyr]'\n    };\n\n    // Credits: http://paypal.github.io/accessible-html5-video-player/\n    // Unfortunately, due to mixed support, UA sniffing is required\n    function _browserSniff() {\n        var ua = navigator.userAgent,\n            name = navigator.appName,\n            fullVersion = '' + parseFloat(navigator.appVersion),\n            majorVersion = parseInt(navigator.appVersion, 10),\n            nameOffset,\n            verOffset,\n            ix,\n            isIE = false,\n            isFirefox = false,\n            isChrome = false,\n            isSafari = false;\n\n        if ((navigator.appVersion.indexOf('Windows NT') !== -1) && (navigator.appVersion.indexOf('rv:11') !== -1)) {\n            // MSIE 11\n            isIE = true;\n            name = 'IE';\n            fullVersion = '11';\n        } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {\n            // MSIE\n            isIE = true;\n            name = 'IE';\n            fullVersion = ua.substring(verOffset + 5);\n        } else if ((verOffset = ua.indexOf('Chrome')) !== -1) {\n            // Chrome\n            isChrome = true;\n            name = 'Chrome';\n            fullVersion = ua.substring(verOffset + 7);\n        } else if ((verOffset = ua.indexOf('Safari')) !== -1) {\n            // Safari\n            isSafari = true;\n            name = 'Safari';\n            fullVersion = ua.substring(verOffset + 7);\n            if ((verOffset = ua.indexOf('Version')) !== -1) {\n                fullVersion = ua.substring(verOffset + 8);\n            }\n        } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {\n            // Firefox\n            isFirefox = true;\n            name = 'Firefox';\n            fullVersion = ua.substring(verOffset + 8);\n        } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {\n            // In most other browsers, 'name/version' is at the end of userAgent\n            name = ua.substring(nameOffset,verOffset);\n            fullVersion = ua.substring(verOffset + 1);\n\n            if (name.toLowerCase() === name.toUpperCase()) {\n                name = navigator.appName;\n            }\n        }\n\n        // Trim the fullVersion string at semicolon/space if present\n        if ((ix = fullVersion.indexOf(';')) !== -1) {\n            fullVersion = fullVersion.substring(0, ix);\n        }\n        if ((ix = fullVersion.indexOf(' ')) !== -1) {\n            fullVersion = fullVersion.substring(0, ix);\n        }\n\n        // Get major version\n        majorVersion = parseInt('' + fullVersion, 10);\n        if (isNaN(majorVersion)) {\n            fullVersion = '' + parseFloat(navigator.appVersion);\n            majorVersion = parseInt(navigator.appVersion, 10);\n        }\n\n        // Return data\n        return {\n            name:       name,\n            version:    majorVersion,\n            isIE:       isIE,\n            isFirefox:  isFirefox,\n            isChrome:   isChrome,\n            isSafari:   isSafari,\n            isIos:      /(iPad|iPhone|iPod)/g.test(navigator.platform),\n            isIphone:   /(iPhone|iPod)/g.test(navigator.userAgent),\n            isTouch:    'ontouchstart' in document.documentElement\n        };\n    }\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplyr.com/test/h5mt.html\n    function _supportMime(plyr, mimeType) {\n        var media = plyr.media;\n\n        if (plyr.type === 'video') {\n            // Check type\n            switch (mimeType) {\n                case 'video/webm':   return !!(media.canPlayType && media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, ''));\n                case 'video/mp4':    return !!(media.canPlayType && media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, ''));\n                case 'video/ogg':    return !!(media.canPlayType && media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, ''));\n            }\n        } else if (plyr.type === 'audio') {\n            // Check type\n            switch (mimeType) {\n                case 'audio/mpeg':   return !!(media.canPlayType && media.canPlayType('audio/mpeg;').replace(/no/, ''));\n                case 'audio/ogg':    return !!(media.canPlayType && media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, ''));\n                case 'audio/wav':    return !!(media.canPlayType && media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, ''));\n            }\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    }\n\n    // Inject a script\n    function _injectScript(source) {\n        if (document.querySelectorAll('script[src=\"' + source + '\"]').length) {\n            return;\n        }\n\n        var tag = document.createElement('script');\n        tag.src = source;\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    }\n\n    // Element exists in an array\n    function _inArray(haystack, needle) {\n        return Array.prototype.indexOf && (haystack.indexOf(needle) !== -1);\n    }\n\n    // Replace all\n    function _replaceAll(string, find, replace) {\n        return string.replace(new RegExp(find.replace(/([.*+?\\^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), replace);\n    }\n\n    // Wrap an element\n    function _wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        if (!elements.length) {\n            elements = [elements];\n        }\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        for (var i = elements.length - 1; i >= 0; i--) {\n            var child   = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n            var element = elements[i];\n\n            // Cache the current parent and sibling.\n            var parent  = element.parentNode;\n            var sibling = element.nextSibling;\n\n            // Wrap the element (is automatically removed from its current\n            // parent).\n            child.appendChild(element);\n\n            // If the element had a sibling, insert the wrapper before\n            // the sibling to maintain the HTML structure; otherwise, just\n            // append it to the parent.\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n\n            return child;\n        }\n    }\n\n    // Unwrap an element\n    // http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/\n    /*function _unwrap(wrapper) {\n        // Get the element's parent node\n        var parent = wrapper.parentNode;\n\n        // Move all children out of the element\n        while (wrapper.firstChild) {\n            parent.insertBefore(wrapper.firstChild, wrapper);\n        }\n\n        // Remove the empty element\n        parent.removeChild(wrapper);\n    }*/\n\n    // Remove an element\n    function _remove(element) {\n        if (!element) {\n            return;\n        }\n        element.parentNode.removeChild(element);\n    }\n\n    // Prepend child\n    function _prependChild(parent, element) {\n        parent.insertBefore(element, parent.firstChild);\n    }\n\n    // Set attributes\n    function _setAttributes(element, attributes) {\n        for (var key in attributes) {\n            element.setAttribute(key, (_is.boolean(attributes[key]) && attributes[key]) ? '' : attributes[key]);\n        }\n    }\n\n    // Insert a HTML element\n    function _insertElement(type, parent, attributes) {\n        // Create a new <element>\n        var element = document.createElement(type);\n\n        // Set all passed attributes\n        _setAttributes(element, attributes);\n\n        // Inject the new element\n        _prependChild(parent, element);\n    }\n\n    // Get a classname from selector\n    function _getClassname(selector) {\n        return selector.replace('.', '');\n    }\n\n    // Toggle class on an element\n    function _toggleClass(element, className, state) {\n        if (element) {\n            if (element.classList) {\n                element.classList[state ? 'add' : 'remove'](className);\n            } else {\n                var name = (' ' + element.className + ' ').replace(/\\s+/g, ' ').replace(' ' + className + ' ', '');\n                element.className = name + (state ? ' ' + className : '');\n            }\n        }\n    }\n\n    // Has class name\n    function _hasClass(element, className) {\n        if (element) {\n            if (element.classList) {\n                return element.classList.contains(className);\n            } else {\n                return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(element.className);\n            }\n        }\n        return false;\n    }\n\n    // Element matches selector\n    function _matches(element, selector) {\n        var p = Element.prototype;\n\n        var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {\n            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n        };\n\n        return f.call(element, selector);\n    }\n\n    // Bind along with custom handler\n    function _proxyListener(element, eventName, userListener, defaultListener, useCapture) {\n        _on(element, eventName, function(event) {\n            if (userListener) {\n                userListener.apply(element, [event]);\n            }\n            defaultListener.apply(element, [event]);\n        }, useCapture);\n    }\n\n    // Toggle event listener\n    function _toggleListener(element, events, callback, toggle, useCapture) {\n        var eventList = events.split(' ');\n\n        // Whether the listener is a capturing listener or not\n        // Default to false\n        if (!_is.boolean(useCapture)) {\n            useCapture = false;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (element instanceof NodeList) {\n            for (var x = 0; x < element.length; x++) {\n                if (element[x] instanceof Node) {\n                    _toggleListener(element[x], arguments[1], arguments[2], arguments[3]);\n                }\n            }\n            return;\n        }\n\n        // If a single node is passed, bind the event listener\n        for (var i = 0; i < eventList.length; i++) {\n            element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);\n        }\n    }\n\n    // Bind event\n    function _on(element, events, callback, useCapture) {\n        if (element) {\n            _toggleListener(element, events, callback, true, useCapture);\n        }\n    }\n\n    // Unbind event\n    /*function _off(element, events, callback, useCapture) {\n        if (element) {\n            _toggleListener(element, events, callback, false, useCapture);\n        }\n    }*/\n\n    // Trigger event\n    function _event(element, type, bubbles, properties) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Default bubbles to false\n        if (!_is.boolean(bubbles)) {\n            bubbles = false;\n        }\n\n        // Create and dispatch the event\n        var event = new CustomEvent(type, {\n            bubbles:    bubbles,\n            detail:     properties\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    }\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    function _toggleState(target, state) {\n        // Bail if no target\n        if (!target) {\n            return;\n        }\n\n        // Get state\n        state = (_is.boolean(state) ? state : !target.getAttribute('aria-pressed'));\n\n        // Set the attribute on target\n        target.setAttribute('aria-pressed', state);\n\n        return state;\n    }\n\n    // Get percentage\n    function _getPercentage(current, max) {\n        if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {\n            return 0;\n        }\n        return ((current / max) * 100).toFixed(2);\n    }\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    function _extend() {\n        // Get arguments\n        var objects = arguments;\n\n        // Bail if nothing to merge\n        if (!objects.length) {\n            return;\n        }\n\n        // Return first if specified but nothing to merge\n        if (objects.length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        var destination = Array.prototype.shift.call(objects),\n            length      = objects.length;\n\n        // Loop through all objects to merge\n        for (var i = 0; i < length; i++) {\n            var source = objects[i];\n\n            for (var property in source) {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    _extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            }\n        }\n\n        return destination;\n    }\n\n    // Check variable types\n    var _is = {\n        object: function(input) {\n            return input !== null && typeof(input) === 'object';\n        },\n        array: function(input) {\n            return input !== null && (typeof(input) === 'object' && input.constructor === Array);\n        },\n        number: function(input) {\n            return input !== null && (typeof(input) === 'number' && !isNaN(input - 0) || (typeof input === 'object' && input.constructor === Number));\n        },\n        string: function(input) {\n            return input !== null && (typeof input === 'string' || (typeof input === 'object' && input.constructor === String));\n        },\n        boolean: function(input) {\n            return input !== null && typeof input === 'boolean';\n        },\n        nodeList: function(input) {\n            return input !== null && input instanceof NodeList;\n        },\n        htmlElement: function(input) {\n            return input !== null && input instanceof HTMLElement;\n        },\n        function: function(input) {\n            return input !== null && typeof input === 'function';\n        },\n        undefined: function(input) {\n            return input !== null && typeof input === 'undefined';\n        }\n    };\n\n    // Parse YouTube ID from url\n    function _parseYouTubeId(url) {\n        var regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\n        return (url.match(regex)) ? RegExp.$2 : url;\n    }\n\n    // Parse Vimeo ID from url\n    function _parseVimeoId(url) {\n        var regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return (url.match(regex)) ? RegExp.$2 : url;\n    }\n\n    // Fullscreen API\n    function _fullscreen() {\n        var fullscreen = {\n                supportsFullScreen: false,\n                isFullScreen: function() { return false; },\n                requestFullScreen: function() {},\n                cancelFullScreen: function() {},\n                fullScreenEventName: '',\n                element: null,\n                prefix: ''\n            },\n            browserPrefixes = 'webkit o moz ms khtml'.split(' ');\n\n        // Check for native support\n        if (!_is.undefined(document.cancelFullScreen)) {\n            fullscreen.supportsFullScreen = true;\n        } else {\n            // Check for fullscreen support by vendor prefix\n            for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {\n                fullscreen.prefix = browserPrefixes[i];\n\n                if (!_is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {\n                    fullscreen.supportsFullScreen = true;\n                    break;\n                } else if (!_is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                    // Special case for MS (when isn't it?)\n                    fullscreen.prefix = 'ms';\n                    fullscreen.supportsFullScreen = true;\n                    break;\n                }\n            }\n        }\n\n        // Update methods to do something useful\n        if (fullscreen.supportsFullScreen) {\n            // Yet again Microsoft awesomeness,\n            // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n            fullscreen.fullScreenEventName = (fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange');\n\n            fullscreen.isFullScreen = function(element) {\n                if (_is.undefined(element)) {\n                    element = document.body;\n                }\n                switch (this.prefix) {\n                    case '':\n                        return document.fullscreenElement === element;\n                    case 'moz':\n                        return document.mozFullScreenElement === element;\n                    default:\n                        return document[this.prefix + 'FullscreenElement'] === element;\n                }\n            };\n            fullscreen.requestFullScreen = function(element) {\n                if (_is.undefined(element)) {\n                    element = document.body;\n                }\n                return (this.prefix === '') ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n            };\n            fullscreen.cancelFullScreen = function() {\n                return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n            };\n            fullscreen.element = function() {\n                return (this.prefix === '') ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];\n            };\n        }\n\n        return fullscreen;\n    }\n\n    // Local storage\n    var _storage = {\n        supported: (function() {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n            // see: https://github.com/Selz/plyr/issues/131\n            try {\n                // Add test item\n                window.localStorage.setItem('___test', 'OK');\n\n                // Get the test item\n                var result = window.localStorage.getItem('___test');\n\n                // Clean up\n                window.localStorage.removeItem('___test');\n\n                // Check if value matches\n                return (result === 'OK');\n            }\n            catch (e) {\n                return false;\n            }\n\n            return false;\n        })()\n    };\n\n    // Player instance\n    function Plyr(media, config) {\n        var plyr = this,\n        timers = {},\n        api;\n\n        // Set media\n        plyr.media = media;\n        var original = media.cloneNode(true);\n\n        // Trigger events, with plyr instance passed\n        function _triggerEvent(element, type, bubbles, properties) {\n            _event(element, type, bubbles, _extend({}, properties, {\n                plyr: api\n            }));\n        }\n\n        // Debugging\n        function _console(type, args) {\n            if (config.debug && window.console) {\n                args = Array.prototype.slice.call(args);\n\n                if (_is.string(config.logPrefix) && config.logPrefix.length) {\n                    args.unshift(config.logPrefix);\n                }\n\n                console[type].apply(console, args);\n            }\n        }\n        var _log = function() { _console('log', arguments) },\n            _warn = function() { _console('warn', arguments) };\n\n        // Log config options\n        _log('Config', config);\n\n        // Get icon URL\n        function _getIconUrl() {\n            return {\n                url:        config.iconUrl,\n                absolute:   (config.iconUrl.indexOf(\"http\") === 0) || plyr.browser.isIE\n            };\n        }\n\n        // Build the default HTML\n        function _buildControls() {\n            // Create html array\n            var html        = [],\n                iconUrl     = _getIconUrl(),\n                iconPath    = (!iconUrl.absolute ? iconUrl.url : '') + '#' + config.iconPrefix;\n\n            // Larger overlaid play button\n            if (_inArray(config.controls, 'play-large')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"play\" class=\"plyr__play-large\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-play\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.play + '</span>',\n                    '</button>'\n                );\n            }\n\n            html.push('<div class=\"plyr__controls\">');\n\n            // Restart button\n            if (_inArray(config.controls, 'restart')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"restart\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-restart\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.restart + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Rewind button\n            if (_inArray(config.controls, 'rewind')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"rewind\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-rewind\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.rewind + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Play Pause button\n            // TODO: This should be a toggle button really?\n            if (_inArray(config.controls, 'play')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"play\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-play\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.play + '</span>',\n                    '</button>',\n                    '<button type=\"button\" data-plyr=\"pause\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-pause\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.pause + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Fast forward button\n            if (_inArray(config.controls, 'fast-forward')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"fast-forward\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-fast-forward\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.forward + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Progress\n            if (_inArray(config.controls, 'progress')) {\n                // Create progress\n                html.push('<span class=\"plyr__progress\">',\n                    '<label for=\"seek{id}\" class=\"plyr__sr-only\">Seek</label>',\n                    '<input id=\"seek{id}\" class=\"plyr__progress--seek\" type=\"range\" min=\"0\" max=\"100\" step=\"0.1\" value=\"0\" data-plyr=\"seek\">',\n                    '<progress class=\"plyr__progress--played\" max=\"100\" value=\"0\" role=\"presentation\"></progress>',\n                    '<progress class=\"plyr__progress--buffer\" max=\"100\" value=\"0\">',\n                        '<span>0</span>% ' + config.i18n.buffered,\n                    '</progress>');\n\n                // Seek tooltip\n                if (config.tooltips.seek) {\n                    html.push('<span class=\"plyr__tooltip\">00:00</span>');\n                }\n\n                // Close\n                html.push('</span>');\n            }\n\n            // Media current time display\n            if (_inArray(config.controls, 'current-time')) {\n                html.push(\n                    '<span class=\"plyr__time\">',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.currentTime + '</span>',\n                        '<span class=\"plyr__time--current\">00:00</span>',\n                    '</span>'\n                );\n            }\n\n            // Media duration display\n            if (_inArray(config.controls, 'duration')) {\n                html.push(\n                    '<span class=\"plyr__time\">',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.duration + '</span>',\n                        '<span class=\"plyr__time--duration\">00:00</span>',\n                    '</span>'\n                );\n            }\n\n            // Toggle mute button\n            if (_inArray(config.controls, 'mute')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"mute\">',\n                        '<svg class=\"icon--muted\"><use xlink:href=\"' + iconPath + '-muted\" /></svg>',\n                        '<svg><use xlink:href=\"' + iconPath + '-volume\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleMute + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Volume range control\n            if (_inArray(config.controls, 'volume')) {\n                html.push(\n                    '<span class=\"plyr__volume\">',\n                        '<label for=\"volume{id}\" class=\"plyr__sr-only\">' + config.i18n.volume + '</label>',\n                        '<input id=\"volume{id}\" class=\"plyr__volume--input\" type=\"range\" min=\"' + config.volumeMin + '\" max=\"' + config.volumeMax + '\" value=\"' + config.volume + '\" data-plyr=\"volume\">',\n                        '<progress class=\"plyr__volume--display\" max=\"' + config.volumeMax + '\" value=\"' + config.volumeMin + '\" role=\"presentation\"></progress>',\n                    '</span>'\n                );\n            }\n\n            // Toggle captions button\n            if (_inArray(config.controls, 'captions')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"captions\">',\n                        '<svg class=\"icon--captions-on\"><use xlink:href=\"' + iconPath + '-captions-on\" /></svg>',\n                        '<svg><use xlink:href=\"' + iconPath+ '-captions-off\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleCaptions + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Toggle fullscreen button\n            if (_inArray(config.controls, 'fullscreen')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"fullscreen\">',\n                        '<svg class=\"icon--exit-fullscreen\"><use xlink:href=\"' + iconPath + '-exit-fullscreen\" /></svg>',\n                        '<svg><use xlink:href=\"' + iconPath + '-enter-fullscreen\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleFullscreen + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Close everything\n            html.push('</div>');\n\n            return html.join('');\n        }\n\n        // Setup fullscreen\n        function _setupFullscreen() {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            if ((plyr.type !== 'audio' || config.fullscreen.allowAudio) && config.fullscreen.enabled) {\n                // Check for native support\n                var nativeSupport = fullscreen.supportsFullScreen;\n\n                if (nativeSupport || (config.fullscreen.fallback && !_inFrame())) {\n                    _log((nativeSupport ? 'Native' : 'Fallback') + ' fullscreen enabled');\n\n                    // Add styling hook\n                    _toggleClass(plyr.container, config.classes.fullscreen.enabled, true);\n                } else {\n                    _log('Fullscreen not supported and fallback disabled');\n                }\n\n                // Toggle state\n                if (plyr.buttons && plyr.buttons.fullscreen) {\n                    _toggleState(plyr.buttons.fullscreen, false);\n                }\n\n                // Setup focus trap\n                _focusTrap();\n            }\n        }\n\n        // Setup captions\n        function _setupCaptions() {\n            // Bail if not HTML5 video\n            if (plyr.type !== 'video') {\n                return;\n            }\n\n            // Inject the container\n            if (!_getElement(config.selectors.captions)) {\n                plyr.videoContainer.insertAdjacentHTML('afterbegin', '<div class=\"' + _getClassname(config.selectors.captions) + '\"></div>');\n            }\n\n            // Determine if HTML5 textTracks is supported\n            plyr.usingTextTracks = false;\n            if (plyr.media.textTracks) {\n                plyr.usingTextTracks = true;\n            }\n\n            // Get URL of caption file if exists\n            var captionSrc = '',\n                kind,\n                children = plyr.media.childNodes;\n\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].nodeName.toLowerCase() === 'track') {\n                    kind = children[i].kind;\n                    if (kind === 'captions' || kind === 'subtitles') {\n                        captionSrc = children[i].getAttribute('src');\n                    }\n                }\n            }\n\n            // Record if caption file exists or not\n            plyr.captionExists = true;\n            if (captionSrc === '') {\n                plyr.captionExists = false;\n                _log('No caption track found');\n            } else {\n                _log('Caption track found; URI: ' + captionSrc);\n            }\n\n            // If no caption file exists, hide container for caption text\n            if (!plyr.captionExists) {\n                _toggleClass(plyr.container, config.classes.captions.enabled);\n            } else {\n                // Turn off native caption rendering to avoid double captions\n                // This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below\n                var tracks = plyr.media.textTracks;\n                for (var x = 0; x < tracks.length; x++) {\n                    tracks[x].mode = 'hidden';\n                }\n\n                // Enable UI\n                _showCaptions(plyr);\n\n                // Disable unsupported browsers than report false positive\n                // Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144\n                if ((plyr.browser.isIE && plyr.browser.version >= 10) ||\n                    (plyr.browser.isFirefox && plyr.browser.version >= 31)) {\n\n                    // Debugging\n                    _log('Detected browser with known TextTrack issues - using manual fallback');\n\n                    // Set to false so skips to 'manual' captioning\n                    plyr.usingTextTracks = false;\n                }\n\n                // Rendering caption tracks\n                // Native support required - http://caniuse.com/webvtt\n                if (plyr.usingTextTracks) {\n                    _log('TextTracks supported');\n\n                    for (var y = 0; y < tracks.length; y++) {\n                        var track = tracks[y];\n\n                        if (track.kind === 'captions' || track.kind === 'subtitles') {\n                            _on(track, 'cuechange', function() {\n                                // Display a cue, if there is one\n                                if (this.activeCues[0] && 'text' in this.activeCues[0]) {\n                                    _setCaption(this.activeCues[0].getCueAsHTML());\n                                } else {\n                                    _setCaption();\n                                }\n                            });\n                        }\n                    }\n                } else {\n                    // Caption tracks not natively supported\n                    _log('TextTracks not supported so rendering captions manually');\n\n                    // Render captions from array at appropriate time\n                    plyr.currentCaption = '';\n                    plyr.captions = [];\n\n                    if (captionSrc !== '') {\n                        // Create XMLHttpRequest Object\n                        var xhr = new XMLHttpRequest();\n\n                        xhr.onreadystatechange = function() {\n                            if (xhr.readyState === 4) {\n                                if (xhr.status === 200) {\n                                    var captions = [],\n                                        caption,\n                                        req = xhr.responseText;\n\n                                    //According to webvtt spec, line terminator consists of one of the following\n                                    // CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)\n                                    var lineSeparator = '\\r\\n';\n                                    if(req.indexOf(lineSeparator+lineSeparator) === -1) {\n                                        if(req.indexOf('\\r\\r') !== -1){\n                                            lineSeparator = '\\r';\n                                        } else {\n                                            lineSeparator = '\\n';\n                                        }\n                                    }\n\n                                    captions = req.split(lineSeparator+lineSeparator);\n\n                                    for (var r = 0; r < captions.length; r++) {\n                                        caption = captions[r];\n                                        plyr.captions[r] = [];\n\n                                        // Get the parts of the captions\n                                        var parts = caption.split(lineSeparator),\n                                            index = 0;\n\n                                        // Incase caption numbers are added\n                                        if (parts[index].indexOf(\":\") === -1) {\n                                            index = 1;\n                                        }\n\n                                        plyr.captions[r] = [parts[index], parts[index + 1]];\n                                    }\n\n                                    // Remove first element ('VTT')\n                                    plyr.captions.shift();\n\n                                    _log('Successfully loaded the caption file via AJAX');\n                                } else {\n                                    _warn(config.logPrefix + 'There was a problem loading the caption file via AJAX');\n                                }\n                            }\n                        };\n\n                        xhr.open('get', captionSrc, true);\n\n                        xhr.send();\n                    }\n                }\n            }\n        }\n\n        // Set the current caption\n        function _setCaption(caption) {\n            /* jshint unused:false */\n            var container = _getElement(config.selectors.captions),\n                content = document.createElement('span');\n\n            // Empty the container\n            container.innerHTML = '';\n\n            // Default to empty\n            if (_is.undefined(caption)) {\n                caption = '';\n            }\n\n            // Set the span content\n            if (_is.string(caption)) {\n                content.innerHTML = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            container.appendChild(content);\n\n            // Force redraw (for Safari)\n            var redraw = container.offsetHeight;\n        }\n\n        // Captions functions\n        // Seek the manual caption time and update UI\n        function _seekManualCaptions(time) {\n            // Utilities for caption time codes\n            function _timecodeCommon(tc, pos) {\n                var tcpair = [];\n                tcpair = tc.split(' --> ');\n                for(var i = 0; i < tcpair.length; i++) {\n                    // WebVTT allows for extra meta data after the timestamp line\n                    // So get rid of this if it exists\n                    tcpair[i] = tcpair[i].replace(/(\\d+:\\d+:\\d+\\.\\d+).*/, \"$1\");\n                }\n                return _subTcSecs(tcpair[pos]);\n            }\n            function _timecodeMin(tc) {\n                return _timecodeCommon(tc, 0);\n            }\n            function _timecodeMax(tc) {\n                return _timecodeCommon(tc, 1);\n            }\n            function _subTcSecs(tc) {\n                if (tc === null || tc === undefined) {\n                    return 0;\n                } else {\n                    var tc1 = [],\n                        tc2 = [],\n                        seconds;\n                    tc1 = tc.split(',');\n                    tc2 = tc1[0].split(':');\n                    seconds = Math.floor(tc2[0]*60*60) + Math.floor(tc2[1]*60) + Math.floor(tc2[2]);\n                    return seconds;\n                }\n            }\n\n            // If it's not video, or we're using textTracks, bail.\n            if (plyr.usingTextTracks || plyr.type !== 'video' || !plyr.supported.full) {\n                return;\n            }\n\n            // Reset subcount\n            plyr.subcount = 0;\n\n            // Check time is a number, if not use currentTime\n            // IE has a bug where currentTime doesn't go to 0\n            // https://twitter.com/Sam_Potts/status/573715746506731521\n            time = _is.number(time) ? time : plyr.media.currentTime;\n\n            // If there's no subs available, bail\n            if (!plyr.captions[plyr.subcount]) {\n                return;\n            }\n\n            while (_timecodeMax(plyr.captions[plyr.subcount][0]) < time.toFixed(1)) {\n                plyr.subcount++;\n                if (plyr.subcount > plyr.captions.length - 1) {\n                    plyr.subcount = plyr.captions.length - 1;\n                    break;\n                }\n            }\n\n            // Check if the next caption is in the current time range\n            if (plyr.media.currentTime.toFixed(1) >= _timecodeMin(plyr.captions[plyr.subcount][0]) &&\n                plyr.media.currentTime.toFixed(1) <= _timecodeMax(plyr.captions[plyr.subcount][0])) {\n                    plyr.currentCaption = plyr.captions[plyr.subcount][1];\n\n                // Render the caption\n                _setCaption(plyr.currentCaption);\n            } else {\n                _setCaption();\n            }\n        }\n\n        // Display captions container and button (for initialization)\n        function _showCaptions() {\n            // If there's no caption toggle, bail\n            if (!plyr.buttons.captions) {\n                return;\n            }\n\n            _toggleClass(plyr.container, config.classes.captions.enabled, true);\n\n            // Try to load the value from storage\n            var active = plyr.storage.captionsEnabled;\n\n            // Otherwise fall back to the default config\n            if (!_is.boolean(active)) {\n                active = config.captions.defaultActive;\n            }\n\n            if (active) {\n                _toggleClass(plyr.container, config.classes.captions.active, true);\n                _toggleState(plyr.buttons.captions, true);\n            }\n        }\n\n        // Find all elements\n        function _getElements(selector) {\n            return plyr.container.querySelectorAll(selector);\n        }\n\n        // Find a single element\n        function _getElement(selector) {\n            return _getElements(selector)[0];\n        }\n\n        // Determine if we're in an iframe\n        function _inFrame() {\n            try {\n                return window.self !== window.top;\n            }\n            catch (e) {\n                return true;\n            }\n        }\n\n        // Trap focus inside container\n        function _focusTrap() {\n            var tabbables   = _getElements('input:not([disabled]), button:not([disabled])'),\n                first       = tabbables[0],\n                last        = tabbables[tabbables.length - 1];\n\n            function _checkFocus(event) {\n                // If it is TAB\n                if (event.which === 9 && plyr.isFullscreen) {\n                    if (event.target === last && !event.shiftKey) {\n                        // Move focus to first element that can be tabbed if Shift isn't used\n                        event.preventDefault();\n                        first.focus();\n                    } else if (event.target === first && event.shiftKey) {\n                        // Move focus to last element that can be tabbed if Shift is used\n                        event.preventDefault();\n                        last.focus();\n                    }\n                }\n            }\n\n            // Bind the handler\n            _on(plyr.container, 'keydown', _checkFocus);\n        }\n\n        // Add elements to HTML5 media (source, tracks, etc)\n        function _insertChildElements(type, attributes) {\n            if (_is.string(attributes)) {\n               _insertElement(type, plyr.media, { src: attributes });\n            } else if (attributes.constructor === Array) {\n                for (var i = attributes.length - 1; i >= 0; i--) {\n                    _insertElement(type, plyr.media, attributes[i]);\n                }\n            }\n        }\n\n        // Insert controls\n        function _injectControls() {\n            // Sprite\n            if (config.loadSprite) {\n                var iconUrl = _getIconUrl();\n\n                // Only load external sprite using AJAX\n                if (iconUrl.absolute) {\n                    _log('AJAX loading absolute SVG sprite' + (plyr.browser.isIE ? ' (due to IE)' : ''));\n                    loadSprite(iconUrl.url, \"sprite-plyr\");\n                } else {\n                    _log('Sprite will be used as external resource directly');\n                }\n            }\n\n            // Make a copy of the html\n            var html = config.html;\n\n            // Insert custom video controls\n            _log('Injecting custom controls');\n\n            // If no controls are specified, create default\n            if (!html) {\n                html = _buildControls();\n            }\n\n            // Replace seek time instances\n            html = _replaceAll(html, '{seektime}', config.seekTime);\n\n            // Replace all id references with random numbers\n            html = _replaceAll(html, '{id}', Math.floor(Math.random() * (10000)));\n\n            // Controls container\n            var target;\n\n            // Inject to custom location\n            if (_is.string(config.selectors.controls.container)) {\n                target = document.querySelector(config.selectors.controls.container);\n            }\n\n            // Inject into the container by default\n            if (!_is.htmlElement(target)) {\n                target = plyr.container\n            }\n\n            // Inject controls HTML\n            target.insertAdjacentHTML('beforeend', html);\n\n            // Setup tooltips\n            if (config.tooltips.controls) {\n                var labels = _getElements([config.selectors.controls.wrapper, ' ', config.selectors.labels, ' .', config.classes.hidden].join(''));\n\n                for (var i = labels.length - 1; i >= 0; i--) {\n                    var label = labels[i];\n\n                    _toggleClass(label, config.classes.hidden, false);\n                    _toggleClass(label, config.classes.tooltip, true);\n                }\n            }\n        }\n\n        // Find the UI controls and store references\n        function _findElements() {\n            try {\n                plyr.controls                 = _getElement(config.selectors.controls.wrapper);\n\n                // Buttons\n                plyr.buttons = {};\n                plyr.buttons.seek             = _getElement(config.selectors.buttons.seek);\n                plyr.buttons.play             = _getElements(config.selectors.buttons.play);\n                plyr.buttons.pause            = _getElement(config.selectors.buttons.pause);\n                plyr.buttons.restart          = _getElement(config.selectors.buttons.restart);\n                plyr.buttons.rewind           = _getElement(config.selectors.buttons.rewind);\n                plyr.buttons.forward          = _getElement(config.selectors.buttons.forward);\n                plyr.buttons.fullscreen       = _getElement(config.selectors.buttons.fullscreen);\n\n                // Inputs\n                plyr.buttons.mute             = _getElement(config.selectors.buttons.mute);\n                plyr.buttons.captions         = _getElement(config.selectors.buttons.captions);\n\n                // Progress\n                plyr.progress = {};\n                plyr.progress.container       = _getElement(config.selectors.progress.container);\n\n                // Progress - Buffering\n                plyr.progress.buffer          = {};\n                plyr.progress.buffer.bar      = _getElement(config.selectors.progress.buffer);\n                plyr.progress.buffer.text     = plyr.progress.buffer.bar && plyr.progress.buffer.bar.getElementsByTagName('span')[0];\n\n                // Progress - Played\n                plyr.progress.played          = _getElement(config.selectors.progress.played);\n\n                // Seek tooltip\n                plyr.progress.tooltip         = plyr.progress.container && plyr.progress.container.querySelector('.' + config.classes.tooltip);\n\n                // Volume\n                plyr.volume                   = {};\n                plyr.volume.input             = _getElement(config.selectors.volume.input);\n                plyr.volume.display           = _getElement(config.selectors.volume.display);\n\n                // Timing\n                plyr.duration                 = _getElement(config.selectors.duration);\n                plyr.currentTime              = _getElement(config.selectors.currentTime);\n                plyr.seekTime                 = _getElements(config.selectors.seekTime);\n\n                return true;\n            }\n            catch(e) {\n                _warn('It looks like there is a problem with your controls HTML');\n\n                // Restore native video controls\n                _toggleNativeControls(true);\n\n                return false;\n            }\n        }\n\n        // Toggle style hook\n        function _toggleStyleHook() {\n            _toggleClass(plyr.container, config.selectors.container.replace('.', ''), plyr.supported.full);\n        }\n\n        // Toggle native controls\n        function _toggleNativeControls(toggle) {\n            if (toggle && _inArray(config.types.html5, plyr.type)) {\n                plyr.media.setAttribute('controls', '');\n            } else {\n                plyr.media.removeAttribute('controls');\n            }\n        }\n\n        // Setup aria attribute for play and iframe title\n        function _setTitle(iframe) {\n            // Find the current text\n            var label = config.i18n.play;\n\n            // If there's a media title set, use that for the label\n            if (_is.string(config.title) && config.title.length) {\n                label += ', ' + config.title;\n\n                // Set container label\n                plyr.container.setAttribute('aria-label', config.title);\n            }\n\n            // If there's a play button, set label\n            if (plyr.supported.full && plyr.buttons.play) {\n                for (var i = plyr.buttons.play.length - 1; i >= 0; i--) {\n                    plyr.buttons.play[i].setAttribute('aria-label', label);\n                }\n            }\n\n            // Set iframe title\n            // https://github.com/Selz/plyr/issues/124\n            if (_is.htmlElement(iframe)) {\n                iframe.setAttribute('title', config.i18n.frameTitle.replace('{title}', config.title));\n            }\n        }\n\n        // Setup localStorage\n        function _setupStorage() {\n            var value = null;\n            plyr.storage = {};\n\n            // Bail if we don't have localStorage support or it's disabled\n            if (!_storage.supported || !config.storage.enabled) {\n                return;\n            }\n\n            // Clean up old volume\n            // https://github.com/Selz/plyr/issues/171\n            window.localStorage.removeItem('plyr-volume');\n\n            // load value from the current key\n            value = window.localStorage.getItem(config.storage.key);\n\n            if (!value) {\n                // Key wasn't set (or had been cleared), move along\n                return;\n            } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n                // If value is a number, it's probably volume from an older\n                // version of plyr. See: https://github.com/Selz/plyr/pull/313\n                // Update the key to be JSON\n                _updateStorage({volume: parseFloat(value)});\n            } else {\n                // Assume it's JSON from this or a later version of plyr\n                plyr.storage = JSON.parse(value);\n            }\n        }\n\n        // Save a value back to local storage\n        function _updateStorage(value) {\n            // Bail if we don't have localStorage support or it's disabled\n            if (!_storage.supported || !config.storage.enabled) {\n                return;\n            }\n\n            // Update the working copy of the values\n            _extend(plyr.storage, value);\n\n            // Update storage\n            window.localStorage.setItem(config.storage.key, JSON.stringify(plyr.storage));\n        }\n\n        // Setup media\n        function _setupMedia() {\n            // If there's no media, bail\n            if (!plyr.media) {\n                _warn('No media element found!');\n                return;\n            }\n\n            if (plyr.supported.full) {\n                // Add type class\n                _toggleClass(plyr.container, config.classes.type.replace('{0}', plyr.type), true);\n\n                // Add video class for embeds\n                // This will require changes if audio embeds are added\n                if (_inArray(config.types.embed, plyr.type)) {\n                    _toggleClass(plyr.container, config.classes.type.replace('{0}', 'video'), true);\n                }\n\n                // If there's no autoplay attribute, assume the video is stopped and add state class\n                _toggleClass(plyr.container, config.classes.stopped, config.autoplay);\n\n                // Add iOS class\n                _toggleClass(plyr.ontainer, config.classes.isIos, plyr.browser.isIos);\n\n                // Add touch class\n                _toggleClass(plyr.container, config.classes.isTouch, plyr.browser.isTouch);\n\n                // Inject the player wrapper\n                if (plyr.type === 'video') {\n                    // Create the wrapper div\n                    var wrapper = document.createElement('div');\n                    wrapper.setAttribute('class', config.classes.videoWrapper);\n\n                    // Wrap the video in a container\n                    _wrap(plyr.media, wrapper);\n\n                    // Cache the container\n                    plyr.videoContainer = wrapper;\n                }\n            }\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                _setupEmbed();\n            }\n        }\n\n        // Setup YouTube/Vimeo\n        function _setupEmbed() {\n            var container = document.createElement('div'),\n                mediaId,\n                id = plyr.type + '-' + Math.floor(Math.random() * (10000));\n\n            // Parse IDs from URLs if supplied\n            switch (plyr.type) {\n                case 'youtube':\n                    mediaId = _parseYouTubeId(plyr.embedId);\n                    break;\n\n                case 'vimeo':\n                    mediaId = _parseVimeoId(plyr.embedId);\n                    break;\n\n                default:\n                    mediaId = plyr.embedId;\n            }\n\n            // Remove old containers\n            var containers = _getElements('[id^=\"' + plyr.type + '-\"]');\n            for (var i = containers.length - 1; i >= 0; i--) {\n                _remove(containers[i]);\n            }\n\n            // Add embed class for responsive\n            _toggleClass(plyr.media, config.classes.videoWrapper, true);\n            _toggleClass(plyr.media, config.classes.embedWrapper, true);\n\n            if (plyr.type === 'youtube') {\n                // Create the YouTube container\n                plyr.media.appendChild(container);\n\n                // Set ID\n                container.setAttribute('id', id);\n\n                // Setup API\n                if (_is.object(window.YT)) {\n                    _youTubeReady(mediaId, container);\n                } else {\n                    // Load the API\n                    _injectScript(config.urls.youtube.api);\n\n                    // Setup callback for the API\n                    window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n                    // Add to queue\n                    window.onYouTubeReadyCallbacks.push(function() { _youTubeReady(mediaId, container); });\n\n                    // Set callback to process queue\n                    window.onYouTubeIframeAPIReady = function () {\n                        window.onYouTubeReadyCallbacks.forEach(function(callback) { callback(); });\n                    };\n                }\n            } else if (plyr.type === 'vimeo') {\n                // Vimeo needs an extra div to hide controls on desktop (which has full support)\n                if (plyr.supported.full) {\n                    plyr.media.appendChild(container);\n                } else {\n                    container = plyr.media;\n                }\n\n                // Set ID\n                container.setAttribute('id', id);\n\n                // Load the API if not already\n                if (!_is.object(window.Vimeo)) {\n                    _injectScript(config.urls.vimeo.api);\n\n                    // Wait for fragaloop load\n                    var vimeoTimer = window.setInterval(function() {\n                        if (_is.object(window.Vimeo)) {\n                            window.clearInterval(vimeoTimer);\n                            _vimeoReady(mediaId, container);\n                        }\n                    }, 50);\n                } else {\n                    _vimeoReady(mediaId, container);\n                }\n            } else if (plyr.type === 'soundcloud') {\n                // TODO: Currently unsupported and undocumented\n                // Inject the iframe\n                var soundCloud = document.createElement('iframe');\n\n                // Watch for iframe load\n                soundCloud.loaded = false;\n                _on(soundCloud, 'load', function() { soundCloud.loaded = true; });\n\n                _setAttributes(soundCloud, {\n                    'src':  'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/' + mediaId,\n                    'id':   id\n                });\n\n                container.appendChild(soundCloud);\n                plyr.media.appendChild(container);\n\n                // Load the API if not already\n                if (!window.SC) {\n                    _injectScript(config.urls.soundcloud.api);\n                }\n\n                // Wait for SC load\n                var soundCloudTimer = window.setInterval(function() {\n                    if (window.SC && soundCloud.loaded) {\n                        window.clearInterval(soundCloudTimer);\n                        _soundcloudReady.call(soundCloud);\n                    }\n                }, 50);\n            }\n        }\n\n        // When embeds are ready\n        function _embedReady() {\n            // Setup the UI and call ready if full support\n            if (plyr.supported.full) {\n                _setupInterface();\n                _ready();\n            }\n\n            // Set title\n            _setTitle(_getElement('iframe'));\n        }\n\n        // Handle YouTube API ready\n        function _youTubeReady(videoId, container) {\n            // Setup instance\n            // https://developers.google.com/youtube/iframe_api_reference\n            plyr.embed = new window.YT.Player(container.id, {\n                videoId: videoId,\n                playerVars: {\n                    autoplay:       (config.autoplay ? 1 : 0),\n                    controls:       (plyr.supported.full ? 0 : 1),\n                    rel:            0,\n                    showinfo:       0,\n                    iv_load_policy: 3,\n                    cc_load_policy: (config.captions.defaultActive ? 1 : 0),\n                    cc_lang_pref:   'en',\n                    wmode:          'transparent',\n                    modestbranding: 1,\n                    disablekb:      1,\n                    origin:         '*' // https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45\n                },\n                events: {\n                    'onError': function(event) {\n                        _triggerEvent(plyr.container, 'error', true, {\n                            code:   event.data,\n                            embed:  event.target\n                        });\n                    },\n                    'onReady': function(event) {\n                        // Get the instance\n                        var instance = event.target;\n\n                        // Create a faux HTML5 API using the YouTube API\n                        plyr.media.play = function() {\n                            instance.playVideo();\n                            plyr.media.paused = false;\n                        };\n                        plyr.media.pause = function() {\n                            instance.pauseVideo();\n                            plyr.media.paused = true;\n                        };\n                        plyr.media.stop = function() {\n                            instance.stopVideo();\n                            plyr.media.paused = true;\n                        };\n                        plyr.media.duration = instance.getDuration();\n                        plyr.media.paused = true;\n                        plyr.media.currentTime = 0;\n                        plyr.media.muted = instance.isMuted();\n\n                        // Set title\n                        config.title = instance.getVideoData().title;\n\n                        // Set the tabindex\n                        if (plyr.supported.full) {\n                            plyr.media.querySelector('iframe').setAttribute('tabindex', '-1');\n                        }\n\n                        // Update UI\n                        _embedReady();\n\n                        // Trigger timeupdate\n                        _triggerEvent(plyr.media, 'timeupdate');\n\n                        // Trigger timeupdate\n                        _triggerEvent(plyr.media, 'durationchange');\n\n                        // Reset timer\n                        window.clearInterval(timers.buffering);\n\n                        // Setup buffering\n                        timers.buffering = window.setInterval(function() {\n                            // Get loaded % from YouTube\n                            plyr.media.buffered = instance.getVideoLoadedFraction();\n\n                            // Trigger progress only when we actually buffer something\n                            if (plyr.media.lastBuffered === null || plyr.media.lastBuffered < plyr.media.buffered) {\n                                _triggerEvent(plyr.media, 'progress');\n                            }\n\n                            // Set last buffer point\n                            plyr.media.lastBuffered = plyr.media.buffered;\n\n                            // Bail if we're at 100%\n                            if (plyr.media.buffered === 1) {\n                                window.clearInterval(timers.buffering);\n\n                                // Trigger event\n                                _triggerEvent(plyr.media, 'canplaythrough');\n                            }\n                        }, 200);\n                    },\n                    'onStateChange': function(event) {\n                        // Get the instance\n                        var instance = event.target;\n\n                        // Reset timer\n                        window.clearInterval(timers.playing);\n\n                        // Handle events\n                        // -1   Unstarted\n                        // 0    Ended\n                        // 1    Playing\n                        // 2    Paused\n                        // 3    Buffering\n                        // 5    Video cued\n                        switch (event.data) {\n                            case 0:\n                                plyr.media.paused = true;\n                                _triggerEvent(plyr.media, 'ended');\n                                break;\n\n                            case 1:\n                                plyr.media.paused = false;\n\n                                // If we were seeking, fire seeked event\n                                if (plyr.media.seeking) {\n                                    _triggerEvent(plyr.media, 'seeked');\n                                }\n\n                                plyr.media.seeking = false;\n                                _triggerEvent(plyr.media, 'play');\n                                _triggerEvent(plyr.media, 'playing');\n\n                                // Poll to get playback progress\n                                timers.playing = window.setInterval(function() {\n                                    // Set the current time\n                                    plyr.media.currentTime = instance.getCurrentTime();\n\n                                    // Trigger timeupdate\n                                    _triggerEvent(plyr.media, 'timeupdate');\n                                }, 100);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/Selz/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (plyr.media.duration !== instance.getDuration()) {\n                                    plyr.media.duration = instance.getDuration();\n                                    _triggerEvent(plyr.media, 'durationchange');\n                                }\n\n                                break;\n\n                            case 2:\n                                plyr.media.paused = true;\n                                _triggerEvent(plyr.media, 'pause');\n                                break;\n                        }\n\n                        _triggerEvent(plyr.container, 'statechange', false, {\n                            code: event.data\n                        });\n                    }\n                }\n            });\n        }\n\n        // Vimeo ready\n        function _vimeoReady(mediaId, container) {\n            // Setup instance\n            // https://github.com/vimeo/player.js\n            plyr.embed = new window.Vimeo.Player(container, {\n                id:         parseInt(mediaId),\n                loop:       config.loop,\n                autoplay:   config.autoplay,\n                byline:     false,\n                portrait:   false,\n                title:      false\n            });\n\n            // Create a faux HTML5 API using the Vimeo API\n            plyr.media.play = function() {\n                plyr.embed.play();\n                plyr.media.paused = false;\n            };\n            plyr.media.pause = function() {\n                plyr.embed.pause();\n                plyr.media.paused = true;\n            };\n            plyr.media.stop = function() {\n                plyr.embed.stop();\n                plyr.media.paused = true;\n            };\n\n            plyr.media.paused = true;\n            plyr.media.currentTime = 0;\n\n            // Update UI\n            _embedReady();\n\n            plyr.embed.getCurrentTime().then(function(value) {\n                plyr.media.currentTime = value;\n\n                // Trigger timeupdate\n                _triggerEvent(plyr.media, 'timeupdate');\n            });\n\n            plyr.embed.getDuration().then(function(value) {\n                plyr.media.duration = value;\n\n                // Trigger timeupdate\n                _triggerEvent(plyr.media, 'durationchange');\n            });\n\n            // TODO: Captions\n            /*if (config.captions.defaultActive) {\n                plyr.embed.enableTextTrack('en');\n            }*/\n\n            plyr.embed.on('loaded', function() {\n                // Fix keyboard focus issues\n                // https://github.com/Selz/plyr/issues/317\n                if (_is.htmlElement(plyr.embed.element) && plyr.supported.full) {\n                    plyr.embed.element.setAttribute('tabindex', '-1');\n                }\n            });\n\n            plyr.embed.on('play', function() {\n                plyr.media.paused = false;\n                _triggerEvent(plyr.media, 'play');\n                _triggerEvent(plyr.media, 'playing');\n            });\n\n            plyr.embed.on('pause', function() {\n                plyr.media.paused = true;\n                _triggerEvent(plyr.media, 'pause');\n            });\n\n            plyr.embed.on('timeupdate', function(data) {\n                plyr.media.seeking = false;\n                plyr.media.currentTime = data.seconds;\n                _triggerEvent(plyr.media, 'timeupdate');\n            });\n\n            plyr.embed.on('progress', function(data) {\n                plyr.media.buffered = data.percent;\n                _triggerEvent(plyr.media, 'progress');\n\n                if (parseInt(data.percent) === 1) {\n                    // Trigger event\n                    _triggerEvent(plyr.media, 'canplaythrough');\n                }\n            });\n\n            plyr.embed.on('seeked', function() {\n                plyr.media.seeking = false;\n                _triggerEvent(plyr.media, 'seeked');\n                _triggerEvent(plyr.media, 'play');\n            });\n\n            plyr.embed.on('ended', function() {\n                plyr.media.paused = true;\n                _triggerEvent(plyr.media, 'ended');\n            });\n        }\n\n        // Soundcloud ready\n        function _soundcloudReady() {\n            /* jshint validthis: true */\n            plyr.embed = window.SC.Widget(this);\n\n            // Setup on ready\n            plyr.embed.bind(window.SC.Widget.Events.READY, function() {\n                // Create a faux HTML5 API using the Soundcloud API\n                plyr.media.play = function() {\n                    plyr.embed.play();\n                    plyr.media.paused = false;\n                };\n                plyr.media.pause = function() {\n                    plyr.embed.pause();\n                    plyr.media.paused = true;\n                };\n                plyr.media.stop = function() {\n                    plyr.embed.seekTo(0);\n                    plyr.embed.pause();\n                    plyr.media.paused = true;\n                };\n\n                plyr.media.paused = true;\n                plyr.media.currentTime = 0;\n\n                plyr.embed.getDuration(function(value) {\n                    plyr.media.duration = value/1000;\n\n                    // Update UI\n                    _embedReady();\n                });\n\n                plyr.embed.getPosition(function(value) {\n                    plyr.media.currentTime = value;\n\n                    // Trigger timeupdate\n                    _triggerEvent(plyr.media, 'timeupdate');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.PLAY, function() {\n                    plyr.media.paused = false;\n                    _triggerEvent(plyr.media, 'play');\n                    _triggerEvent(plyr.media, 'playing');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.PAUSE, function() {\n                    plyr.media.paused = true;\n                    _triggerEvent(plyr.media, 'pause');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS, function(data) {\n                    plyr.media.seeking = false;\n                    plyr.media.currentTime = data.currentPosition/1000;\n                    _triggerEvent(plyr.media, 'timeupdate');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS, function(data) {\n                    plyr.media.buffered = data.loadProgress;\n                    _triggerEvent(plyr.media, 'progress');\n\n                    if (parseInt(data.loadProgress) === 1) {\n                        // Trigger event\n                        _triggerEvent(plyr.media, 'canplaythrough');\n                    }\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.FINISH, function() {\n                    plyr.media.paused = true;\n                    _triggerEvent(plyr.media, 'ended');\n                });\n            });\n        }\n\n        // Play media\n        function _play() {\n            if ('play' in plyr.media) {\n                plyr.media.play();\n            }\n        }\n\n        // Pause media\n        function _pause() {\n            if ('pause' in plyr.media) {\n                plyr.media.pause();\n            }\n        }\n\n        // Toggle playback\n        function _togglePlay(toggle) {\n            // True toggle\n            if (!_is.boolean(toggle)) {\n                toggle = plyr.media.paused;\n            }\n\n            if (toggle) {\n                _play();\n            } else {\n                _pause();\n            }\n\n            return toggle;\n        }\n\n        // Rewind\n        function _rewind(seekTime) {\n            // Use default if needed\n            if (!_is.number(seekTime)) {\n                seekTime = config.seekTime;\n            }\n            _seek(plyr.media.currentTime - seekTime);\n        }\n\n        // Fast forward\n        function _forward(seekTime) {\n            // Use default if needed\n            if (!_is.number(seekTime)) {\n                seekTime = config.seekTime;\n            }\n            _seek(plyr.media.currentTime + seekTime);\n        }\n\n        // Seek to time\n        // The input parameter can be an event or a number\n        function _seek(input) {\n            var targetTime  = 0,\n                paused      = plyr.media.paused,\n                duration    = _getDuration();\n\n            if (_is.number(input)) {\n                targetTime = input;\n            } else if (_is.object(input) && _inArray(['input', 'change'], input.type)) {\n                // It's the seek slider\n                // Seek to the selected time\n                targetTime = ((input.target.value / input.target.max) * duration);\n            }\n\n            // Normalise targetTime\n            if (targetTime < 0) {\n                targetTime = 0;\n            } else if (targetTime > duration) {\n                targetTime = duration;\n            }\n\n            // Update seek range and progress\n            _updateSeekDisplay(targetTime);\n\n            // Set the current time\n            // Try/catch incase the media isn't set and we're calling seek() from source() and IE moans\n            try {\n                plyr.media.currentTime = targetTime.toFixed(4);\n            }\n            catch(e) {}\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                switch(plyr.type) {\n                    case 'youtube':\n                        plyr.embed.seekTo(targetTime);\n                        break;\n\n                    case 'vimeo':\n                        // Round to nearest second for vimeo\n                        plyr.embed.setCurrentTime(targetTime.toFixed(0));\n                        break;\n\n                    case 'soundcloud':\n                        plyr.embed.seekTo(targetTime * 1000);\n                        break;\n                }\n\n                if (paused) {\n                    _pause();\n                }\n\n                // Trigger timeupdate\n                _triggerEvent(plyr.media, 'timeupdate');\n\n                // Set seeking flag\n                plyr.media.seeking = true;\n\n                // Trigger seeking\n                _triggerEvent(plyr.media, 'seeking');\n            }\n\n            // Logging\n            _log('Seeking to ' + plyr.media.currentTime + ' seconds');\n\n            // Special handling for 'manual' captions\n            _seekManualCaptions(targetTime);\n        }\n\n        // Get the duration (or custom if set)\n        function _getDuration() {\n            // It should be a number, but parse it just incase\n            var duration = parseInt(config.duration),\n\n            // True duration\n            mediaDuration = 0;\n\n            // Only if duration available\n            if (plyr.media.duration !== null && !isNaN(plyr.media.duration)) {\n                mediaDuration = plyr.media.duration;\n            }\n\n            // If custom duration is funky, use regular duration\n            return (isNaN(duration) ? mediaDuration : duration);\n        }\n\n        // Check playing state\n        function _checkPlaying() {\n            _toggleClass(plyr.container, config.classes.playing, !plyr.media.paused);\n\n            _toggleClass(plyr.container, config.classes.stopped, plyr.media.paused);\n\n            _toggleControls(plyr.media.paused);\n        }\n\n        // Save scroll position\n        function _saveScrollPosition() {\n            scroll = {\n                x: window.pageXOffset || 0,\n                y: window.pageYOffset || 0\n            };\n        }\n\n        // Restore scroll position\n        function _restoreScrollPosition() {\n            window.scrollTo(scroll.x, scroll.y);\n        }\n\n        // Toggle fullscreen\n        function _toggleFullscreen(event) {\n            // Check for native support\n            var nativeSupport = fullscreen.supportsFullScreen;\n\n            if (nativeSupport) {\n                // If it's a fullscreen change event, update the UI\n                if (event && event.type === fullscreen.fullScreenEventName) {\n                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);\n                } else {\n                    // Else it's a user request to enter or exit\n                    if (!fullscreen.isFullScreen(plyr.container)) {\n                        // Save scroll position\n                        _saveScrollPosition();\n\n                        // Request full screen\n                        fullscreen.requestFullScreen(plyr.container);\n                    } else {\n                        // Bail from fullscreen\n                        fullscreen.cancelFullScreen();\n                    }\n\n                    // Check if we're actually full screen (it could fail)\n                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);\n\n                    return;\n                }\n            } else {\n                // Otherwise, it's a simple toggle\n                plyr.isFullscreen = !plyr.isFullscreen;\n\n                // Bind/unbind escape key\n                document.body.style.overflow = plyr.isFullscreen ? 'hidden' : '';\n            }\n\n            // Set class hook\n            _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);\n\n            // Trap focus\n            _focusTrap(plyr.isFullscreen);\n\n            // Set button state\n            if (plyr.buttons && plyr.buttons.fullscreen) {\n                _toggleState(plyr.buttons.fullscreen, plyr.isFullscreen);\n            }\n\n            // Trigger an event\n            _triggerEvent(plyr.container, plyr.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);\n\n            // Restore scroll position\n            if (!plyr.isFullscreen && nativeSupport) {\n                _restoreScrollPosition();\n            }\n        }\n\n        // Mute\n        function _toggleMute(muted) {\n            // If the method is called without parameter, toggle based on current value\n            if (!_is.boolean(muted)) {\n                muted = !plyr.media.muted;\n            }\n\n            // Set button state\n            _toggleState(plyr.buttons.mute, muted);\n\n            // Set mute on the player\n            plyr.media.muted = muted;\n\n            // If volume is 0 after unmuting, set to default\n            if (plyr.media.volume === 0) {\n                _setVolume(config.volume);\n            }\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                // YouTube\n                switch(plyr.type) {\n                    case 'youtube':\n                        plyr.embed[plyr.media.muted ? 'mute' : 'unMute']();\n                        break;\n\n                    case 'vimeo':\n                    case 'soundcloud':\n                        plyr.embed.setVolume(plyr.media.muted ? 0 : parseFloat(config.volume / config.volumeMax));\n                        break;\n                }\n\n                // Trigger volumechange for embeds\n                _triggerEvent(plyr.media, 'volumechange');\n            }\n        }\n\n        // Set volume\n        function _setVolume(volume) {\n            var max = config.volumeMax,\n                min = config.volumeMin;\n\n            // Load volume from storage if no value specified\n            if (_is.undefined(volume)) {\n                volume = plyr.storage.volume;\n            }\n\n            // Use config if all else fails\n            if (volume === null || isNaN(volume)) {\n                volume = config.volume;\n            }\n\n            // Maximum is volumeMax\n            if (volume > max) {\n                volume = max;\n            }\n            // Minimum is volumeMin\n            if (volume < min) {\n                volume = min;\n            }\n\n            // Set the player volume\n            plyr.media.volume = parseFloat(volume / max);\n\n            // Set the display\n            if (plyr.volume.display) {\n                plyr.volume.display.value = volume;\n            }\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                switch(plyr.type) {\n                    case 'youtube':\n                        plyr.embed.setVolume(plyr.media.volume * 100);\n                        break;\n\n                    case 'vimeo':\n                    case 'soundcloud':\n                        plyr.embed.setVolume(plyr.media.volume);\n                        break;\n                }\n\n                // Trigger volumechange for embeds\n                _triggerEvent(plyr.media, 'volumechange');\n            }\n\n            // Toggle muted state\n            if (volume === 0) {\n                plyr.media.muted = true;\n            } else if (plyr.media.muted && volume > 0) {\n                _toggleMute();\n            }\n        }\n\n        // Increase volume\n        function _increaseVolume(step) {\n            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\n            if (!_is.number(step)) {\n                step = config.volumeStep;\n            }\n\n            _setVolume(volume + step);\n        }\n\n        // Decrease volume\n        function _decreaseVolume(step) {\n            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\n            if (!_is.number(step)) {\n                step = config.volumeStep;\n            }\n\n            _setVolume(volume - step);\n        }\n\n        // Update volume UI and storage\n        function _updateVolume() {\n            // Get the current volume\n            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\n            // Update the <input type=\"range\"> if present\n            if (plyr.supported.full) {\n                if (plyr.volume.input) {\n                    plyr.volume.input.value = volume;\n                }\n                if (plyr.volume.display) {\n                    plyr.volume.display.value = volume;\n                }\n            }\n\n            // Update the volume in storage\n            _updateStorage({volume: volume});\n\n            // Toggle class if muted\n            _toggleClass(plyr.container, config.classes.muted, (volume === 0));\n\n            // Update checkbox for mute state\n            if (plyr.supported.full && plyr.buttons.mute) {\n                _toggleState(plyr.buttons.mute, (volume === 0));\n            }\n        }\n\n        // Toggle captions\n        function _toggleCaptions(show) {\n            // If there's no full support, or there's no caption toggle\n            if (!plyr.supported.full || !plyr.buttons.captions) {\n                return;\n            }\n\n            // If the method is called without parameter, toggle based on current value\n            if (!_is.boolean(show)) {\n                show = (plyr.container.className.indexOf(config.classes.captions.active) === -1);\n            }\n\n            // Set global\n            plyr.captionsEnabled = show;\n\n            // Toggle state\n            _toggleState(plyr.buttons.captions, plyr.captionsEnabled);\n\n            // Add class hook\n            _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);\n\n            // Trigger an event\n            _triggerEvent(plyr.container, plyr.captionsEnabled ? 'captionsenabled' : 'captionsdisabled', true);\n\n            // Save captions state to localStorage\n            _updateStorage({captionsEnabled: plyr.captionsEnabled});\n        }\n\n        // Check if media is loading\n        function _checkLoading(event) {\n            var loading = (event.type === 'waiting');\n\n            // Clear timer\n            clearTimeout(timers.loading);\n\n            // Timer to prevent flicker when seeking\n            timers.loading = setTimeout(function() {\n                // Toggle container class hook\n                _toggleClass(plyr.container, config.classes.loading, loading);\n\n                // Show controls if loading, hide if done\n                _toggleControls(loading);\n            }, (loading ? 250 : 0));\n        }\n\n        // Update <progress> elements\n        function _updateProgress(event) {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            var progress    = plyr.progress.played,\n                value       = 0,\n                duration    = _getDuration();\n\n            if (event) {\n                switch (event.type) {\n                    // Video playing\n                    case 'timeupdate':\n                    case 'seeking':\n                        if (plyr.controls.pressed) {\n                            return;\n                        }\n\n                        value = _getPercentage(plyr.media.currentTime, duration);\n\n                        // Set seek range value only if it's a 'natural' time event\n                        if (event.type === 'timeupdate' && plyr.buttons.seek) {\n                            plyr.buttons.seek.value = value;\n                        }\n\n                        break;\n\n                    // Check buffer status\n                    case 'playing':\n                    case 'progress':\n                        progress    = plyr.progress.buffer;\n                        value       = (function() {\n                            var buffered = plyr.media.buffered;\n\n                            if (buffered && buffered.length) {\n                                // HTML5\n                                return _getPercentage(buffered.end(0), duration);\n                            } else if (_is.number(buffered)) {\n                                // YouTube returns between 0 and 1\n                                return (buffered * 100);\n                            }\n\n                            return 0;\n                        })();\n\n                        break;\n                }\n            }\n\n            // Set values\n            _setProgress(progress, value);\n        }\n\n        // Set <progress> value\n        function _setProgress(progress, value) {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            // Default to 0\n            if (_is.undefined(value)) {\n                value = 0;\n            }\n            // Default to buffer or bail\n            if (_is.undefined(progress)) {\n                if (plyr.progress && plyr.progress.buffer) {\n                    progress = plyr.progress.buffer;\n                } else {\n                    return;\n                }\n            }\n\n            // One progress element passed\n            if (_is.htmlElement(progress)) {\n                progress.value = value;\n            } else if (progress) {\n                // Object of progress + text element\n                if (progress.bar) {\n                    progress.bar.value = value;\n                }\n                if (progress.text) {\n                    progress.text.innerHTML = value;\n                }\n            }\n        }\n\n        // Update the displayed time\n        function _updateTimeDisplay(time, element) {\n            // Bail if there's no duration display\n            if (!element) {\n                return;\n            }\n\n            // Fallback to 0\n            if (isNaN(time)) {\n                time = 0;\n            }\n\n            plyr.secs = parseInt(time % 60);\n            plyr.mins = parseInt((time / 60) % 60);\n            plyr.hours = parseInt(((time / 60) / 60) % 60);\n\n            // Do we need to display hours?\n            var displayHours = (parseInt(((_getDuration() / 60) / 60) % 60) > 0);\n\n            // Ensure it's two digits. For example, 03 rather than 3.\n            plyr.secs = ('0' + plyr.secs).slice(-2);\n            plyr.mins = ('0' + plyr.mins).slice(-2);\n\n            // Render\n            element.innerHTML = (displayHours ? plyr.hours + ':' : '') + plyr.mins + ':' + plyr.secs;\n        }\n\n        // Show the duration on metadataloaded\n        function _displayDuration() {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            // Determine duration\n            var duration = _getDuration() || 0;\n\n            // If there's only one time display, display duration there\n            if (!plyr.duration && config.displayDuration && plyr.media.paused) {\n                _updateTimeDisplay(duration, plyr.currentTime);\n            }\n\n            // If there's a duration element, update content\n            if (plyr.duration) {\n                _updateTimeDisplay(duration, plyr.duration);\n            }\n\n            // Update the tooltip (if visible)\n            _updateSeekTooltip();\n        }\n\n        // Handle time change event\n        function _timeUpdate(event) {\n            // Duration\n            _updateTimeDisplay(plyr.media.currentTime, plyr.currentTime);\n\n            // Ignore updates while seeking\n            if (event && event.type === 'timeupdate' && plyr.media.seeking) {\n                return;\n            }\n\n            // Playing progress\n            _updateProgress(event);\n        }\n\n        // Update seek range and progress\n        function _updateSeekDisplay(time) {\n            // Default to 0\n            if (!_is.number(time)) {\n                time = 0;\n            }\n\n            var duration    = _getDuration(),\n                value       = _getPercentage(time, duration);\n\n            // Update progress\n            if (plyr.progress && plyr.progress.played) {\n                plyr.progress.played.value = value;\n            }\n\n            // Update seek range input\n            if (plyr.buttons && plyr.buttons.seek) {\n                plyr.buttons.seek.value = value;\n            }\n        }\n\n        // Update hover tooltip for seeking\n        function _updateSeekTooltip(event) {\n            var duration = _getDuration();\n\n            // Bail if setting not true\n            if (!config.tooltips.seek || !plyr.progress.container || duration === 0) {\n                return;\n            }\n\n            // Calculate percentage\n            var clientRect  = plyr.progress.container.getBoundingClientRect(),\n                percent     = 0,\n                visible     = config.classes.tooltip + '--visible';\n\n            // Determine percentage, if already visible\n            if (!event) {\n                if (_hasClass(plyr.progress.tooltip, visible)) {\n                    percent = plyr.progress.tooltip.style.left.replace('%', '');\n                } else {\n                    return;\n                }\n            } else {\n                percent = ((100 / clientRect.width) * (event.pageX - clientRect.left));\n            }\n\n            // Set bounds\n            if (percent < 0) {\n                percent = 0;\n            } else if (percent > 100) {\n                percent = 100;\n            }\n\n            // Display the time a click would seek to\n            _updateTimeDisplay(((duration / 100) * percent), plyr.progress.tooltip);\n\n            // Set position\n            plyr.progress.tooltip.style.left = percent + \"%\";\n\n            // Show/hide the tooltip\n            // If the event is a moues in/out and percentage is inside bounds\n            if (event && _inArray(['mouseenter', 'mouseleave'], event.type)) {\n                _toggleClass(plyr.progress.tooltip, visible, (event.type === 'mouseenter'));\n            }\n        }\n\n        // Show the player controls in fullscreen mode\n        function _toggleControls(toggle) {\n            // Don't hide if config says not to, it's audio, or not ready or loading\n            if (!config.hideControls || plyr.type === 'audio') {\n                return;\n            }\n\n            var delay = 0,\n                isEnterFullscreen = false,\n                show = toggle,\n                loading = _hasClass(plyr.container, config.classes.loading);\n\n            // Default to false if no boolean\n            if (!_is.boolean(toggle)) {\n                if (toggle && toggle.type) {\n                    // Is the enter fullscreen event\n                    isEnterFullscreen = (toggle.type === 'enterfullscreen');\n\n                    // Whether to show controls\n                    show = _inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);\n\n                    // Delay hiding on move events\n                    if (_inArray(['mousemove', 'touchmove'], toggle.type)) {\n                        delay = 2000;\n                    }\n\n                    // Delay a little more for keyboard users\n                    if (toggle.type === 'focus') {\n                        delay = 3000;\n                    }\n                } else {\n                    show = _hasClass(plyr.container, config.classes.hideControls);\n                }\n            }\n\n            // Clear timer every movement\n            window.clearTimeout(timers.hover);\n\n            // If the mouse is not over the controls, set a timeout to hide them\n            if (show || plyr.media.paused || loading) {\n                _toggleClass(plyr.container, config.classes.hideControls, false);\n\n                // Always show controls when paused or if touch\n                if (plyr.media.paused || loading) {\n                    return;\n                }\n\n                // Delay for hiding on touch\n                if (plyr.browser.isTouch) {\n                    delay = 3000;\n                }\n            }\n\n            // If toggle is false or if we're playing (regardless of toggle),\n            // then set the timer to hide the controls\n            if (!show || !plyr.media.paused) {\n                timers.hover = window.setTimeout(function() {\n                    // If the mouse is over the controls (and not entering fullscreen), bail\n                    if ((plyr.controls.pressed || plyr.controls.hover) && !isEnterFullscreen) {\n                        return;\n                    }\n\n                    _toggleClass(plyr.container, config.classes.hideControls, true);\n                }, delay);\n            }\n        }\n\n        // Add common function to retrieve media source\n        function _source(source) {\n            // If not null or undefined, parse it\n            if (!_is.undefined(source)) {\n                _updateSource(source);\n                return;\n            }\n\n            // Return the current source\n            var url;\n            switch(plyr.type) {\n                case 'youtube':\n                    url = plyr.embed.getVideoUrl();\n                    break;\n\n                case 'vimeo':\n                    plyr.embed.getVideoUrl.then(function (value) {\n                        url = value;\n                    });\n                    break;\n\n                case 'soundcloud':\n                    plyr.embed.getCurrentSound(function(object) {\n                        url = object.permalink_url;\n                    });\n                    break;\n\n                default:\n                    url = plyr.media.currentSrc;\n                    break;\n            }\n\n            return url || '';\n        }\n\n        // Update source\n        // Sources are not checked for support so be careful\n        function _updateSource(source) {\n            if (!_is.object(source) || !('sources' in source) || !source.sources.length) {\n                _warn('Invalid source format');\n                return;\n            }\n\n            // Remove ready class hook\n            _toggleClass(plyr.container, config.classes.ready, false);\n\n            // Pause playback\n            _pause();\n\n            // Update seek range and progress\n            _updateSeekDisplay();\n\n            // Reset buffer progress\n            _setProgress();\n\n            // Cancel current network requests\n            _cancelRequests();\n\n            // Setup new source\n            function setup() {\n                // Remove embed object\n                plyr.embed = null;\n\n                // Remove the old media\n                _remove(plyr.media);\n\n                // Remove video container\n                if (plyr.type === 'video' && plyr.videoContainer) {\n                    _remove(plyr.videoContainer);\n                }\n\n                // Reset class name\n                if (plyr.container) {\n                    plyr.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in source) {\n                    plyr.type = source.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (plyr.type === 'video') {\n                        var firstSource = source.sources[0];\n\n                        if ('type' in firstSource && _inArray(config.types.embed, firstSource.type)) {\n                            plyr.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                plyr.supported = supported(plyr.type);\n\n                // Create new markup\n                switch(plyr.type) {\n                    case 'video':\n                        plyr.media = document.createElement('video');\n                        break;\n\n                    case 'audio':\n                        plyr.media = document.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                    case 'soundcloud':\n                        plyr.media = document.createElement('div');\n                        plyr.embedId = source.sources[0].src;\n                        break;\n                }\n\n                // Inject the new element\n                _prependChild(plyr.container, plyr.media);\n\n                // Autoplay the new source?\n                if (_is.boolean(source.autoplay)) {\n                    config.autoplay = source.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (_inArray(config.types.html5, plyr.type)) {\n                    if (config.crossorigin) {\n                        plyr.media.setAttribute('crossorigin', '');\n                    }\n                    if (config.autoplay) {\n                        plyr.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in source) {\n                        plyr.media.setAttribute('poster', source.poster);\n                    }\n                    if (config.loop) {\n                        plyr.media.setAttribute('loop', '');\n                    }\n                }\n\n                // Restore class hooks\n                _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);\n                _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);\n                _toggleStyleHook();\n\n                // Set new sources for html5\n                if (_inArray(config.types.html5, plyr.type)) {\n                    _insertChildElements('source', source.sources);\n                }\n\n                // Set up from scratch\n                _setupMedia();\n\n                // HTML5 stuff\n                if (_inArray(config.types.html5, plyr.type)) {\n                    // Setup captions\n                    if ('tracks' in source) {\n                        _insertChildElements('track', source.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    plyr.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (_inArray(config.types.html5, plyr.type) || (_inArray(config.types.embed, plyr.type) && !plyr.supported.full)) {\n                    // Setup interface\n                    _setupInterface();\n\n                    // Call ready\n                    _ready();\n                }\n\n                // Set aria title and iframe title\n                config.title = source.title;\n                _setTitle();\n            }\n\n            // Destroy instance adn wait for callback\n            // Vimeo throws a wobbly if you don't wait\n            _destroy(setup, false);\n        }\n\n        // Update poster\n        function _updatePoster(source) {\n            if (plyr.type === 'video') {\n                plyr.media.setAttribute('poster', source);\n            }\n        }\n\n        // Listen for control events\n        function _controlListeners() {\n            // IE doesn't support input event, so we fallback to change\n            var inputEvent = (plyr.browser.isIE ? 'change' : 'input');\n\n            // Click play/pause helper\n            function togglePlay() {\n                var play = _togglePlay();\n\n                // Determine which buttons\n                var trigger = plyr.buttons[play ? 'play' : 'pause'],\n                    target = plyr.buttons[play ? 'pause' : 'play'];\n\n                // Get the last play button to account for the large play button\n                if (target && target.length > 1) {\n                    target = target[target.length - 1];\n                } else {\n                    target = target[0];\n                }\n\n                // Setup focus and tab focus\n                if (target) {\n                    var hadTabFocus = _hasClass(trigger, config.classes.tabFocus);\n\n                    setTimeout(function() {\n                        target.focus();\n\n                        if (hadTabFocus) {\n                            _toggleClass(trigger, config.classes.tabFocus, false);\n                            _toggleClass(target, config.classes.tabFocus, true);\n                        }\n                    }, 100);\n                }\n            }\n\n            // Get the focused element\n            function getFocusElement() {\n                var focused = document.activeElement;\n\n                if (!focused || focused === document.body) {\n                    focused = null;\n                } else {\n                    focused = document.querySelector(':focus');\n                }\n\n                return focused;\n            }\n\n            // Get the key code for an event\n            function getKeyCode(event) {\n                return event.keyCode ? event.keyCode : event.which;\n            }\n\n            // Detect tab focus\n            function checkTabFocus(focused) {\n                for (var button in plyr.buttons) {\n                    var element = plyr.buttons[button];\n\n                    if (_is.nodeList(element)) {\n                        for (var i = 0; i < element.length; i++) {\n                            _toggleClass(element[i], config.classes.tabFocus, (element[i] === focused));\n                        }\n                    } else {\n                        _toggleClass(element, config.classes.tabFocus, (element === focused));\n                    }\n                }\n            }\n\n            // Keyboard shortcuts\n            if (config.keyboardShorcuts.focused) {\n                var last = null;\n\n                // Handle global presses\n                if (config.keyboardShorcuts.global) {\n                    _on(window, 'keydown keyup', function(event) {\n                        var code = getKeyCode(event),\n                        focused = getFocusElement(),\n                        allowed = [48,49,50,51,52,53,54,56,57,75,77,70,67],\n                        count   = get().length;\n\n                        // Only handle global key press if there's only one player\n                        // and the key is in the allowed keys\n                        // and if the focused element is not editable (e.g. text input)\n                        // and any that accept key input http://webaim.org/techniques/keyboard/\n                        if (count === 1 && _inArray(allowed, code) && (!_is.htmlElement(focused) || !_matches(focused, config.selectors.editable))) {\n                            handleKey(event);\n                        }\n                    });\n                }\n\n                // Handle presses on focused\n                _on(plyr.container, 'keydown keyup', handleKey);\n            }\n\n            function handleKey(event) {\n                var code = getKeyCode(event),\n                    pressed = event.type === 'keydown',\n                    held = pressed && code === last;\n\n                // If the event is bubbled from the media element\n                // Firefox doesn't get the keycode for whatever reason\n                if (!_is.number(code)) {\n                    return;\n                }\n\n                // Seek by the number keys\n                function seekByKey() {\n                    // Get current duration\n                    var duration = plyr.media.duration;\n\n                    // Bail if we have no duration set\n                    if (!_is.number(duration)) {\n                        return;\n                    }\n\n                    // Divide the max duration into 10th's and times by the number value\n                    _seek((duration / 10) * (code - 48));\n                }\n\n                // Handle the key on keydown\n                // Reset on keyup\n                if (pressed) {\n                    // Which keycodes should we prevent default\n                    var preventDefault = [48,49,50,51,52,53,54,56,57,32,75,38,40,77,39,37,70,67];\n\n                    // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                    if (_inArray(preventDefault, code)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n\n                    switch(code) {\n                        // 0-9\n                        case 48:\n                        case 49:\n                        case 50:\n                        case 51:\n                        case 52:\n                        case 53:\n                        case 54:\n                        case 55:\n                        case 56:\n                        case 57: if (!held) { seekByKey(); } break;\n                        // Space and K key\n                        case 32:\n                        case 75: if (!held) { _togglePlay(); } break;\n                        // Arrow up\n                        case 38: _increaseVolume(); break;\n                        // Arrow down\n                        case 40: _decreaseVolume(); break;\n                        // M key\n                        case 77: if (!held) { _toggleMute() } break;\n                        // Arrow forward\n                        case 39: _forward(); break;\n                        // Arrow back\n                        case 37: _rewind(); break;\n                        // F key\n                        case 70: _toggleFullscreen(); break;\n                        // C key\n                        case 67: if (!held) { _toggleCaptions(); } break;\n                    }\n\n                    // Escape is handle natively when in full screen\n                    // So we only need to worry about non native\n                    if (!fullscreen.supportsFullScreen && plyr.isFullscreen && code === 27) {\n                        _toggleFullscreen();\n                    }\n\n                    // Store last code for next cycle\n                    last = code;\n                } else {\n                    last = null;\n                }\n            }\n\n            // Focus/tab management\n            _on(window, 'keyup', function(event) {\n                var code = getKeyCode(event),\n                    focused = getFocusElement();\n\n                if (code === 9) {\n                    checkTabFocus(focused);\n                }\n            });\n            _on(document.body, 'click', function() {\n                _toggleClass(_getElement('.' + config.classes.tabFocus), config.classes.tabFocus, false);\n            });\n            for (var button in plyr.buttons) {\n                var element = plyr.buttons[button];\n\n                _on(element, 'blur', function() {\n                    _toggleClass(element, 'tab-focus', false);\n                });\n            }\n\n            // Play\n            _proxyListener(plyr.buttons.play, 'click', config.listeners.play, togglePlay);\n\n            // Pause\n            _proxyListener(plyr.buttons.pause, 'click', config.listeners.pause, togglePlay);\n\n            // Restart\n            _proxyListener(plyr.buttons.restart, 'click', config.listeners.restart, _seek);\n\n            // Rewind\n            _proxyListener(plyr.buttons.rewind, 'click', config.listeners.rewind, _rewind);\n\n            // Fast forward\n            _proxyListener(plyr.buttons.forward, 'click', config.listeners.forward, _forward);\n\n            // Seek\n            _proxyListener(plyr.buttons.seek, inputEvent, config.listeners.seek, _seek);\n\n            // Set volume\n            _proxyListener(plyr.volume.input, inputEvent, config.listeners.volume, function() {\n                _setVolume(plyr.volume.input.value);\n            });\n\n            // Mute\n            _proxyListener(plyr.buttons.mute, 'click', config.listeners.mute, _toggleMute);\n\n            // Fullscreen\n            _proxyListener(plyr.buttons.fullscreen, 'click', config.listeners.fullscreen, _toggleFullscreen);\n\n            // Handle user exiting fullscreen by escaping etc\n            if (fullscreen.supportsFullScreen) {\n                _on(document, fullscreen.fullScreenEventName, _toggleFullscreen);\n            }\n\n            // Captions\n            _on(plyr.buttons.captions, 'click', _toggleCaptions);\n\n            // Seek tooltip\n            _on(plyr.progress.container, 'mouseenter mouseleave mousemove', _updateSeekTooltip);\n\n            // Toggle controls visibility based on mouse movement\n            if (config.hideControls) {\n                // Toggle controls on mouse events and entering fullscreen\n                _on(plyr.container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', _toggleControls);\n\n                // Watch for cursor over controls so they don't hide when trying to interact\n                _on(plyr.controls, 'mouseenter mouseleave', function(event) {\n                    plyr.controls.hover = event.type === 'mouseenter';\n                });\n\n                 // Watch for cursor over controls so they don't hide when trying to interact\n                _on(plyr.controls, 'mousedown mouseup touchstart touchend touchcancel', function(event) {\n                    plyr.controls.pressed = _inArray(['mousedown', 'touchstart'], event.type);\n                });\n\n                // Focus in/out on controls\n                _on(plyr.controls, 'focus blur', _toggleControls, true);\n            }\n\n            // Adjust volume on scroll\n            _on(plyr.volume.input, 'wheel', function(event) {\n                event.preventDefault();\n\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                var inverted = event.webkitDirectionInvertedFromDevice,\n                    step = (config.volumeStep / 5);\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        _decreaseVolume(step);\n                    } else {\n                        _increaseVolume(step);\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        _increaseVolume(step);\n                    } else {\n                        _decreaseVolume(step);\n                    }\n                }\n            });\n        }\n\n        // Listen for media events\n        function _mediaListeners() {\n            // Time change on media\n            _on(plyr.media, 'timeupdate seeking', _timeUpdate);\n\n            // Update manual captions\n            _on(plyr.media, 'timeupdate', _seekManualCaptions);\n\n            // Display duration\n            _on(plyr.media, 'durationchange loadedmetadata', _displayDuration);\n\n            // Handle the media finishing\n            _on(plyr.media, 'ended', function() {\n                // Show poster on end\n                if (plyr.type === 'video' && config.showPosterOnEnd) {\n                    // Clear\n                    if (plyr.type === 'video') {\n                        _setCaption();\n                    }\n\n                    // Restart\n                    _seek();\n\n                    // Re-load media\n                    plyr.media.load();\n                }\n            });\n\n            // Check for buffer progress\n            _on(plyr.media, 'progress playing', _updateProgress);\n\n            // Handle native mute\n            _on(plyr.media, 'volumechange', _updateVolume);\n\n            // Handle native play/pause\n            _on(plyr.media, 'play pause ended', _checkPlaying);\n\n            // Loading\n            _on(plyr.media, 'waiting canplay seeked', _checkLoading);\n\n            // Click video\n            if (config.clickToPlay && plyr.type !== 'audio') {\n                // Re-fetch the wrapper\n                var wrapper = _getElement('.' + config.classes.videoWrapper);\n\n                // Bail if there's no wrapper (this should never happen)\n                if (!wrapper) {\n                    return;\n                }\n\n                // Set cursor\n                wrapper.style.cursor = \"pointer\";\n\n                // On click play, pause ore restart\n                _on(wrapper, 'click', function() {\n                    // Touch devices will just show controls (if we're hiding controls)\n                    if (config.hideControls && plyr.browser.isTouch && !plyr.media.paused) {\n                        return;\n                    }\n\n                    if (plyr.media.paused) {\n                        _play();\n                    } else if (plyr.media.ended) {\n                        _seek();\n                        _play();\n                    } else {\n                        _pause();\n                    }\n                });\n            }\n\n            // Disable right click\n            if (config.disableContextMenu) {\n                _on(plyr.media, 'contextmenu', function(event) { event.preventDefault(); });\n            }\n\n            // Proxy events to container\n            // Bubble up key events for Edge\n            _on(plyr.media, config.events.concat(['keyup', 'keydown']).join(' '), function(event) {\n                _triggerEvent(plyr.container, event.type, true);\n            });\n        }\n\n        // Cancel current network requests\n        // See https://github.com/Selz/plyr/issues/174\n        function _cancelRequests() {\n            if (!_inArray(config.types.html5, plyr.type)) {\n                return;\n            }\n\n            // Remove child sources\n            var sources = plyr.media.querySelectorAll('source');\n            for (var i = 0; i < sources.length; i++) {\n                _remove(sources[i]);\n            }\n\n            // Set blank video src attribute\n            // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n            // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n            plyr.media.setAttribute('src', 'https://cdn.selz.com/plyr/blank.mp4');\n\n            // Load the new empty source\n            // This will cancel existing requests\n            // See https://github.com/Selz/plyr/issues/174\n            plyr.media.load();\n\n            // Debugging\n            _log('Cancelled network requests');\n        }\n\n        // Destroy an instance\n        // Event listeners are removed when elements are removed\n        // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n        function _destroy(callback, restore) {\n            // Bail if the element is not initialized\n            if (!plyr.init) {\n                return null;\n            }\n\n            // Type specific stuff\n            switch (plyr.type) {\n                case 'youtube':\n                    // Clear timers\n                    window.clearInterval(timers.buffering);\n                    window.clearInterval(timers.playing);\n\n                    // Destroy YouTube API\n                    plyr.embed.destroy();\n\n                    // Clean up\n                    cleanUp();\n\n                    break;\n\n                case 'vimeo':\n                    // Destroy Vimeo API\n                    // then clean up (wait, to prevent postmessage errors)\n                    plyr.embed.unload().then(cleanUp);\n\n                    // Vimeo does not always return\n                    timers.cleanUp = window.setTimeout(cleanUp, 200);\n\n                    break;\n\n                case 'video':\n                case 'audio':\n                    // Restore native video controls\n                    _toggleNativeControls(true);\n\n                    // Clean up\n                    cleanUp();\n\n                    break;\n            }\n\n            function cleanUp() {\n                clearTimeout(timers.cleanUp);\n\n                // Default to restore original element\n                if (!_is.boolean(restore)) {\n                    restore = true;\n                }\n\n                // Callback\n                if (_is.function(callback)) {\n                    callback.call(original);\n                }\n\n                // Bail if we don't need to restore the original element\n                if (!restore) {\n                    return;\n                }\n\n                // Remove init flag\n                plyr.init = false;\n\n                // Replace the container with the original element provided\n                plyr.container.parentNode.replaceChild(original, plyr.container);\n\n                // Allow overflow (set on fullscreen)\n                document.body.style.overflow = '';\n\n                // Event\n                _triggerEvent(original, 'destroyed', true);\n            }\n        }\n\n        // Setup a player\n        function _init() {\n            // Bail if the element is initialized\n            if (plyr.init) {\n                return null;\n            }\n\n            // Setup the fullscreen api\n            fullscreen = _fullscreen();\n\n            // Sniff out the browser\n            plyr.browser = _browserSniff();\n\n            // Bail if nothing to setup\n            if (!_is.htmlElement(plyr.media)) {\n                return;\n            }\n\n            // Load saved settings from localStorage\n            _setupStorage();\n\n            // Set media type based on tag or data attribute\n            // Supported: video, audio, vimeo, youtube\n            var tagName = media.tagName.toLowerCase();\n            if (tagName === 'div') {\n                plyr.type     = media.getAttribute('data-type');\n                plyr.embedId  = media.getAttribute('data-video-id');\n\n                // Clean up\n                media.removeAttribute('data-type');\n                media.removeAttribute('data-video-id');\n            } else {\n                plyr.type           = tagName;\n                config.crossorigin  = (media.getAttribute('crossorigin') !== null);\n                config.autoplay     = (config.autoplay || (media.getAttribute('autoplay') !== null));\n                config.loop         = (config.loop || (media.getAttribute('loop') !== null));\n            }\n\n            // Check for support\n            plyr.supported = supported(plyr.type);\n\n            // If no native support, bail\n            if (!plyr.supported.basic) {\n                return;\n            }\n\n            // Wrap media\n            plyr.container = _wrap(media, document.createElement('div'));\n\n            // Allow focus to be captured\n            plyr.container.setAttribute('tabindex', 0);\n\n            // Add style hook\n            _toggleStyleHook();\n\n            // Debug info\n            _log('' + plyr.browser.name + ' ' + plyr.browser.version);\n\n            // Setup media\n            _setupMedia();\n\n            // Setup interface\n            // If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now\n            if (_inArray(config.types.html5, plyr.type) || (_inArray(config.types.embed, plyr.type) && !plyr.supported.full)) {\n                // Setup UI\n                _setupInterface();\n\n                // Call ready\n                _ready();\n\n                // Set title on button and frame\n                _setTitle();\n            }\n\n            // Successful setup\n            plyr.init = true;\n        }\n\n        // Setup the UI\n        function _setupInterface() {\n            // Don't setup interface if no support\n            if (!plyr.supported.full) {\n                _warn('Basic support only', plyr.type);\n\n                // Remove controls\n                _remove(_getElement(config.selectors.controls.wrapper));\n\n                // Remove large play\n                _remove(_getElement(config.selectors.buttons.play));\n\n                // Restore native controls\n                _toggleNativeControls(true);\n\n                // Bail\n                return;\n            }\n\n            // Inject custom controls if not present\n            var controlsMissing = !_getElements(config.selectors.controls.wrapper).length;\n            if (controlsMissing) {\n                // Inject custom controls\n                _injectControls();\n            }\n\n            // Find the elements\n            if (!_findElements()) {\n                return;\n            }\n\n            // If the controls are injected, re-bind listeners for controls\n            if (controlsMissing) {\n                _controlListeners();\n            }\n\n            // Media element listeners\n            _mediaListeners();\n\n            // Remove native controls\n            _toggleNativeControls();\n\n            // Setup fullscreen\n            _setupFullscreen();\n\n            // Captions\n            _setupCaptions();\n\n            // Set volume\n            _setVolume();\n            _updateVolume();\n\n            // Reset time display\n            _timeUpdate();\n\n            // Update the UI\n            _checkPlaying();\n        }\n\n        api = {\n            getOriginal:        function() { return original; },\n            getContainer:       function() { return plyr.container },\n            getEmbed:           function() { return plyr.embed; },\n            getMedia:           function() { return plyr.media; },\n            getType:            function() { return plyr.type; },\n            getDuration:        _getDuration,\n            getCurrentTime:     function() { return plyr.media.currentTime; },\n            getVolume:          function() { return plyr.media.volume; },\n            isMuted:            function() { return plyr.media.muted; },\n            isReady:            function() { return _hasClass(plyr.container, config.classes.ready); },\n            isLoading:          function() { return _hasClass(plyr.container, config.classes.loading); },\n            isPaused:           function() { return plyr.media.paused; },\n            on:                 function(event, callback) { _on(plyr.container, event, callback); return this; },\n            play:               _play,\n            pause:              _pause,\n            stop:               function() { _pause(); _seek(); },\n            restart:            _seek,\n            rewind:             _rewind,\n            forward:            _forward,\n            seek:               _seek,\n            source:             _source,\n            poster:             _updatePoster,\n            setVolume:          _setVolume,\n            togglePlay:         _togglePlay,\n            toggleMute:         _toggleMute,\n            toggleCaptions:     _toggleCaptions,\n            toggleFullscreen:   _toggleFullscreen,\n            toggleControls:     _toggleControls,\n            isFullscreen:       function() { return plyr.isFullscreen || false; },\n            support:            function(mimeType) { return _supportMime(plyr, mimeType); },\n            destroy:            _destroy\n        };\n\n        // Everything done\n        function _ready() {\n            // Ready event at end of execution stack\n            window.setTimeout(function() {\n                _triggerEvent(plyr.media, 'ready');\n            }, 0);\n\n            // Set class hook on media element\n            _toggleClass(plyr.media, defaults.classes.setup, true);\n\n            // Set container class for ready\n            _toggleClass(plyr.container, config.classes.ready, true);\n\n            // Store a refernce to instance\n            plyr.media.plyr = api;\n\n            // Autoplay\n            if (config.autoplay) {\n                _play();\n            }\n        }\n\n        // Initialize instance\n        _init();\n\n        // If init failed, return null\n        if (!plyr.init) {\n            return null;\n        }\n\n        return api;\n    }\n\n    // Load a sprite\n    function loadSprite(url, id) {\n        var x = new XMLHttpRequest();\n\n        // If the id is set and sprite exists, bail\n        if (_is.string(id) && _is.htmlElement(document.querySelector('#' + id))) {\n            return;\n        }\n\n        // Create placeholder (to prevent loading twice)\n        var container = document.createElement('div');\n        container.setAttribute('hidden', '');\n        if (_is.string(id)) {\n            container.setAttribute('id', id);\n        }\n        document.body.insertBefore(container, document.body.childNodes[0]);\n\n        // Check for CORS support\n        if ('withCredentials' in x) {\n            x.open('GET', url, true);\n        } else {\n            return;\n        }\n\n        // Inject hidden div with sprite on load\n        x.onload = function() {\n            container.innerHTML = x.responseText;\n        }\n\n        x.send();\n    }\n\n    // Check for support\n    function supported(type) {\n        var browser     = _browserSniff(),\n            isOldIE     = (browser.isIE && browser.version <= 9),\n            isIos       = browser.isIos,\n            isIphone    = browser.isIphone,\n            audioSupport = !!document.createElement('audio').canPlayType,\n            videoSupport = !!document.createElement('video').canPlayType,\n            basic       = false,\n            full        = false;\n\n        switch (type) {\n            case 'video':\n                basic = videoSupport;\n                full  = (basic && (!isOldIE && !isIphone));\n                break;\n\n            case 'audio':\n                basic = audioSupport;\n                full  = (basic && !isOldIE);\n                break;\n\n            // Vimeo does not seem to be supported on iOS via API\n            // Issue raised https://github.com/vimeo/player.js/issues/87\n            case 'vimeo':\n                basic = true;\n                full = (!isOldIE && !isIos);\n                break;\n\n            case 'youtube':\n                basic = true;\n                full = (!isOldIE && !isIos);\n\n                // YouTube seems to work on iOS 10+ on iPad\n                if (isIos && !isIphone && browser.version >= 10) {\n                    full = true;\n                }\n\n                break;\n\n            case 'soundcloud':\n                basic = true;\n                full  = (!isOldIE && !isIphone);\n                break;\n\n            default:\n                basic = (audioSupport && videoSupport);\n                full  = (basic && !isOldIE);\n        }\n\n        return {\n            basic:  basic,\n            full:   full\n        };\n    }\n\n    // Setup function\n    function setup(targets, options) {\n        // Get the players\n        var players     = [],\n            instances   = [],\n            selector    = [defaults.selectors.html5, defaults.selectors.embed].join(',');\n\n        // Select the elements\n        if (_is.string(targets)) {\n            // String selector passed\n            targets = document.querySelectorAll(targets);\n        }  else if (_is.htmlElement(targets)) {\n            // Single HTMLElement passed\n            targets = [targets];\n        }  else if (!_is.nodeList(targets) && !_is.array(targets) && !_is.string(targets))  {\n            // No selector passed, possibly options as first argument\n            // If options are the first argument\n            if (_is.undefined(options) && _is.object(targets)) {\n                options = targets;\n            }\n\n            // Use default selector\n            targets = document.querySelectorAll(selector);\n        }\n\n        // Convert NodeList to array\n        if (_is.nodeList(targets)) {\n            targets = Array.prototype.slice.call(targets);\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!supported().basic || !targets.length) {\n            return false;\n        }\n\n        // Add to container list\n        function add(target, media) {\n            if (!_hasClass(media, defaults.classes.hook)) {\n                players.push({\n                    // Always wrap in a <div> for styling\n                    //container:  _wrap(media, document.createElement('div')),\n                    // Could be a container or the media itself\n                    target:     target,\n                    // This should be the <video>, <audio> or <div> (YouTube/Vimeo)\n                    media:      media\n                });\n            }\n        }\n\n        // Check if the targets have multiple media elements\n        for (var i = 0; i < targets.length; i++) {\n            var target = targets[i];\n\n            // Get children\n            var children = target.querySelectorAll(selector);\n\n            // If there's more than one media element child, wrap them\n            if (children.length) {\n                for (var x = 0; x < children.length; x++) {\n                    add(target, children[x]);\n                }\n            } else if (_matches(target, selector)) {\n                // Target is media element\n                add(target, target);\n            }\n        }\n\n        // Create a player instance for each element\n        players.forEach(function(player) {\n            var element     = player.target,\n                media       = player.media,\n                match       = false;\n\n            // The target element can also be the media element\n            if (media === element) {\n                match = true;\n            }\n\n            // Setup a player instance and add to the element\n            // Create instance-specific config\n            var data = {};\n\n            // Try parsing data attribute config\n            try { data = JSON.parse(element.getAttribute('data-plyr')); }\n            catch(e) { }\n\n            var config = _extend({}, defaults, options, data);\n\n            // Bail if not enabled\n            if (!config.enabled) {\n                return null;\n            }\n\n            // Create new instance\n            var instance = new Plyr(media, config);\n\n            // Go to next if setup failed\n            if (!_is.object(instance)) {\n                return;\n            }\n\n            // Listen for events if debugging\n            if (config.debug) {\n                var events = config.events.concat(['setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);\n\n                _on(instance.getContainer(), events.join(' '), function(event) {\n                    console.log([config.logPrefix, 'event:', event.type].join(' '), event.detail.plyr);\n                });\n            }\n\n            // Callback\n            _event(instance.getContainer(), 'setup', true, {\n                plyr: instance\n            });\n\n            // Add to return array even if it's already setup\n            instances.push(instance);\n        });\n\n        return instances;\n    }\n\n    // Get all instances within a provided container\n    function get(container) {\n        if (_is.string(container)) {\n            // Get selector if string passed\n            container = document.querySelector(container);\n        } else if (_is.undefined(container)) {\n            // Use body by default to get all on page\n            container = document.body;\n        }\n\n        // If we have a HTML element\n        if (_is.htmlElement(container)) {\n            var elements = container.querySelectorAll('.' + defaults.classes.setup),\n                instances = [];\n\n            Array.prototype.slice.call(elements).forEach(function(element) {\n                if (_is.object(element.plyr)) {\n                    instances.push(element.plyr);\n                }\n            });\n\n            return instances;\n        }\n\n        return [];\n    }\n\n    return {\n        setup:      setup,\n        supported:  supported,\n        loadSprite: loadSprite,\n        get:        get\n    };\n}));\n\n// Custom event polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n(function () {\n    if (typeof window.CustomEvent === 'function') {\n        return;\n    }\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/plyr/src/js/plyr.js\n ** module id = 506\n ** module chunks = 4\n **/"],"sourceRoot":""}